
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800a1f0  0800a1f0  0001a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a318  0800a318  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a320  0800a320  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800a328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a8c  24000078  0800a3a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004b04  0800a3a0  00024b04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002623b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dd3  00000000  00000000  000462e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b0  00000000  00000000  0004a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001638  00000000  00000000  0004b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004fd7  00000000  00000000  0004cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b14  00000000  00000000  00051e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016c1e4  00000000  00000000  0006598b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d1b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000699c  00000000  00000000  001d1bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a1d8 	.word	0x0800a1d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800a1d8 	.word	0x0800a1d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

/* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005e8:	1d39      	adds	r1, r7, #4
 80005ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ee:	2201      	movs	r2, #1
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <__io_putchar+0x20>)
 80005f2:	f003 ff67 	bl	80044c4 <HAL_UART_Transmit>
  return ch;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	24004a2c 	.word	0x24004a2c

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fcc2 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f838 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9d4 	bl	80009bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f986 	bl	8000924 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000618:	f000 f8e2 	bl	80007e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800061c:	f000 f934 	bl	8000888 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("system start run ....\n");
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x58>)
 8000622:	f009 f9cd 	bl	80099c0 <puts>
  HAL_TIM_Base_Start_IT(&htim3);
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0x5c>)
 8000628:	f003 fadc 	bl	8003be4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <main+0x60>)
 800062e:	f003 fad9 	bl	8003be4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000632:	f006 fbeb 	bl	8006e0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <main+0x64>)
 8000638:	2100      	movs	r1, #0
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <main+0x68>)
 800063c:	f006 fc50 	bl	8006ee0 <osThreadNew>
 8000640:	4602      	mov	r2, r0
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0x6c>)
 8000644:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  testTaskHandle = osThreadNew(testDefaultTask, NULL, &testTask_attributes);
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <main+0x70>)
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x74>)
 800064c:	f006 fc48 	bl	8006ee0 <osThreadNew>
 8000650:	4602      	mov	r2, r0
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <main+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f006 fc0d 	bl	8006e74 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x56>
 800065c:	0800a208 	.word	0x0800a208
 8000660:	240049ec 	.word	0x240049ec
 8000664:	240049ac 	.word	0x240049ac
 8000668:	0800a25c 	.word	0x0800a25c
 800066c:	08000b49 	.word	0x08000b49
 8000670:	240049a8 	.word	0x240049a8
 8000674:	0800a280 	.word	0x0800a280
 8000678:	08000ab1 	.word	0x08000ab1
 800067c:	24004ab8 	.word	0x24004ab8

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0cc      	sub	sp, #304	; 0x130
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800068a:	224c      	movs	r2, #76	; 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f009 f931 	bl	80098f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000698:	2220      	movs	r2, #32
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f009 f92a 	bl	80098f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4618      	mov	r0, r3
 80006a8:	23bc      	movs	r3, #188	; 0xbc
 80006aa:	461a      	mov	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f009 f922 	bl	80098f6 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f000 ffe4 	bl	8001680 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <SystemClock_Config+0x158>)
 80006c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c2:	4a45      	ldr	r2, [pc, #276]	; (80007d8 <SystemClock_Config+0x158>)
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ca:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <SystemClock_Config+0x158>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	f003 0201 	and.w	r2, r3, #1
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <SystemClock_Config+0x15c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006de:	4a3f      	ldr	r2, [pc, #252]	; (80007dc <SystemClock_Config+0x15c>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <SystemClock_Config+0x15c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f6:	bf00      	nop
 80006f8:	4b38      	ldr	r3, [pc, #224]	; (80007dc <SystemClock_Config+0x15c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000704:	d1f8      	bne.n	80006f8 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000706:	2301      	movs	r3, #1
 8000708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000720:	2305      	movs	r3, #5
 8000722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000726:	2328      	movs	r3, #40	; 0x28
 8000728:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800073e:	2308      	movs	r3, #8
 8000740:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000754:	4618      	mov	r0, r3
 8000756:	f000 ffcd 	bl	80016f4 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000760:	f000 f9fc 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	233f      	movs	r3, #63	; 0x3f
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2303      	movs	r3, #3
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000794:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fb82 	bl	8001ea4 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80007a6:	f000 f9d9 	bl	8000b5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fef4 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80007ca:	f000 f9c7 	bl	8000b5c <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58000400 	.word	0x58000400
 80007dc:	58024800 	.word	0x58024800

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_TIM3_Init+0x9c>)
 8000800:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MX_TIM3_Init+0xa0>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM3_Init+0x9c>)
 8000806:	2264      	movs	r2, #100	; 0x64
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM3_Init+0x9c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM3_Init+0x9c>)
 8000812:	f242 720f 	movw	r2, #9999	; 0x270f
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM3_Init+0x9c>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_TIM3_Init+0x9c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000824:	4815      	ldr	r0, [pc, #84]	; (800087c <MX_TIM3_Init+0x9c>)
 8000826:	f003 f9b1 	bl	8003b8c <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000830:	f000 f994 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480e      	ldr	r0, [pc, #56]	; (800087c <MX_TIM3_Init+0x9c>)
 8000842:	f003 fb19 	bl	8003e78 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800084c:	f000 f986 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM3_Init+0x9c>)
 800085e:	f003 fd3b 	bl	80042d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 f978 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  printf("interupt success \n");
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_TIM3_Init+0xa4>)
 800086e:	f009 f8a7 	bl	80099c0 <puts>
  /* USER CODE END TIM3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	240049ec 	.word	0x240049ec
 8000880:	40000400 	.word	0x40000400
 8000884:	0800a220 	.word	0x0800a220

08000888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM4_Init+0x94>)
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <MX_TIM4_Init+0x98>)
 80008aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;						//100MHz 分频之后1MHz  1us
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM4_Init+0x94>)
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_TIM4_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000 - 1;						//10000us 10ms 800hz
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM4_Init+0x94>)
 80008ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80008be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_TIM4_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM4_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_TIM4_Init+0x94>)
 80008ce:	f003 f95d 	bl	8003b8c <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008d8:	f000 f940 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_TIM4_Init+0x94>)
 80008ea:	f003 fac5 	bl	8003e78 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 f932 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_TIM4_Init+0x94>)
 8000906:	f003 fce7 	bl	80042d8 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f924 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	240049ac 	.word	0x240049ac
 8000920:	40000800 	.word	0x40000800

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <MX_USART1_UART_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800096e:	f003 fd59 	bl	8004424 <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 f8f0 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000980:	f006 f957 	bl	8006c32 <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f8e7 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000992:	f006 f98c 	bl	8006cae <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 f8de 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 80009a2:	f006 f90d 	bl	8006bc0 <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f8d6 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24004a2c 	.word	0x24004a2c
 80009b8:	40011000 	.word	0x40011000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_GPIO_Init+0xc4>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <MX_GPIO_Init+0xc4>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_GPIO_Init+0xc4>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_GPIO_Init+0xc4>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <MX_GPIO_Init+0xc4>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_GPIO_Init+0xc4>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_GPIO_Init+0xc4>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <MX_GPIO_Init+0xc4>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_GPIO_Init+0xc4>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	213c      	movs	r1, #60	; 0x3c
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0xc8>)
 8000a32:	f000 fe0b 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <MX_GPIO_Init+0xcc>)
 8000a3c:	f000 fe06 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a40:	233c      	movs	r3, #60	; 0x3c
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <MX_GPIO_Init+0xc8>)
 8000a58:	f000 fc48 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0xcc>)
 8000a74:	f000 fc3a 	bl	80012ec <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58021000 	.word	0x58021000
 8000a88:	58020000 	.word	0x58020000

08000a8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	static unsigned int count = 0;
    if (htim->Instance == htim3.Instance)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
    	//count ++;
    	//printf("count = %d \n", count);					//测试出来一秒100条记录 即10ms一次中断

    }

}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	240049ec 	.word	0x240049ec

08000ab0 <testDefaultTask>:
//    SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;   //关闭计时�??
//    SysTick->VAL=0x00;                         //清空计时�??
}

void testDefaultTask(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
//		}
//
//		HAL_TIM_Base_Stop_IT(&htim4);
//		count ++;
//		printf("test timer count = %d \n", count);
		osDelay(10);
 8000abc:	200a      	movs	r0, #10
 8000abe:	f006 fab5 	bl	800702c <osDelay>
 8000ac2:	e7fb      	b.n	8000abc <testDefaultTask+0xc>

08000ac4 <motor_control_Z>:

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
}
//正转	A B C D
void motor_control_Z(int n)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2108      	movs	r1, #8
 8000ad0:	481c      	ldr	r0, [pc, #112]	; (8000b44 <motor_control_Z+0x80>)
 8000ad2:	f000 fdbb 	bl	800164c <HAL_GPIO_WritePin>
	osDelay(n);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f006 faa7 	bl	800702c <osDelay>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4818      	ldr	r0, [pc, #96]	; (8000b44 <motor_control_Z+0x80>)
 8000ae4:	f000 fdb2 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2104      	movs	r1, #4
 8000aec:	4815      	ldr	r0, [pc, #84]	; (8000b44 <motor_control_Z+0x80>)
 8000aee:	f000 fdad 	bl	800164c <HAL_GPIO_WritePin>
	osDelay(n);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 fa99 	bl	800702c <osDelay>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2104      	movs	r1, #4
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <motor_control_Z+0x80>)
 8000b00:	f000 fda4 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2120      	movs	r1, #32
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <motor_control_Z+0x80>)
 8000b0a:	f000 fd9f 	bl	800164c <HAL_GPIO_WritePin>
	osDelay(n);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fa8b 	bl	800702c <osDelay>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	480a      	ldr	r0, [pc, #40]	; (8000b44 <motor_control_Z+0x80>)
 8000b1c:	f000 fd96 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <motor_control_Z+0x80>)
 8000b26:	f000 fd91 	bl	800164c <HAL_GPIO_WritePin>
	osDelay(n);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 fa7d 	bl	800702c <osDelay>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2110      	movs	r1, #16
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <motor_control_Z+0x80>)
 8000b38:	f000 fd88 	bl	800164c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
	osDelay(n);
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58021000 	.word	0x58021000

08000b48 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int i = 0 ;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
		  motor_control_F(3);
	  }
	  printf("反转ok.....\n");
	  osDelay(2000);
	  */
	  motor_control_Z(3);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f7ff ffb5 	bl	8000ac4 <motor_control_Z>
 8000b5a:	e7fb      	b.n	8000b54 <StartDefaultTask+0xc>

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_MspInit+0x38>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_MspInit+0x38>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_MspInit+0x38>)
 8000b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	210f      	movs	r1, #15
 8000b94:	f06f 0001 	mvn.w	r0, #1
 8000b98:	f000 fb73 	bl	8001282 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d117      	bne.n	8000bea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2105      	movs	r1, #5
 8000bdc:	201d      	movs	r0, #29
 8000bde:	f000 fb50 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000be2:	201d      	movs	r0, #29
 8000be4:	f000 fb67 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000be8:	e01b      	b.n	8000c22 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <HAL_TIM_Base_MspInit+0x8c>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d116      	bne.n	8000c22 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2105      	movs	r1, #5
 8000c16:	201e      	movs	r0, #30
 8000c18:	f000 fb33 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c1c:	201e      	movs	r0, #30
 8000c1e:	f000 fb4a 	bl	80012b6 <HAL_NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	58024400 	.word	0x58024400
 8000c34:	40000800 	.word	0x40000800

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12e      	bne.n	8000cb8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000cb4:	f000 fb1a 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020000 	.word	0x58020000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f9b6 	bl	8001074 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d08:	f007 fd82 	bl	8008810 <xTaskGetSchedulerState>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d001      	beq.n	8000d16 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d12:	f008 fb59 	bl	80093c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM3_IRQHandler+0x10>)
 8000d22:	f002 ff89 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	240049ec 	.word	0x240049ec

08000d30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM4_IRQHandler+0x10>)
 8000d36:	f002 ff7f 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	240049ac 	.word	0x240049ac

08000d44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
	}

return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc21 	bl	80005e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>
	}
	return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x50>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x16>
		heap_end = &end;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <_sbrk+0x50>)
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <_sbrk+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <_sbrk+0x50>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <_sbrk+0x50>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	466a      	mov	r2, sp
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d907      	bls.n	8000e5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e4a:	f008 fd1f 	bl	800988c <__errno>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	230c      	movs	r3, #12
 8000e52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	e006      	b.n	8000e68 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <_sbrk+0x50>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <_sbrk+0x50>)
 8000e64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000094 	.word	0x24000094
 8000e74:	24004b08 	.word	0x24004b08

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <SystemInit+0xac>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <SystemInit+0xac>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <SystemInit+0xb0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <SystemInit+0xb0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <SystemInit+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <SystemInit+0xb0>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4921      	ldr	r1, [pc, #132]	; (8000f28 <SystemInit+0xb0>)
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <SystemInit+0xb4>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <SystemInit+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <SystemInit+0xb0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <SystemInit+0xb0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <SystemInit+0xb0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <SystemInit+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <SystemInit+0xb0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <SystemInit+0xb0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <SystemInit+0xb0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <SystemInit+0xb0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <SystemInit+0xb0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <SystemInit+0xb0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <SystemInit+0xb0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <SystemInit+0xb0>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <SystemInit+0xb0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <SystemInit+0xb8>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <SystemInit+0xbc>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f0a:	d202      	bcs.n	8000f12 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <SystemInit+0xc0>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SystemInit+0xac>)
 8000f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f30:	5c001000 	.word	0x5c001000
 8000f34:	ffff0000 	.word	0xffff0000
 8000f38:	51008108 	.word	0x51008108

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f42:	e003      	b.n	8000f4c <LoopCopyDataInit>

08000f44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f4a:	3104      	adds	r1, #4

08000f4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f54:	d3f6      	bcc.n	8000f44 <CopyDataInit>
  ldr  r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f58:	e002      	b.n	8000f60 <LoopFillZerobss>

08000f5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f5c:	f842 3b04 	str.w	r3, [r2], #4

08000f60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f64:	d3f9      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ff87 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f008 fc95 	bl	8009898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb49 	bl	8000604 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000f78:	0800a328 	.word	0x0800a328
  ldr  r0, =_sdata
 8000f7c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000f80:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8000f84:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8000f88:	24004b04 	.word	0x24004b04

08000f8c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f968 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f001 f938 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <HAL_Init+0x6c>)
 8000fae:	5cd3      	ldrb	r3, [r2, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f814 	bl	8001008 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fdbf 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	0800a2a4 	.word	0x0800a2a4
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e021      	b.n	8001060 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_InitTick+0x64>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f94d 	bl	80012d2 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f917 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x68>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2400000c 	.word	0x2400000c
 800106c:	24000000 	.word	0x24000000
 8001070:	24000008 	.word	0x24000008

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2400000c 	.word	0x2400000c
 8001098:	24004abc 	.word	0x24004abc

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	24004abc 	.word	0x24004abc

080010b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetREVID+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	5c001000 	.word	0x5c001000

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff40 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff33 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa4 	bl	8001228 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012fa:	4b89      	ldr	r3, [pc, #548]	; (8001520 <HAL_GPIO_Init+0x234>)
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012fe:	e194      	b.n	800162a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8186 	beq.w	8001624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d00b      	beq.n	8001338 <HAL_GPIO_Init+0x4c>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132c:	2b11      	cmp	r3, #17
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 0201 	and.w	r2, r3, #1
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0xee>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80e0 	beq.w	8001624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x238>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x23c>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_GPIO_Init+0x240>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d052      	beq.n	8001554 <HAL_GPIO_Init+0x268>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x244>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_GPIO_Init+0x248>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x22a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_GPIO_Init+0x24c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_GPIO_Init+0x250>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_GPIO_Init+0x254>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x258>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x25c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_GPIO_Init+0x260>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_GPIO_Init+0x264>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x20e>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e02d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e02b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fe:	2308      	movs	r3, #8
 8001500:	e029      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001502:	2307      	movs	r3, #7
 8001504:	e027      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001506:	2306      	movs	r3, #6
 8001508:	e025      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150a:	2305      	movs	r3, #5
 800150c:	e023      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150e:	2304      	movs	r3, #4
 8001510:	e021      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001512:	2303      	movs	r3, #3
 8001514:	e01f      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001516:	2302      	movs	r3, #2
 8001518:	e01d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151a:	2301      	movs	r3, #1
 800151c:	e01b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151e:	bf00      	nop
 8001520:	58000080 	.word	0x58000080
 8001524:	58024400 	.word	0x58024400
 8001528:	58000400 	.word	0x58000400
 800152c:	58020000 	.word	0x58020000
 8001530:	58020400 	.word	0x58020400
 8001534:	58020800 	.word	0x58020800
 8001538:	58020c00 	.word	0x58020c00
 800153c:	58021000 	.word	0x58021000
 8001540:	58021400 	.word	0x58021400
 8001544:	58021800 	.word	0x58021800
 8001548:	58021c00 	.word	0x58021c00
 800154c:	58022000 	.word	0x58022000
 8001550:	58022400 	.word	0x58022400
 8001554:	2300      	movs	r3, #0
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001566:	4938      	ldr	r1, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x35c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800161c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f ae63 	bne.w	8001300 <HAL_GPIO_Init+0x14>
  }
}
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	58000400 	.word	0x58000400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_PWREx_ConfigSupply+0x70>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b04      	cmp	r3, #4
 8001692:	d00a      	beq.n	80016aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_PWREx_ConfigSupply+0x70>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e01f      	b.n	80016e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e01d      	b.n	80016e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_PWREx_ConfigSupply+0x70>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	490f      	ldr	r1, [pc, #60]	; (80016f0 <HAL_PWREx_ConfigSupply+0x70>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016ba:	f7ff fcef 	bl	800109c <HAL_GetTick>
 80016be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016c0:	e009      	b.n	80016d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016c2:	f7ff fceb 	bl	800109c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016d0:	d901      	bls.n	80016d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e007      	b.n	80016e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_PWREx_ConfigSupply+0x70>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e2:	d1ee      	bne.n	80016c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	58024800 	.word	0x58024800

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e3c4      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001714:	4ba2      	ldr	r3, [pc, #648]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800171e:	4ba0      	ldr	r3, [pc, #640]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	2b10      	cmp	r3, #16
 8001728:	d007      	beq.n	800173a <HAL_RCC_OscConfig+0x46>
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	2b18      	cmp	r3, #24
 800172e:	d110      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d10b      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	4b99      	ldr	r3, [pc, #612]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <HAL_RCC_OscConfig+0x12c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d168      	bne.n	8001820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e39e      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x76>
 800175c:	4b90      	ldr	r3, [pc, #576]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a8f      	ldr	r2, [pc, #572]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e02e      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a8a      	ldr	r2, [pc, #552]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a87      	ldr	r2, [pc, #540]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xbc>
 8001796:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a81      	ldr	r2, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7e      	ldr	r2, [pc, #504]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc64 	bl	800109c <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc60 	bl	800109c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e352      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ea:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe4>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc50 	bl	800109c <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fc4c 	bl	800109c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e33e      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x10c>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8092 	beq.w	8001954 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001838:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800183a:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_RCC_OscConfig+0x162>
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	2b18      	cmp	r3, #24
 800184a:	d12d      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d128      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001856:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x17a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e310      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	f7ff fc21 	bl	80010b4 <HAL_GetREVID>
 8001872:	4602      	mov	r2, r0
 8001874:	f241 0303 	movw	r3, #4099	; 0x1003
 8001878:	429a      	cmp	r2, r3
 800187a:	d80a      	bhi.n	8001892 <HAL_RCC_OscConfig+0x19e>
 800187c:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	031b      	lsls	r3, r3, #12
 800188a:	4945      	ldr	r1, [pc, #276]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001890:	e060      	b.n	8001954 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	493f      	ldr	r1, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a6:	e055      	b.n	8001954 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d038      	beq.n	8001922 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 0219 	bic.w	r2, r3, #25
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4938      	ldr	r1, [pc, #224]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fbeb 	bl	800109c <HAL_GetTick>
 80018c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fbe7 	bl	800109c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e2d9      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	f7ff fbe4 	bl	80010b4 <HAL_GetREVID>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d80a      	bhi.n	800190c <HAL_RCC_OscConfig+0x218>
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	031b      	lsls	r3, r3, #12
 8001904:	4926      	ldr	r1, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e023      	b.n	8001954 <HAL_RCC_OscConfig+0x260>
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4921      	ldr	r1, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e018      	b.n	8001954 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff fbb5 	bl	800109c <HAL_GetTick>
 8001932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fbb1 	bl	800109c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e2a3      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 8091 	beq.w	8001a84 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800196a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b08      	cmp	r3, #8
 8001976:	d007      	beq.n	8001988 <HAL_RCC_OscConfig+0x294>
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b18      	cmp	r3, #24
 800197c:	d12f      	bne.n	80019de <HAL_RCC_OscConfig+0x2ea>
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d12a      	bne.n	80019de <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2b0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d003      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e277      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
 80019a0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019a4:	f7ff fb86 	bl	80010b4 <HAL_GetREVID>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f241 0303 	movw	r3, #4099	; 0x1003
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d80a      	bhi.n	80019c8 <HAL_RCC_OscConfig+0x2d4>
 80019b2:	4ba2      	ldr	r3, [pc, #648]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	069b      	lsls	r3, r3, #26
 80019c0:	499e      	ldr	r1, [pc, #632]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019c6:	e05d      	b.n	8001a84 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019c8:	4b9c      	ldr	r3, [pc, #624]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	4999      	ldr	r1, [pc, #612]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019dc:	e052      	b.n	8001a84 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d035      	beq.n	8001a52 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019e6:	4b95      	ldr	r3, [pc, #596]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a94      	ldr	r2, [pc, #592]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fb53 	bl	800109c <HAL_GetTick>
 80019f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019fa:	f7ff fb4f 	bl	800109c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e241      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a0c:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a18:	f7ff fb4c 	bl	80010b4 <HAL_GetREVID>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d80a      	bhi.n	8001a3c <HAL_RCC_OscConfig+0x348>
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	069b      	lsls	r3, r3, #26
 8001a34:	4981      	ldr	r1, [pc, #516]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
 8001a3a:	e023      	b.n	8001a84 <HAL_RCC_OscConfig+0x390>
 8001a3c:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	497c      	ldr	r1, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
 8001a50:	e018      	b.n	8001a84 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a79      	ldr	r2, [pc, #484]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb1d 	bl	800109c <HAL_GetTick>
 8001a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a66:	f7ff fb19 	bl	800109c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e20b      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a78:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d036      	beq.n	8001afe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d019      	beq.n	8001acc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9c:	4a67      	ldr	r2, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fafa 	bl	800109c <HAL_GetTick>
 8001aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff faf6 	bl	800109c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1e8      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001abe:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x3b8>
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001acc:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad0:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fae0 	bl	800109c <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fadc 	bl	800109c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1ce      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d036      	beq.n	8001b78 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d019      	beq.n	8001b46 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a49      	ldr	r2, [pc, #292]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fabd 	bl	800109c <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b26:	f7ff fab9 	bl	800109c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1ab      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b38:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x432>
 8001b44:	e018      	b.n	8001b78 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3c      	ldr	r2, [pc, #240]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b52:	f7ff faa3 	bl	800109c <HAL_GetTick>
 8001b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b5a:	f7ff fa9f 	bl	800109c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e191      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8086 	beq.w	8001c92 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_OscConfig+0x54c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2d      	ldr	r2, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x54c>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b92:	f7ff fa83 	bl	800109c <HAL_GetTick>
 8001b96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff fa7f 	bl	800109c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b64      	cmp	r3, #100	; 0x64
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e171      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x54c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x4da>
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e02d      	b.n	8001c2a <HAL_RCC_OscConfig+0x536>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4fc>
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	e01c      	b.n	8001c2a <HAL_RCC_OscConfig+0x536>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d10c      	bne.n	8001c12 <HAL_RCC_OscConfig+0x51e>
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c10:	e00b      	b.n	8001c2a <HAL_RCC_OscConfig+0x536>
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x548>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01a      	beq.n	8001c68 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff fa33 	bl	800109c <HAL_GetTick>
 8001c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c38:	e00f      	b.n	8001c5a <HAL_RCC_OscConfig+0x566>
 8001c3a:	bf00      	nop
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff fa2a 	bl	800109c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e11a      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c5a:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0ee      	beq.n	8001c44 <HAL_RCC_OscConfig+0x550>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff fa18 	bl	800109c <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7ff fa14 	bl	800109c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e104      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c86:	4b84      	ldr	r3, [pc, #528]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ee      	bne.n	8001c70 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80f9 	beq.w	8001e8e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c9c:	4b7e      	ldr	r3, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca4:	2b18      	cmp	r3, #24
 8001ca6:	f000 80b4 	beq.w	8001e12 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	f040 8095 	bne.w	8001dde <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f9ec 	bl	800109c <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f9e8 	bl	800109c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0da      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce6:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cea:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <HAL_RCC_OscConfig+0x7a8>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	4967      	ldr	r1, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	3b01      	subs	r3, #1
 8001d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	025b      	lsls	r3, r3, #9
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	061b      	lsls	r3, r3, #24
 8001d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d30:	4959      	ldr	r1, [pc, #356]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d36:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d42:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x7ac>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d4e:	00d2      	lsls	r2, r2, #3
 8001d50:	4951      	ldr	r1, [pc, #324]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d56:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f023 020c 	bic.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	494d      	ldr	r1, [pc, #308]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d68:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	f023 0202 	bic.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	4948      	ldr	r1, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	4a46      	ldr	r2, [pc, #280]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	4a40      	ldr	r2, [pc, #256]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	4a3d      	ldr	r2, [pc, #244]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f971 	bl	800109c <HAL_GetTick>
 8001dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f96d 	bl	800109c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e05f      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x6ca>
 8001ddc:	e057      	b.n	8001e8e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f957 	bl	800109c <HAL_GetTick>
 8001dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f953 	bl	800109c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e045      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x6fe>
 8001e10:	e03d      	b.n	8001e8e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_RCC_OscConfig+0x7a4>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d031      	beq.n	8001e8a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d12a      	bne.n	8001e8a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d122      	bne.n	8001e8a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d11a      	bne.n	8001e8a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	0a5b      	lsrs	r3, r3, #9
 8001e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d111      	bne.n	8001e8a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d108      	bne.n	8001e8a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0e1b      	lsrs	r3, r3, #24
 8001e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3730      	adds	r7, #48	; 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	fffffc0c 	.word	0xfffffc0c
 8001ea0:	ffff0007 	.word	0xffff0007

08001ea4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e19c      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b8a      	ldr	r3, [pc, #552]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b87      	ldr	r3, [pc, #540]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 020f 	bic.w	r2, r3, #15
 8001ece:	4985      	ldr	r1, [pc, #532]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b83      	ldr	r3, [pc, #524]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e184      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4975      	ldr	r1, [pc, #468]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	496a      	ldr	r1, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f60:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	495e      	ldr	r1, [pc, #376]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d908      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f8e:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4953      	ldr	r1, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d908      	bls.n	8001fce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f023 020f 	bic.w	r2, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4947      	ldr	r1, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d055      	beq.n	8002086 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4940      	ldr	r1, [pc, #256]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d121      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0f6      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d107      	bne.n	800201c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d115      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0ea      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0de      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d6      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002052:	4313      	orrs	r3, r2
 8002054:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff f821 	bl	800109c <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205c:	e00a      	b.n	8002074 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205e:	f7ff f81d 	bl	800109c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0be      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	429a      	cmp	r2, r3
 8002084:	d1eb      	bne.n	800205e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d010      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	429a      	cmp	r2, r3
 80020a0:	d208      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d214      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 020f 	bic.w	r2, r3, #15
 80020ca:	4906      	ldr	r1, [pc, #24]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e086      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
 80020e4:	52002000 	.word	0x52002000
 80020e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002108:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4939      	ldr	r1, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002116:	4313      	orrs	r3, r2
 8002118:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d208      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	492e      	ldr	r1, [pc, #184]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002144:	4313      	orrs	r3, r2
 8002146:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002160:	429a      	cmp	r2, r3
 8002162:	d208      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002172:	4313      	orrs	r3, r2
 8002174:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800218e:	429a      	cmp	r2, r3
 8002190:	d208      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4917      	ldr	r1, [pc, #92]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021a4:	f000 f834 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021a8:	4601      	mov	r1, r0
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x35c>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa21 f303 	lsr.w	r3, r1, r3
 80021c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_RCC_ClockConfig+0x35c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x360>)
 80021da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x364>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x368>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe ff0e 	bl	8001008 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	58024400 	.word	0x58024400
 8002200:	0800a2a4 	.word	0x0800a2a4
 8002204:	24000004 	.word	0x24000004
 8002208:	24000000 	.word	0x24000000
 800220c:	24000008 	.word	0x24000008

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002216:	4baf      	ldr	r3, [pc, #700]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221e:	2b18      	cmp	r3, #24
 8002220:	f200 814e 	bhi.w	80024c0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002224:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	08002291 	.word	0x08002291
 8002230:	080024c1 	.word	0x080024c1
 8002234:	080024c1 	.word	0x080024c1
 8002238:	080024c1 	.word	0x080024c1
 800223c:	080024c1 	.word	0x080024c1
 8002240:	080024c1 	.word	0x080024c1
 8002244:	080024c1 	.word	0x080024c1
 8002248:	080024c1 	.word	0x080024c1
 800224c:	080022b7 	.word	0x080022b7
 8002250:	080024c1 	.word	0x080024c1
 8002254:	080024c1 	.word	0x080024c1
 8002258:	080024c1 	.word	0x080024c1
 800225c:	080024c1 	.word	0x080024c1
 8002260:	080024c1 	.word	0x080024c1
 8002264:	080024c1 	.word	0x080024c1
 8002268:	080024c1 	.word	0x080024c1
 800226c:	080022bd 	.word	0x080022bd
 8002270:	080024c1 	.word	0x080024c1
 8002274:	080024c1 	.word	0x080024c1
 8002278:	080024c1 	.word	0x080024c1
 800227c:	080024c1 	.word	0x080024c1
 8002280:	080024c1 	.word	0x080024c1
 8002284:	080024c1 	.word	0x080024c1
 8002288:	080024c1 	.word	0x080024c1
 800228c:	080022c3 	.word	0x080022c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002290:	4b90      	ldr	r3, [pc, #576]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800229c:	4b8d      	ldr	r3, [pc, #564]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	4a8c      	ldr	r2, [pc, #560]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022ae:	e10a      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022b0:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022b2:	61bb      	str	r3, [r7, #24]
    break;
 80022b4:	e107      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80022b8:	61bb      	str	r3, [r7, #24]
    break;
 80022ba:	e104      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80022bc:	4b88      	ldr	r3, [pc, #544]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80022be:	61bb      	str	r3, [r7, #24]
    break;
 80022c0:	e101      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022c2:	4b84      	ldr	r3, [pc, #528]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022cc:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022d8:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022e2:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80da 	beq.w	80024ba <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d05a      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800230c:	2b01      	cmp	r3, #1
 800230e:	d302      	bcc.n	8002316 <HAL_RCC_GetSysClockFreq+0x106>
 8002310:	2b02      	cmp	r3, #2
 8002312:	d078      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002314:	e099      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02d      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002322:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	08db      	lsrs	r3, r3, #3
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002360:	eddf 5a60 	vldr	s11, [pc, #384]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800236c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800237c:	e087      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002388:	eddf 6a57 	vldr	s13, [pc, #348]	; 80024e8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800238c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80023a4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023c0:	e065      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023cc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80024ec <HAL_RCC_GetSysClockFreq+0x2dc>
 80023d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80023e8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002404:	e043      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002410:	eddf 6a37 	vldr	s13, [pc, #220]	; 80024f0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002428:	ed97 6a02 	vldr	s12, [r7, #8]
 800242c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800243c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002448:	e021      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002454:	eddf 6a25 	vldr	s13, [pc, #148]	; 80024ec <HAL_RCC_GetSysClockFreq+0x2dc>
 8002458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002470:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800248c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	0a5b      	lsrs	r3, r3, #9
 8002494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002498:	3301      	adds	r3, #1
 800249a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80024aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b2:	ee17 3a90 	vmov	r3, s15
 80024b6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80024b8:	e005      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
    break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80024c2:	61bb      	str	r3, [r7, #24]
    break;
 80024c4:	bf00      	nop
  }

  return sysclockfreq;
 80024c6:	69bb      	ldr	r3, [r7, #24]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3724      	adds	r7, #36	; 0x24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	58024400 	.word	0x58024400
 80024d8:	03d09000 	.word	0x03d09000
 80024dc:	003d0900 	.word	0x003d0900
 80024e0:	017d7840 	.word	0x017d7840
 80024e4:	46000000 	.word	0x46000000
 80024e8:	4c742400 	.word	0x4c742400
 80024ec:	4a742400 	.word	0x4a742400
 80024f0:	4bbebc20 	.word	0x4bbebc20

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024fa:	f7ff fe89 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_RCC_GetHCLKFreq+0x50>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_RCC_GetHCLKFreq+0x54>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	fa21 f303 	lsr.w	r3, r1, r3
 8002516:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_RCC_GetHCLKFreq+0x50>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_GetHCLKFreq+0x54>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_RCC_GetHCLKFreq+0x58>)
 8002530:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_RCC_GetHCLKFreq+0x58>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	58024400 	.word	0x58024400
 8002548:	0800a2a4 	.word	0x0800a2a4
 800254c:	24000004 	.word	0x24000004
 8002550:	24000000 	.word	0x24000000

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002558:	f7ff ffcc 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 800255c:	4601      	mov	r1, r0
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_RCC_GetPCLK1Freq+0x28>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	58024400 	.word	0x58024400
 800257c:	0800a2a4 	.word	0x0800a2a4

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002584:	f7ff ffb6 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002588:	4601      	mov	r1, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	0800a2a4 	.word	0x0800a2a4

080025ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d03d      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d0:	d013      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80025d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d6:	d802      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025dc:	e01f      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80025de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e2:	d013      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80025e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025e8:	d01c      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80025ea:	e018      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025ec:	4baf      	ldr	r3, [pc, #700]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4aae      	ldr	r2, [pc, #696]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025f8:	e015      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2102      	movs	r1, #2
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f95f 	bl	80038c4 <RCCEx_PLL2_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800260a:	e00c      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3324      	adds	r3, #36	; 0x24
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fa08 	bl	8003a28 <RCCEx_PLL3_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800261c:	e003      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
      break;
 8002622:	e000      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800262c:	4b9f      	ldr	r3, [pc, #636]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800262e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002638:	499c      	ldr	r1, [pc, #624]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800263a:	4313      	orrs	r3, r2
 800263c:	650b      	str	r3, [r1, #80]	; 0x50
 800263e:	e001      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03d      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2b04      	cmp	r3, #4
 8002656:	d826      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002675 	.word	0x08002675
 8002664:	08002683 	.word	0x08002683
 8002668:	08002695 	.word	0x08002695
 800266c:	080026ad 	.word	0x080026ad
 8002670:	080026ad 	.word	0x080026ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002674:	4b8d      	ldr	r3, [pc, #564]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	4a8c      	ldr	r2, [pc, #560]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800267a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002680:	e015      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f001 f91b 	bl	80038c4 <RCCEx_PLL2_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002692:	e00c      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3324      	adds	r3, #36	; 0x24
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f001 f9c4 	bl	8003a28 <RCCEx_PLL3_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026a4:	e003      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
      break;
 80026aa:	e000      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80026ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	f023 0207 	bic.w	r2, r3, #7
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	497a      	ldr	r1, [pc, #488]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	650b      	str	r3, [r1, #80]	; 0x50
 80026c6:	e001      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03e      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d01c      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d804      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x142>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d00d      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80026ec:	e01e      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80026ee:	2bc0      	cmp	r3, #192	; 0xc0
 80026f0:	d01f      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f6:	d01e      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80026f8:	e018      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026fa:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	4a6b      	ldr	r2, [pc, #428]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002706:	e017      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f001 f8d8 	bl	80038c4 <RCCEx_PLL2_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002718:	e00e      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3324      	adds	r3, #36	; 0x24
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f001 f981 	bl	8003a28 <RCCEx_PLL3_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800272a:	e005      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
      break;
 8002730:	e002      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800273e:	4b5b      	ldr	r3, [pc, #364]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002742:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4958      	ldr	r1, [pc, #352]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800274c:	4313      	orrs	r3, r2
 800274e:	650b      	str	r3, [r1, #80]	; 0x50
 8002750:	e001      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	2b00      	cmp	r3, #0
 8002760:	d044      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276c:	d01f      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 800276e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002772:	d805      	bhi.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800277c:	d00e      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800277e:	e01f      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002780:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002784:	d01f      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800278a:	d01e      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800278c:	e018      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800279a:	e017      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f88e 	bl	80038c4 <RCCEx_PLL2_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80027ac:	e00e      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3324      	adds	r3, #36	; 0x24
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f937 	bl	8003a28 <RCCEx_PLL3_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027be:	e005      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
      break;
 80027c4:	e002      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80027ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027e0:	4932      	ldr	r1, [pc, #200]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	658b      	str	r3, [r1, #88]	; 0x58
 80027e6:	e001      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d044      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002802:	d01f      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002808:	d805      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800280e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002812:	d00e      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002814:	e01f      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800281a:	d01f      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800281c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002820:	d01e      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002822:	e018      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800282a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002830:	e017      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f001 f843 	bl	80038c4 <RCCEx_PLL2_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002842:	e00e      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3324      	adds	r3, #36	; 0x24
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f8ec 	bl	8003a28 <RCCEx_PLL3_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002854:	e005      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002876:	490d      	ldr	r1, [pc, #52]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002878:	4313      	orrs	r3, r2
 800287a:	658b      	str	r3, [r1, #88]	; 0x58
 800287c:	e001      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d035      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	2b10      	cmp	r3, #16
 8002894:	d00c      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002896:	2b10      	cmp	r3, #16
 8002898:	d802      	bhi.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01b      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800289e:	e017      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d00c      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x312>
 80028a4:	2b30      	cmp	r3, #48	; 0x30
 80028a6:	d018      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80028a8:	e012      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80028aa:	bf00      	nop
 80028ac:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b0:	4baf      	ldr	r3, [pc, #700]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	4aae      	ldr	r2, [pc, #696]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80028bc:	e00e      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fffd 	bl	80038c4 <RCCEx_PLL2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
      break;
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80028da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028e2:	4ba3      	ldr	r3, [pc, #652]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	49a0      	ldr	r1, [pc, #640]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80028f4:	e001      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d042      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290e:	d01f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002914:	d805      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d00e      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002920:	e01f      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002926:	d01f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800292c:	d01e      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800292e:	e018      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002930:	4b8f      	ldr	r3, [pc, #572]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4a8e      	ldr	r2, [pc, #568]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800293c:	e017      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f000 ffbd 	bl	80038c4 <RCCEx_PLL2_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800294e:	e00e      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f001 f866 	bl	8003a28 <RCCEx_PLL3_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002960:	e005      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800296c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002974:	4b7e      	ldr	r3, [pc, #504]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	497b      	ldr	r1, [pc, #492]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	650b      	str	r3, [r1, #80]	; 0x50
 8002986:	e001      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d042      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a0:	d01b      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a6:	d805      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d022      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029b2:	e01b      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x440>
 80029b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b8:	d01d      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80029ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029be:	d01c      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80029c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029c4:	d01b      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x452>
 80029c6:	e011      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 ff78 	bl	80038c4 <RCCEx_PLL2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029d8:	e012      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3324      	adds	r3, #36	; 0x24
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 f821 	bl	8003a28 <RCCEx_PLL3_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029ea:	e009      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
      break;
 80029f0:	e006      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029f2:	bf00      	nop
 80029f4:	e004      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	4957      	ldr	r1, [pc, #348]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	650b      	str	r3, [r1, #80]	; 0x50
 8002a18:	e001      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d01b      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3a:	d805      	bhi.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d022      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a46:	e01b      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d01d      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a52:	d01c      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002a54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a58:	d01b      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a5a:	e011      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ff2e 	bl	80038c4 <RCCEx_PLL2_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a6c:	e012      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3324      	adds	r3, #36	; 0x24
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ffd7 	bl	8003a28 <RCCEx_PLL3_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a7e:	e009      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	75fb      	strb	r3, [r7, #23]
      break;
 8002a84:	e006      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e004      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e002      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aa8:	4931      	ldr	r1, [pc, #196]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	658b      	str	r3, [r1, #88]	; 0x58
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ace:	d009      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002ad4:	e00f      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ae2:	e00c      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 feea 	bl	80038c4 <RCCEx_PLL2_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002af4:	e003      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
      break;
 8002afa:	e000      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b10:	4917      	ldr	r1, [pc, #92]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	650b      	str	r3, [r1, #80]	; 0x50
 8002b16:	e001      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d035      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d81b      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b75 	.word	0x08002b75
 8002b3c:	08002b49 	.word	0x08002b49
 8002b40:	08002b57 	.word	0x08002b57
 8002b44:	08002b75 	.word	0x08002b75
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b54:	e00f      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 feb1 	bl	80038c4 <RCCEx_PLL2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b66:	e006      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400
      break;
 8002b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b7c:	4bba      	ldr	r3, [pc, #744]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	f023 0203 	bic.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	49b7      	ldr	r1, [pc, #732]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b8e:	e001      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba2:	4bb2      	ldr	r3, [pc, #712]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4ab1      	ldr	r2, [pc, #708]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bae:	f7fe fa75 	bl	800109c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb4:	e009      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fa71 	bl	800109c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	; 0x64
 8002bc2:	d902      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	75fb      	strb	r3, [r7, #23]
        break;
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bca:	4ba8      	ldr	r3, [pc, #672]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d166      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bdc:	4ba2      	ldr	r3, [pc, #648]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002be6:	4053      	eors	r3, r2
 8002be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf0:	4b9d      	ldr	r3, [pc, #628]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bfa:	4b9b      	ldr	r3, [pc, #620]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a9a      	ldr	r2, [pc, #616]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c06:	4b98      	ldr	r3, [pc, #608]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a97      	ldr	r2, [pc, #604]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c12:	4a95      	ldr	r2, [pc, #596]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c22:	d115      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fa3a 	bl	800109c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fa36 	bl	800109c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d902      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	75fb      	strb	r3, [r7, #23]
            break;
 8002c42:	e005      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c44:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ed      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d126      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002c66:	4b80      	ldr	r3, [pc, #512]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c74:	0919      	lsrs	r1, r3, #4
 8002c76:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002c78:	400b      	ands	r3, r1
 8002c7a:	497b      	ldr	r1, [pc, #492]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	610b      	str	r3, [r1, #16]
 8002c80:	e005      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002c82:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c8c:	6113      	str	r3, [r2, #16]
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9c:	4972      	ldr	r1, [pc, #456]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	670b      	str	r3, [r1, #112]	; 0x70
 8002ca2:	e004      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	75bb      	strb	r3, [r7, #22]
 8002ca8:	e001      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d07d      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbe:	2b28      	cmp	r3, #40	; 0x28
 8002cc0:	d866      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002d97 	.word	0x08002d97
 8002ccc:	08002d91 	.word	0x08002d91
 8002cd0:	08002d91 	.word	0x08002d91
 8002cd4:	08002d91 	.word	0x08002d91
 8002cd8:	08002d91 	.word	0x08002d91
 8002cdc:	08002d91 	.word	0x08002d91
 8002ce0:	08002d91 	.word	0x08002d91
 8002ce4:	08002d91 	.word	0x08002d91
 8002ce8:	08002d6d 	.word	0x08002d6d
 8002cec:	08002d91 	.word	0x08002d91
 8002cf0:	08002d91 	.word	0x08002d91
 8002cf4:	08002d91 	.word	0x08002d91
 8002cf8:	08002d91 	.word	0x08002d91
 8002cfc:	08002d91 	.word	0x08002d91
 8002d00:	08002d91 	.word	0x08002d91
 8002d04:	08002d91 	.word	0x08002d91
 8002d08:	08002d7f 	.word	0x08002d7f
 8002d0c:	08002d91 	.word	0x08002d91
 8002d10:	08002d91 	.word	0x08002d91
 8002d14:	08002d91 	.word	0x08002d91
 8002d18:	08002d91 	.word	0x08002d91
 8002d1c:	08002d91 	.word	0x08002d91
 8002d20:	08002d91 	.word	0x08002d91
 8002d24:	08002d91 	.word	0x08002d91
 8002d28:	08002d97 	.word	0x08002d97
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002d91 	.word	0x08002d91
 8002d34:	08002d91 	.word	0x08002d91
 8002d38:	08002d91 	.word	0x08002d91
 8002d3c:	08002d91 	.word	0x08002d91
 8002d40:	08002d91 	.word	0x08002d91
 8002d44:	08002d91 	.word	0x08002d91
 8002d48:	08002d97 	.word	0x08002d97
 8002d4c:	08002d91 	.word	0x08002d91
 8002d50:	08002d91 	.word	0x08002d91
 8002d54:	08002d91 	.word	0x08002d91
 8002d58:	08002d91 	.word	0x08002d91
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002d91 	.word	0x08002d91
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002d97 	.word	0x08002d97
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fda6 	bl	80038c4 <RCCEx_PLL2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d7c:	e00c      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3324      	adds	r3, #36	; 0x24
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fe4f 	bl	8003a28 <RCCEx_PLL3_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d8e:	e003      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d9e:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002daa:	492f      	ldr	r1, [pc, #188]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	654b      	str	r3, [r1, #84]	; 0x54
 8002db0:	e001      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d037      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d820      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e13 	.word	0x08002e13
 8002dd4:	08002de9 	.word	0x08002de9
 8002dd8:	08002dfb 	.word	0x08002dfb
 8002ddc:	08002e13 	.word	0x08002e13
 8002de0:	08002e13 	.word	0x08002e13
 8002de4:	08002e13 	.word	0x08002e13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fd68 	bl	80038c4 <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002df8:	e00c      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3324      	adds	r3, #36	; 0x24
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fe11 	bl	8003a28 <RCCEx_PLL3_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e0a:	e003      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e10:	e000      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	4910      	ldr	r1, [pc, #64]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e2c:	e001      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d827      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e9f 	.word	0x08002e9f
 8002e54:	08002e75 	.word	0x08002e75
 8002e58:	08002e87 	.word	0x08002e87
 8002e5c:	08002e9f 	.word	0x08002e9f
 8002e60:	08002e9f 	.word	0x08002e9f
 8002e64:	08002e9f 	.word	0x08002e9f
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	58024800 	.word	0x58024800
 8002e70:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fd22 	bl	80038c4 <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e84:	e00c      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fdcb 	bl	8003a28 <RCCEx_PLL3_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e96:	e003      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea6:	4bb2      	ldr	r3, [pc, #712]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	49ae      	ldr	r1, [pc, #696]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	658b      	str	r3, [r1, #88]	; 0x58
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d044      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed6:	d01b      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002edc:	d805      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d022      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002ee8:	e01b      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d01d      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef4:	d01c      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002efa:	d01b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002efc:	e011      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fcdd 	bl	80038c4 <RCCEx_PLL2_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f0e:	e012      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3324      	adds	r3, #36	; 0x24
 8002f14:	2102      	movs	r1, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd86 	bl	8003a28 <RCCEx_PLL3_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f20:	e009      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
      break;
 8002f26:	e006      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e004      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e002      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4a:	4989      	ldr	r1, [pc, #548]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	654b      	str	r3, [r1, #84]	; 0x54
 8002f50:	e001      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d044      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6c:	d01b      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f72:	d805      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002f7e:	e01b      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d01d      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f8a:	d01c      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f90:	d01b      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fc92 	bl	80038c4 <RCCEx_PLL2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fa4:	e012      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3324      	adds	r3, #36	; 0x24
 8002faa:	2102      	movs	r1, #2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fd3b 	bl	8003a28 <RCCEx_PLL3_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fb6:	e009      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbc:	e006      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e004      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e002      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fd2:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe0:	4963      	ldr	r1, [pc, #396]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	658b      	str	r3, [r1, #88]	; 0x58
 8002fe6:	e001      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d044      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003002:	d01b      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d805      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d022      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003014:	e01b      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301a:	d01d      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800301c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003020:	d01c      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003022:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003026:	d01b      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003028:	e011      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fc47 	bl	80038c4 <RCCEx_PLL2_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800303a:	e012      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fcf0 	bl	8003a28 <RCCEx_PLL3_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800304c:	e009      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
      break;
 8003052:	e006      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003054:	bf00      	nop
 8003056:	e004      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003058:	bf00      	nop
 800305a:	e002      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800305c:	bf00      	nop
 800305e:	e000      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003068:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003076:	493e      	ldr	r1, [pc, #248]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	658b      	str	r3, [r1, #88]	; 0x58
 800307c:	e001      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003098:	d10a      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3324      	adds	r3, #36	; 0x24
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fcc1 	bl	8003a28 <RCCEx_PLL3_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030b0:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030be:	492c      	ldr	r1, [pc, #176]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030da:	d10a      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3324      	adds	r3, #36	; 0x24
 80030e0:	2102      	movs	r1, #2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fca0 	bl	8003a28 <RCCEx_PLL3_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003100:	491b      	ldr	r1, [pc, #108]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d032      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d00d      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800311e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003122:	d016      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fbc8 	bl	80038c4 <RCCEx_PLL2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003138:	e00c      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3324      	adds	r3, #36	; 0x24
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fc71 	bl	8003a28 <RCCEx_PLL3_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800314a:	e003      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
      break;
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003168:	4901      	ldr	r1, [pc, #4]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	658b      	str	r3, [r1, #88]	; 0x58
 800316e:	e003      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02f      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800318e:	d00c      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003194:	d015      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800319a:	d10f      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319c:	4b71      	ldr	r3, [pc, #452]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a70      	ldr	r2, [pc, #448]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031a8:	e00c      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3324      	adds	r3, #36	; 0x24
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fc39 	bl	8003a28 <RCCEx_PLL3_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
      break;
 80031c0:	e000      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80031c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ca:	4b66      	ldr	r3, [pc, #408]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d8:	4962      	ldr	r1, [pc, #392]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	654b      	str	r3, [r1, #84]	; 0x54
 80031de:	e001      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d029      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d007      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80031fe:	e00f      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003200:	4b58      	ldr	r3, [pc, #352]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a57      	ldr	r2, [pc, #348]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800320c:	e00b      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2102      	movs	r1, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fb55 	bl	80038c4 <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
      break;
 8003224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800322c:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	494a      	ldr	r1, [pc, #296]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800323e:	e001      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fbe6 	bl	8003a28 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02f      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d00c      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d802      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d011      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003286:	e00d      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d00f      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800328e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003292:	d00e      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003296:	4b33      	ldr	r3, [pc, #204]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	4a32      	ldr	r2, [pc, #200]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032a2:	e007      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
      break;
 80032a8:	e004      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80032b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c6:	4927      	ldr	r1, [pc, #156]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	654b      	str	r3, [r1, #84]	; 0x54
 80032cc:	e001      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	491e      	ldr	r1, [pc, #120]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	4916      	ldr	r1, [pc, #88]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	4a11      	ldr	r2, [pc, #68]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003324:	6113      	str	r3, [r2, #16]
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003332:	4313      	orrs	r3, r2
 8003334:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	da08      	bge.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	4906      	ldr	r1, [pc, #24]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800334c:	4313      	orrs	r3, r2
 800334e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003350:	7dbb      	ldrb	r3, [r7, #22]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	58024400 	.word	0x58024400

08003368 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800336c:	f7ff f8c2 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8003370:	4601      	mov	r1, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	0800a2a4 	.word	0x0800a2a4

08003394 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800339c:	4b9d      	ldr	r3, [pc, #628]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80033a6:	4b9b      	ldr	r3, [pc, #620]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	0b1b      	lsrs	r3, r3, #12
 80033ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80033b2:	4b98      	ldr	r3, [pc, #608]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80033be:	4b95      	ldr	r3, [pc, #596]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 810a 	beq.w	80035f6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d05a      	beq.n	800349e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d302      	bcc.n	80033f2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d078      	beq.n	80034e2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80033f0:	e099      	b.n	8003526 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f2:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02d      	beq.n	800345a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033fe:	4b85      	ldr	r3, [pc, #532]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	08db      	lsrs	r3, r3, #3
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	4a83      	ldr	r2, [pc, #524]	; (8003618 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003428:	4b7a      	ldr	r3, [pc, #488]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003438:	ed97 6a03 	vldr	s12, [r7, #12]
 800343c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003454:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003458:	e087      	b.n	800356a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003464:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003620 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003480:	eddf 5a66 	vldr	s11, [pc, #408]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800349c:	e065      	b.n	800356a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80034ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b0:	4b58      	ldr	r3, [pc, #352]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80034c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80034c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034e0:	e043      	b.n	800356a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80034f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f4:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003504:	ed97 6a03 	vldr	s12, [r7, #12]
 8003508:	eddf 5a44 	vldr	s11, [pc, #272]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800350c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003520:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003524:	e021      	b.n	800356a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003548:	ed97 6a03 	vldr	s12, [r7, #12]
 800354c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003564:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003568:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	0a5b      	lsrs	r3, r3, #9
 8003570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003584:	edd7 6a07 	vldr	s13, [r7, #28]
 8003588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 2a90 	vmov	r2, s15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80035b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035be:	ee17 2a90 	vmov	r2, s15
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	0e1b      	lsrs	r3, r3, #24
 80035cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ec:	ee17 2a90 	vmov	r2, s15
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035f4:	e008      	b.n	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	58024400 	.word	0x58024400
 8003618:	03d09000 	.word	0x03d09000
 800361c:	46000000 	.word	0x46000000
 8003620:	4c742400 	.word	0x4c742400
 8003624:	4a742400 	.word	0x4a742400
 8003628:	4bbebc20 	.word	0x4bbebc20

0800362c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003634:	4b9d      	ldr	r3, [pc, #628]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800363e:	4b9b      	ldr	r3, [pc, #620]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	0d1b      	lsrs	r3, r3, #20
 8003644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003648:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800364a:	4b98      	ldr	r3, [pc, #608]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003656:	4b95      	ldr	r3, [pc, #596]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	08db      	lsrs	r3, r3, #3
 800365c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 810a 	beq.w	800388e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d05a      	beq.n	8003736 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003680:	2b01      	cmp	r3, #1
 8003682:	d302      	bcc.n	800368a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003684:	2b02      	cmp	r3, #2
 8003686:	d078      	beq.n	800377a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003688:	e099      	b.n	80037be <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800368a:	4b88      	ldr	r3, [pc, #544]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02d      	beq.n	80036f2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003696:	4b85      	ldr	r3, [pc, #532]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	08db      	lsrs	r3, r3, #3
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	4a83      	ldr	r2, [pc, #524]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c0:	4b7a      	ldr	r3, [pc, #488]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80036d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036f0:	e087      	b.n	8003802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003704:	4b69      	ldr	r3, [pc, #420]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003714:	ed97 6a03 	vldr	s12, [r7, #12]
 8003718:	eddf 5a66 	vldr	s11, [pc, #408]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800371c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003734:	e065      	b.n	8003802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003740:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80038bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003748:	4b58      	ldr	r3, [pc, #352]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003758:	ed97 6a03 	vldr	s12, [r7, #12]
 800375c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003774:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003778:	e043      	b.n	8003802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003784:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80038c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378c:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379c:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037bc:	e021      	b.n	8003802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80038bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80037cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003800:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003802:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800381c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003828:	ee17 2a90 	vmov	r2, s15
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384a:	edd7 6a07 	vldr	s13, [r7, #28]
 800384e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003856:	ee17 2a90 	vmov	r2, s15
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	0e1b      	lsrs	r3, r3, #24
 8003864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003878:	edd7 6a07 	vldr	s13, [r7, #28]
 800387c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003884:	ee17 2a90 	vmov	r2, s15
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800388c:	e008      	b.n	80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	3724      	adds	r7, #36	; 0x24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	58024400 	.word	0x58024400
 80038b0:	03d09000 	.word	0x03d09000
 80038b4:	46000000 	.word	0x46000000
 80038b8:	4c742400 	.word	0x4c742400
 80038bc:	4a742400 	.word	0x4a742400
 80038c0:	4bbebc20 	.word	0x4bbebc20

080038c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038d2:	4b53      	ldr	r3, [pc, #332]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d101      	bne.n	80038e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e099      	b.n	8003a16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4e      	ldr	r2, [pc, #312]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80038e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ee:	f7fd fbd5 	bl	800109c <HAL_GetTick>
 80038f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038f4:	e008      	b.n	8003908 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038f6:	f7fd fbd1 	bl	800109c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e086      	b.n	8003a16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003908:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	493f      	ldr	r1, [pc, #252]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	628b      	str	r3, [r1, #40]	; 0x28
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	3b01      	subs	r3, #1
 800392e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	025b      	lsls	r3, r3, #9
 800393a:	b29b      	uxth	r3, r3
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	3b01      	subs	r3, #1
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	3b01      	subs	r3, #1
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003958:	4931      	ldr	r1, [pc, #196]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 800395a:	4313      	orrs	r3, r2
 800395c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	492d      	ldr	r1, [pc, #180]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f023 0220 	bic.w	r2, r3, #32
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4928      	ldr	r1, [pc, #160]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 800397e:	4313      	orrs	r3, r2
 8003980:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <RCCEx_PLL2_Config+0x160>)
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	69d2      	ldr	r2, [r2, #28]
 800399a:	00d2      	lsls	r2, r2, #3
 800399c:	4920      	ldr	r1, [pc, #128]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039c0:	e00f      	b.n	80039e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039d4:	e005      	b.n	80039e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 80039e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fd fb55 	bl	800109c <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039f4:	e008      	b.n	8003a08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039f6:	f7fd fb51 	bl	800109c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e006      	b.n	8003a16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	ffff0007 	.word	0xffff0007

08003a28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a36:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d101      	bne.n	8003a46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e099      	b.n	8003b7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a46:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a52:	f7fd fb23 	bl	800109c <HAL_GetTick>
 8003a56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a5a:	f7fd fb1f 	bl	800109c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e086      	b.n	8003b7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a6c:	4b45      	ldr	r3, [pc, #276]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f0      	bne.n	8003a5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a78:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	051b      	lsls	r3, r3, #20
 8003a86:	493f      	ldr	r1, [pc, #252]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	628b      	str	r3, [r1, #40]	; 0x28
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	025b      	lsls	r3, r3, #9
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003abc:	4931      	ldr	r1, [pc, #196]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	492d      	ldr	r1, [pc, #180]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	4928      	ldr	r1, [pc, #160]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ae6:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <RCCEx_PLL3_Config+0x160>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	69d2      	ldr	r2, [r2, #28]
 8003afe:	00d2      	lsls	r2, r2, #3
 8003b00:	4920      	ldr	r1, [pc, #128]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b06:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b24:	e00f      	b.n	8003b46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d106      	bne.n	8003b3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b2c:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b38:	e005      	b.n	8003b46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b52:	f7fd faa3 	bl	800109c <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b58:	e008      	b.n	8003b6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b5a:	f7fd fa9f 	bl	800109c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e006      	b.n	8003b7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	58024400 	.word	0x58024400
 8003b88:	ffff0007 	.word	0xffff0007

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01d      	b.n	8003bda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fc fff8 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fa4c 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_TIM_Base_Start_IT+0x50>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d00b      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x42>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d007      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	00010007 	.word	0x00010007

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9d6 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9c8 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f9d9 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f9ac 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f99e 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f9af 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f982 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f974 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f985 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f958 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f94a 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f95b 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fc fe68 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fb0a 	bl	80043fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d10e      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d107      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fafd 	bl	8004410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d10e      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d107      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f909 	bl	8004054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d10e      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f06f 0220 	mvn.w	r2, #32
 8003e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fabd 	bl	80043e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_ConfigClockSource+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0b7      	b.n	8004000 <HAL_TIM_ConfigClockSource+0x188>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4b57      	ldr	r3, [pc, #348]	; (8004008 <HAL_TIM_ConfigClockSource+0x190>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	d02e      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0xae>
 8003ec8:	2b70      	cmp	r3, #112	; 0x70
 8003eca:	d812      	bhi.n	8003ef2 <HAL_TIM_ConfigClockSource+0x7a>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	f000 8084 	beq.w	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003ed2:	2b30      	cmp	r3, #48	; 0x30
 8003ed4:	d806      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x6c>
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d07f      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d07d      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d07b      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ee2:	e084      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003ee4:	2b50      	cmp	r3, #80	; 0x50
 8003ee6:	d048      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x102>
 8003ee8:	2b60      	cmp	r3, #96	; 0x60
 8003eea:	d056      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x122>
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d064      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x142>
      break;
 8003ef0:	e07d      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003ef2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ef6:	d070      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003ef8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003efc:	d809      	bhi.n	8003f12 <HAL_TIM_ConfigClockSource+0x9a>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f02:	d027      	beq.n	8003f54 <HAL_TIM_ConfigClockSource+0xdc>
 8003f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f08:	d067      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d06d      	beq.n	8003fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f10:	e06d      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003f12:	4a3e      	ldr	r2, [pc, #248]	; (800400c <HAL_TIM_ConfigClockSource+0x194>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d060      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003f18:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <HAL_TIM_ConfigClockSource+0x198>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d05d      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
 8003f1e:	4a3d      	ldr	r2, [pc, #244]	; (8004014 <HAL_TIM_ConfigClockSource+0x19c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d05a      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003f24:	e063      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6899      	ldr	r1, [r3, #8]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f000 f9af 	bl	8004298 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	609a      	str	r2, [r3, #8]
      break;
 8003f52:	e04c      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6899      	ldr	r1, [r3, #8]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f000 f998 	bl	8004298 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f76:	609a      	str	r2, [r3, #8]
      break;
 8003f78:	e039      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 f908 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2150      	movs	r1, #80	; 0x50
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f962 	bl	800425c <TIM_ITRx_SetConfig>
      break;
 8003f98:	e029      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 f927 	bl	80041fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2160      	movs	r1, #96	; 0x60
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f952 	bl	800425c <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e019      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 f8e8 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f942 	bl	800425c <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e009      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f000 f939 	bl	800425c <TIM_ITRx_SetConfig>
      break;
 8003fea:	e000      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003fec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	ffceff88 	.word	0xffceff88
 800400c:	00100030 	.word	0x00100030
 8004010:	00100040 	.word	0x00100040
 8004014:	00100020 	.word	0x00100020

08004018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a40      	ldr	r2, [pc, #256]	; (800417c <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d00f      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3d      	ldr	r2, [pc, #244]	; (8004180 <TIM_Base_SetConfig+0x118>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3c      	ldr	r2, [pc, #240]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3b      	ldr	r2, [pc, #236]	; (8004188 <TIM_Base_SetConfig+0x120>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3a      	ldr	r2, [pc, #232]	; (800418c <TIM_Base_SetConfig+0x124>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d108      	bne.n	80040ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2f      	ldr	r2, [pc, #188]	; (800417c <TIM_Base_SetConfig+0x114>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2c      	ldr	r2, [pc, #176]	; (8004180 <TIM_Base_SetConfig+0x118>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <TIM_Base_SetConfig+0x120>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a29      	ldr	r2, [pc, #164]	; (800418c <TIM_Base_SetConfig+0x124>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a28      	ldr	r2, [pc, #160]	; (8004190 <TIM_Base_SetConfig+0x128>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <TIM_Base_SetConfig+0x130>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <TIM_Base_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <TIM_Base_SetConfig+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <TIM_Base_SetConfig+0x130>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d103      	bne.n	8004168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	615a      	str	r2, [r3, #20]
}
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40010400 	.word	0x40010400
 8004190:	40014000 	.word	0x40014000
 8004194:	40014400 	.word	0x40014400
 8004198:	40014800 	.word	0x40014800

0800419c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 030a 	bic.w	r3, r3, #10
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0210 	bic.w	r2, r3, #16
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <TIM_ITRx_SetConfig+0x38>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	f043 0307 	orr.w	r3, r3, #7
 800427e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	ffcfff8f 	.word	0xffcfff8f

08004298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e068      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2e      	ldr	r2, [pc, #184]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800432a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d018      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40001800 	.word	0x40001800

080043e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e042      	b.n	80044bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fc fbf5 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	; 0x24
 8004452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8c2 	bl	80045f0 <UART_SetConfig>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f002 fa34 	bl	80068ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f002 fabb 	bl	8006a30 <UART_CheckIdleState>
 80044ba:	4603      	mov	r3, r0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044da:	2b20      	cmp	r3, #32
 80044dc:	f040 8083 	bne.w	80045e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Transmit+0x28>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e07b      	b.n	80045e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Transmit+0x3a>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e074      	b.n	80045e8 <HAL_UART_Transmit+0x124>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004516:	f7fc fdc1 	bl	800109c <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d108      	bne.n	8004548 <HAL_UART_Transmit+0x84>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e003      	b.n	8004550 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004550:	e02c      	b.n	80045ac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f002 faaf 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e03d      	b.n	80045e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3302      	adds	r3, #2
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e007      	b.n	800459a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1cc      	bne.n	8004552 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f002 fa7c 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e00a      	b.n	80045e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80045f4:	b090      	sub	sp, #64	; 0x40
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004626:	4313      	orrs	r3, r2
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4bc1      	ldr	r3, [pc, #772]	; (8004938 <UART_SetConfig+0x348>)
 8004632:	4013      	ands	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800463a:	430b      	orrs	r3, r1
 800463c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4ab7      	ldr	r2, [pc, #732]	; (800493c <UART_SetConfig+0x34c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800466a:	4313      	orrs	r3, r2
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	4bb2      	ldr	r3, [pc, #712]	; (8004940 <UART_SetConfig+0x350>)
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800467e:	430b      	orrs	r3, r1
 8004680:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f023 010f 	bic.w	r1, r3, #15
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4aa9      	ldr	r2, [pc, #676]	; (8004944 <UART_SetConfig+0x354>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d177      	bne.n	8004792 <UART_SetConfig+0x1a2>
 80046a2:	4ba9      	ldr	r3, [pc, #676]	; (8004948 <UART_SetConfig+0x358>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046aa:	2b28      	cmp	r3, #40	; 0x28
 80046ac:	d86c      	bhi.n	8004788 <UART_SetConfig+0x198>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0xc4>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	08004759 	.word	0x08004759
 80046b8:	08004789 	.word	0x08004789
 80046bc:	08004789 	.word	0x08004789
 80046c0:	08004789 	.word	0x08004789
 80046c4:	08004789 	.word	0x08004789
 80046c8:	08004789 	.word	0x08004789
 80046cc:	08004789 	.word	0x08004789
 80046d0:	08004789 	.word	0x08004789
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004789 	.word	0x08004789
 80046dc:	08004789 	.word	0x08004789
 80046e0:	08004789 	.word	0x08004789
 80046e4:	08004789 	.word	0x08004789
 80046e8:	08004789 	.word	0x08004789
 80046ec:	08004789 	.word	0x08004789
 80046f0:	08004789 	.word	0x08004789
 80046f4:	08004769 	.word	0x08004769
 80046f8:	08004789 	.word	0x08004789
 80046fc:	08004789 	.word	0x08004789
 8004700:	08004789 	.word	0x08004789
 8004704:	08004789 	.word	0x08004789
 8004708:	08004789 	.word	0x08004789
 800470c:	08004789 	.word	0x08004789
 8004710:	08004789 	.word	0x08004789
 8004714:	08004771 	.word	0x08004771
 8004718:	08004789 	.word	0x08004789
 800471c:	08004789 	.word	0x08004789
 8004720:	08004789 	.word	0x08004789
 8004724:	08004789 	.word	0x08004789
 8004728:	08004789 	.word	0x08004789
 800472c:	08004789 	.word	0x08004789
 8004730:	08004789 	.word	0x08004789
 8004734:	08004779 	.word	0x08004779
 8004738:	08004789 	.word	0x08004789
 800473c:	08004789 	.word	0x08004789
 8004740:	08004789 	.word	0x08004789
 8004744:	08004789 	.word	0x08004789
 8004748:	08004789 	.word	0x08004789
 800474c:	08004789 	.word	0x08004789
 8004750:	08004789 	.word	0x08004789
 8004754:	08004781 	.word	0x08004781
 8004758:	2301      	movs	r3, #1
 800475a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800475e:	e233      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004766:	e22f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800476e:	e22b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004776:	e227      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004778:	2320      	movs	r3, #32
 800477a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800477e:	e223      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004786:	e21f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800478e:	bf00      	nop
 8004790:	e21a      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6d      	ldr	r2, [pc, #436]	; (800494c <UART_SetConfig+0x35c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d132      	bne.n	8004802 <UART_SetConfig+0x212>
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <UART_SetConfig+0x358>)
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d827      	bhi.n	80047f8 <UART_SetConfig+0x208>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x1c0>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ce:	e1fb      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047d6:	e1f7      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047de:	e1f3      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047e6:	e1ef      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80047e8:	2320      	movs	r3, #32
 80047ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ee:	e1eb      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047f6:	e1e7      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047fe:	bf00      	nop
 8004800:	e1e2      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a52      	ldr	r2, [pc, #328]	; (8004950 <UART_SetConfig+0x360>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d132      	bne.n	8004872 <UART_SetConfig+0x282>
 800480c:	4b4e      	ldr	r3, [pc, #312]	; (8004948 <UART_SetConfig+0x358>)
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	2b05      	cmp	r3, #5
 8004816:	d827      	bhi.n	8004868 <UART_SetConfig+0x278>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x230>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004839 	.word	0x08004839
 8004824:	08004841 	.word	0x08004841
 8004828:	08004849 	.word	0x08004849
 800482c:	08004851 	.word	0x08004851
 8004830:	08004859 	.word	0x08004859
 8004834:	08004861 	.word	0x08004861
 8004838:	2300      	movs	r3, #0
 800483a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800483e:	e1c3      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004846:	e1bf      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800484e:	e1bb      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004856:	e1b7      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004858:	2320      	movs	r3, #32
 800485a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800485e:	e1b3      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004866:	e1af      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800486e:	bf00      	nop
 8004870:	e1aa      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a37      	ldr	r2, [pc, #220]	; (8004954 <UART_SetConfig+0x364>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d132      	bne.n	80048e2 <UART_SetConfig+0x2f2>
 800487c:	4b32      	ldr	r3, [pc, #200]	; (8004948 <UART_SetConfig+0x358>)
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	2b05      	cmp	r3, #5
 8004886:	d827      	bhi.n	80048d8 <UART_SetConfig+0x2e8>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x2a0>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048b9 	.word	0x080048b9
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ae:	e18b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048b6:	e187      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048be:	e183      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048c6:	e17f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048c8:	2320      	movs	r3, #32
 80048ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ce:	e17b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048d6:	e177      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048de:	bf00      	nop
 80048e0:	e172      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <UART_SetConfig+0x368>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d144      	bne.n	8004976 <UART_SetConfig+0x386>
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <UART_SetConfig+0x358>)
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d839      	bhi.n	800496c <UART_SetConfig+0x37c>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0x310>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004919 	.word	0x08004919
 8004904:	08004921 	.word	0x08004921
 8004908:	08004929 	.word	0x08004929
 800490c:	08004931 	.word	0x08004931
 8004910:	0800495d 	.word	0x0800495d
 8004914:	08004965 	.word	0x08004965
 8004918:	2300      	movs	r3, #0
 800491a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800491e:	e153      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004926:	e14f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800492e:	e14b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004936:	e147      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004938:	cfff69f3 	.word	0xcfff69f3
 800493c:	58000c00 	.word	0x58000c00
 8004940:	11fff4ff 	.word	0x11fff4ff
 8004944:	40011000 	.word	0x40011000
 8004948:	58024400 	.word	0x58024400
 800494c:	40004400 	.word	0x40004400
 8004950:	40004800 	.word	0x40004800
 8004954:	40004c00 	.word	0x40004c00
 8004958:	40005000 	.word	0x40005000
 800495c:	2320      	movs	r3, #32
 800495e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004962:	e131      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800496a:	e12d      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004972:	bf00      	nop
 8004974:	e128      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4ac3      	ldr	r2, [pc, #780]	; (8004c88 <UART_SetConfig+0x698>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d178      	bne.n	8004a72 <UART_SetConfig+0x482>
 8004980:	4bc2      	ldr	r3, [pc, #776]	; (8004c8c <UART_SetConfig+0x69c>)
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004988:	2b28      	cmp	r3, #40	; 0x28
 800498a:	d86d      	bhi.n	8004a68 <UART_SetConfig+0x478>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <UART_SetConfig+0x3a4>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	08004a39 	.word	0x08004a39
 8004998:	08004a69 	.word	0x08004a69
 800499c:	08004a69 	.word	0x08004a69
 80049a0:	08004a69 	.word	0x08004a69
 80049a4:	08004a69 	.word	0x08004a69
 80049a8:	08004a69 	.word	0x08004a69
 80049ac:	08004a69 	.word	0x08004a69
 80049b0:	08004a69 	.word	0x08004a69
 80049b4:	08004a41 	.word	0x08004a41
 80049b8:	08004a69 	.word	0x08004a69
 80049bc:	08004a69 	.word	0x08004a69
 80049c0:	08004a69 	.word	0x08004a69
 80049c4:	08004a69 	.word	0x08004a69
 80049c8:	08004a69 	.word	0x08004a69
 80049cc:	08004a69 	.word	0x08004a69
 80049d0:	08004a69 	.word	0x08004a69
 80049d4:	08004a49 	.word	0x08004a49
 80049d8:	08004a69 	.word	0x08004a69
 80049dc:	08004a69 	.word	0x08004a69
 80049e0:	08004a69 	.word	0x08004a69
 80049e4:	08004a69 	.word	0x08004a69
 80049e8:	08004a69 	.word	0x08004a69
 80049ec:	08004a69 	.word	0x08004a69
 80049f0:	08004a69 	.word	0x08004a69
 80049f4:	08004a51 	.word	0x08004a51
 80049f8:	08004a69 	.word	0x08004a69
 80049fc:	08004a69 	.word	0x08004a69
 8004a00:	08004a69 	.word	0x08004a69
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004a69 	.word	0x08004a69
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a59 	.word	0x08004a59
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a69 	.word	0x08004a69
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a69 	.word	0x08004a69
 8004a30:	08004a69 	.word	0x08004a69
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a3e:	e0c3      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a46:	e0bf      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a4e:	e0bb      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a56:	e0b7      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a58:	2320      	movs	r3, #32
 8004a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a5e:	e0b3      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a66:	e0af      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a6e:	bf00      	nop
 8004a70:	e0aa      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a86      	ldr	r2, [pc, #536]	; (8004c90 <UART_SetConfig+0x6a0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d132      	bne.n	8004ae2 <UART_SetConfig+0x4f2>
 8004a7c:	4b83      	ldr	r3, [pc, #524]	; (8004c8c <UART_SetConfig+0x69c>)
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d827      	bhi.n	8004ad8 <UART_SetConfig+0x4e8>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x4a0>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004aa9 	.word	0x08004aa9
 8004a94:	08004ab1 	.word	0x08004ab1
 8004a98:	08004ab9 	.word	0x08004ab9
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004aae:	e08b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ab6:	e087      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004abe:	e083      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ac6:	e07f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ac8:	2320      	movs	r3, #32
 8004aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ace:	e07b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ad0:	2340      	movs	r3, #64	; 0x40
 8004ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ad6:	e077      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ade:	bf00      	nop
 8004ae0:	e072      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a6b      	ldr	r2, [pc, #428]	; (8004c94 <UART_SetConfig+0x6a4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d132      	bne.n	8004b52 <UART_SetConfig+0x562>
 8004aec:	4b67      	ldr	r3, [pc, #412]	; (8004c8c <UART_SetConfig+0x69c>)
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	d827      	bhi.n	8004b48 <UART_SetConfig+0x558>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x510>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b19 	.word	0x08004b19
 8004b04:	08004b21 	.word	0x08004b21
 8004b08:	08004b29 	.word	0x08004b29
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b1e:	e053      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b26:	e04f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b2e:	e04b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b36:	e047      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b38:	2320      	movs	r3, #32
 8004b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b3e:	e043      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b40:	2340      	movs	r3, #64	; 0x40
 8004b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b46:	e03f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b4e:	bf00      	nop
 8004b50:	e03a      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a50      	ldr	r2, [pc, #320]	; (8004c98 <UART_SetConfig+0x6a8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d132      	bne.n	8004bc2 <UART_SetConfig+0x5d2>
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <UART_SetConfig+0x69c>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d827      	bhi.n	8004bb8 <UART_SetConfig+0x5c8>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <UART_SetConfig+0x580>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b89 	.word	0x08004b89
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	08004b99 	.word	0x08004b99
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b8e:	e01b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b90:	2304      	movs	r3, #4
 8004b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b96:	e017      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b9e:	e013      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ba6:	e00f      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004ba8:	2320      	movs	r3, #32
 8004baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bae:	e00b      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004bb0:	2340      	movs	r3, #64	; 0x40
 8004bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bb6:	e007      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bbe:	bf00      	nop
 8004bc0:	e002      	b.n	8004bc8 <UART_SetConfig+0x5d8>
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a32      	ldr	r2, [pc, #200]	; (8004c98 <UART_SetConfig+0x6a8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	f040 86f7 	bne.w	80059c2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	f000 80c0 	beq.w	8004d5e <UART_SetConfig+0x76e>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	dc04      	bgt.n	8004bec <UART_SetConfig+0x5fc>
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d00c      	beq.n	8004c00 <UART_SetConfig+0x610>
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d065      	beq.n	8004cb6 <UART_SetConfig+0x6c6>
 8004bea:	e27a      	b.n	80050e2 <UART_SetConfig+0xaf2>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	f000 81b0 	beq.w	8004f52 <UART_SetConfig+0x962>
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	f000 821e 	beq.w	8005034 <UART_SetConfig+0xa44>
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	f000 8104 	beq.w	8004e06 <UART_SetConfig+0x816>
 8004bfe:	e270      	b.n	80050e2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004c00:	f7fe fbb2 	bl	8003368 <HAL_RCCEx_GetD3PCLK1Freq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04e      	beq.n	8004cac <UART_SetConfig+0x6bc>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d048      	beq.n	8004ca8 <UART_SetConfig+0x6b8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d042      	beq.n	8004ca4 <UART_SetConfig+0x6b4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d03c      	beq.n	8004ca0 <UART_SetConfig+0x6b0>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d036      	beq.n	8004c9c <UART_SetConfig+0x6ac>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	d026      	beq.n	8004c84 <UART_SetConfig+0x694>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d020      	beq.n	8004c80 <UART_SetConfig+0x690>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b07      	cmp	r3, #7
 8004c44:	d01a      	beq.n	8004c7c <UART_SetConfig+0x68c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d014      	beq.n	8004c78 <UART_SetConfig+0x688>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d00e      	beq.n	8004c74 <UART_SetConfig+0x684>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b0a      	cmp	r3, #10
 8004c5c:	d008      	beq.n	8004c70 <UART_SetConfig+0x680>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b0b      	cmp	r3, #11
 8004c64:	d102      	bne.n	8004c6c <UART_SetConfig+0x67c>
 8004c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c6a:	e020      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01e      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	e01c      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	e01a      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c78:	2320      	movs	r3, #32
 8004c7a:	e018      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	e016      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c80:	230c      	movs	r3, #12
 8004c82:	e014      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c84:	230a      	movs	r3, #10
 8004c86:	e012      	b.n	8004cae <UART_SetConfig+0x6be>
 8004c88:	40011400 	.word	0x40011400
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	40007800 	.word	0x40007800
 8004c94:	40007c00 	.word	0x40007c00
 8004c98:	58000c00 	.word	0x58000c00
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	e006      	b.n	8004cae <UART_SetConfig+0x6be>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	e004      	b.n	8004cae <UART_SetConfig+0x6be>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e002      	b.n	8004cae <UART_SetConfig+0x6be>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e000      	b.n	8004cae <UART_SetConfig+0x6be>
 8004cac:	2301      	movs	r3, #1
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cb4:	e219      	b.n	80050ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fb6a 	bl	8003394 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d044      	beq.n	8004d54 <UART_SetConfig+0x764>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d03e      	beq.n	8004d50 <UART_SetConfig+0x760>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d038      	beq.n	8004d4c <UART_SetConfig+0x75c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d032      	beq.n	8004d48 <UART_SetConfig+0x758>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d02c      	beq.n	8004d44 <UART_SetConfig+0x754>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d026      	beq.n	8004d40 <UART_SetConfig+0x750>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d020      	beq.n	8004d3c <UART_SetConfig+0x74c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b07      	cmp	r3, #7
 8004d00:	d01a      	beq.n	8004d38 <UART_SetConfig+0x748>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d014      	beq.n	8004d34 <UART_SetConfig+0x744>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b09      	cmp	r3, #9
 8004d10:	d00e      	beq.n	8004d30 <UART_SetConfig+0x740>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b0a      	cmp	r3, #10
 8004d18:	d008      	beq.n	8004d2c <UART_SetConfig+0x73c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b0b      	cmp	r3, #11
 8004d20:	d102      	bne.n	8004d28 <UART_SetConfig+0x738>
 8004d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d26:	e016      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e014      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d2c:	2380      	movs	r3, #128	; 0x80
 8004d2e:	e012      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d30:	2340      	movs	r3, #64	; 0x40
 8004d32:	e010      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d34:	2320      	movs	r3, #32
 8004d36:	e00e      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	e00c      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	e00a      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d40:	230a      	movs	r3, #10
 8004d42:	e008      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d44:	2308      	movs	r3, #8
 8004d46:	e006      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d48:	2306      	movs	r3, #6
 8004d4a:	e004      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	e002      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e000      	b.n	8004d56 <UART_SetConfig+0x766>
 8004d54:	2301      	movs	r3, #1
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d5c:	e1c5      	b.n	80050ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5e:	f107 030c 	add.w	r3, r7, #12
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fc62 	bl	800362c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d044      	beq.n	8004dfc <UART_SetConfig+0x80c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d03e      	beq.n	8004df8 <UART_SetConfig+0x808>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d038      	beq.n	8004df4 <UART_SetConfig+0x804>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d032      	beq.n	8004df0 <UART_SetConfig+0x800>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d02c      	beq.n	8004dec <UART_SetConfig+0x7fc>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b05      	cmp	r3, #5
 8004d98:	d026      	beq.n	8004de8 <UART_SetConfig+0x7f8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d020      	beq.n	8004de4 <UART_SetConfig+0x7f4>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b07      	cmp	r3, #7
 8004da8:	d01a      	beq.n	8004de0 <UART_SetConfig+0x7f0>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d014      	beq.n	8004ddc <UART_SetConfig+0x7ec>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b09      	cmp	r3, #9
 8004db8:	d00e      	beq.n	8004dd8 <UART_SetConfig+0x7e8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b0a      	cmp	r3, #10
 8004dc0:	d008      	beq.n	8004dd4 <UART_SetConfig+0x7e4>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b0b      	cmp	r3, #11
 8004dc8:	d102      	bne.n	8004dd0 <UART_SetConfig+0x7e0>
 8004dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dce:	e016      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e014      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	e012      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004ddc:	2320      	movs	r3, #32
 8004dde:	e00e      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004de0:	2310      	movs	r3, #16
 8004de2:	e00c      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004de4:	230c      	movs	r3, #12
 8004de6:	e00a      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004de8:	230a      	movs	r3, #10
 8004dea:	e008      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004dec:	2308      	movs	r3, #8
 8004dee:	e006      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004df0:	2306      	movs	r3, #6
 8004df2:	e004      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004df4:	2304      	movs	r3, #4
 8004df6:	e002      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e000      	b.n	8004dfe <UART_SetConfig+0x80e>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e04:	e171      	b.n	80050ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e06:	4b7a      	ldr	r3, [pc, #488]	; (8004ff0 <UART_SetConfig+0xa00>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d054      	beq.n	8004ebc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e12:	4b77      	ldr	r3, [pc, #476]	; (8004ff0 <UART_SetConfig+0xa00>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	4a75      	ldr	r2, [pc, #468]	; (8004ff4 <UART_SetConfig+0xa04>)
 8004e1e:	40da      	lsrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d044      	beq.n	8004eb2 <UART_SetConfig+0x8c2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d03e      	beq.n	8004eae <UART_SetConfig+0x8be>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d038      	beq.n	8004eaa <UART_SetConfig+0x8ba>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d032      	beq.n	8004ea6 <UART_SetConfig+0x8b6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d02c      	beq.n	8004ea2 <UART_SetConfig+0x8b2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d026      	beq.n	8004e9e <UART_SetConfig+0x8ae>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	d020      	beq.n	8004e9a <UART_SetConfig+0x8aa>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b07      	cmp	r3, #7
 8004e5e:	d01a      	beq.n	8004e96 <UART_SetConfig+0x8a6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d014      	beq.n	8004e92 <UART_SetConfig+0x8a2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d00e      	beq.n	8004e8e <UART_SetConfig+0x89e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b0a      	cmp	r3, #10
 8004e76:	d008      	beq.n	8004e8a <UART_SetConfig+0x89a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b0b      	cmp	r3, #11
 8004e7e:	d102      	bne.n	8004e86 <UART_SetConfig+0x896>
 8004e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e84:	e016      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e014      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	e012      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	e010      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e92:	2320      	movs	r3, #32
 8004e94:	e00e      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e96:	2310      	movs	r3, #16
 8004e98:	e00c      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	e00a      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	e008      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	e006      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	e004      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004eaa:	2304      	movs	r3, #4
 8004eac:	e002      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e000      	b.n	8004eb4 <UART_SetConfig+0x8c4>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004eba:	e116      	b.n	80050ea <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d043      	beq.n	8004f4c <UART_SetConfig+0x95c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d03d      	beq.n	8004f48 <UART_SetConfig+0x958>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d037      	beq.n	8004f44 <UART_SetConfig+0x954>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d031      	beq.n	8004f40 <UART_SetConfig+0x950>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d02b      	beq.n	8004f3c <UART_SetConfig+0x94c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d025      	beq.n	8004f38 <UART_SetConfig+0x948>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d01f      	beq.n	8004f34 <UART_SetConfig+0x944>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b07      	cmp	r3, #7
 8004efa:	d019      	beq.n	8004f30 <UART_SetConfig+0x940>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d013      	beq.n	8004f2c <UART_SetConfig+0x93c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d00d      	beq.n	8004f28 <UART_SetConfig+0x938>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b0a      	cmp	r3, #10
 8004f12:	d007      	beq.n	8004f24 <UART_SetConfig+0x934>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b0b      	cmp	r3, #11
 8004f1a:	d101      	bne.n	8004f20 <UART_SetConfig+0x930>
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <UART_SetConfig+0xa08>)
 8004f1e:	e016      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f20:	4b34      	ldr	r3, [pc, #208]	; (8004ff4 <UART_SetConfig+0xa04>)
 8004f22:	e014      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f24:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <UART_SetConfig+0xa0c>)
 8004f26:	e012      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <UART_SetConfig+0xa10>)
 8004f2a:	e010      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <UART_SetConfig+0xa14>)
 8004f2e:	e00e      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f30:	4b35      	ldr	r3, [pc, #212]	; (8005008 <UART_SetConfig+0xa18>)
 8004f32:	e00c      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f34:	4b35      	ldr	r3, [pc, #212]	; (800500c <UART_SetConfig+0xa1c>)
 8004f36:	e00a      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f38:	4b35      	ldr	r3, [pc, #212]	; (8005010 <UART_SetConfig+0xa20>)
 8004f3a:	e008      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <UART_SetConfig+0xa24>)
 8004f3e:	e006      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <UART_SetConfig+0xa28>)
 8004f42:	e004      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f44:	4b35      	ldr	r3, [pc, #212]	; (800501c <UART_SetConfig+0xa2c>)
 8004f46:	e002      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <UART_SetConfig+0xa30>)
 8004f4a:	e000      	b.n	8004f4e <UART_SetConfig+0x95e>
 8004f4c:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <UART_SetConfig+0xa04>)
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f50:	e0cb      	b.n	80050ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d046      	beq.n	8004fe8 <UART_SetConfig+0x9f8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d040      	beq.n	8004fe4 <UART_SetConfig+0x9f4>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d03a      	beq.n	8004fe0 <UART_SetConfig+0x9f0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d034      	beq.n	8004fdc <UART_SetConfig+0x9ec>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d02e      	beq.n	8004fd8 <UART_SetConfig+0x9e8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b05      	cmp	r3, #5
 8004f80:	d028      	beq.n	8004fd4 <UART_SetConfig+0x9e4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d022      	beq.n	8004fd0 <UART_SetConfig+0x9e0>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2b07      	cmp	r3, #7
 8004f90:	d01c      	beq.n	8004fcc <UART_SetConfig+0x9dc>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d016      	beq.n	8004fc8 <UART_SetConfig+0x9d8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2b09      	cmp	r3, #9
 8004fa0:	d00f      	beq.n	8004fc2 <UART_SetConfig+0x9d2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b0a      	cmp	r3, #10
 8004fa8:	d008      	beq.n	8004fbc <UART_SetConfig+0x9cc>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b0b      	cmp	r3, #11
 8004fb0:	d102      	bne.n	8004fb8 <UART_SetConfig+0x9c8>
 8004fb2:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004fb6:	e018      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fb8:	4b13      	ldr	r3, [pc, #76]	; (8005008 <UART_SetConfig+0xa18>)
 8004fba:	e016      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fbc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004fc0:	e013      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fc2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fc8:	4b16      	ldr	r3, [pc, #88]	; (8005024 <UART_SetConfig+0xa34>)
 8004fca:	e00e      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <UART_SetConfig+0xa08>)
 8004fce:	e00c      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fd0:	4b15      	ldr	r3, [pc, #84]	; (8005028 <UART_SetConfig+0xa38>)
 8004fd2:	e00a      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <UART_SetConfig+0xa3c>)
 8004fd6:	e008      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <UART_SetConfig+0xa0c>)
 8004fda:	e006      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fdc:	4b14      	ldr	r3, [pc, #80]	; (8005030 <UART_SetConfig+0xa40>)
 8004fde:	e004      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <UART_SetConfig+0xa10>)
 8004fe2:	e002      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <UART_SetConfig+0xa14>)
 8004fe6:	e000      	b.n	8004fea <UART_SetConfig+0x9fa>
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <UART_SetConfig+0xa18>)
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fec:	e07d      	b.n	80050ea <UART_SetConfig+0xafa>
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	0003d090 	.word	0x0003d090
 8004ffc:	0007a120 	.word	0x0007a120
 8005000:	000f4240 	.word	0x000f4240
 8005004:	001e8480 	.word	0x001e8480
 8005008:	003d0900 	.word	0x003d0900
 800500c:	00516155 	.word	0x00516155
 8005010:	0061a800 	.word	0x0061a800
 8005014:	007a1200 	.word	0x007a1200
 8005018:	00a2c2aa 	.word	0x00a2c2aa
 800501c:	00f42400 	.word	0x00f42400
 8005020:	01e84800 	.word	0x01e84800
 8005024:	0001e848 	.word	0x0001e848
 8005028:	00051615 	.word	0x00051615
 800502c:	00061a80 	.word	0x00061a80
 8005030:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d04e      	beq.n	80050da <UART_SetConfig+0xaea>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b01      	cmp	r3, #1
 8005042:	d047      	beq.n	80050d4 <UART_SetConfig+0xae4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b02      	cmp	r3, #2
 800504a:	d040      	beq.n	80050ce <UART_SetConfig+0xade>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b03      	cmp	r3, #3
 8005052:	d039      	beq.n	80050c8 <UART_SetConfig+0xad8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b04      	cmp	r3, #4
 800505a:	d032      	beq.n	80050c2 <UART_SetConfig+0xad2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b05      	cmp	r3, #5
 8005062:	d02b      	beq.n	80050bc <UART_SetConfig+0xacc>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b06      	cmp	r3, #6
 800506a:	d024      	beq.n	80050b6 <UART_SetConfig+0xac6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b07      	cmp	r3, #7
 8005072:	d01d      	beq.n	80050b0 <UART_SetConfig+0xac0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b08      	cmp	r3, #8
 800507a:	d016      	beq.n	80050aa <UART_SetConfig+0xaba>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2b09      	cmp	r3, #9
 8005082:	d00f      	beq.n	80050a4 <UART_SetConfig+0xab4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b0a      	cmp	r3, #10
 800508a:	d008      	beq.n	800509e <UART_SetConfig+0xaae>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b0b      	cmp	r3, #11
 8005092:	d101      	bne.n	8005098 <UART_SetConfig+0xaa8>
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	e022      	b.n	80050de <UART_SetConfig+0xaee>
 8005098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509c:	e01f      	b.n	80050de <UART_SetConfig+0xaee>
 800509e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a2:	e01c      	b.n	80050de <UART_SetConfig+0xaee>
 80050a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a8:	e019      	b.n	80050de <UART_SetConfig+0xaee>
 80050aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ae:	e016      	b.n	80050de <UART_SetConfig+0xaee>
 80050b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050b4:	e013      	b.n	80050de <UART_SetConfig+0xaee>
 80050b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80050ba:	e010      	b.n	80050de <UART_SetConfig+0xaee>
 80050bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80050c0:	e00d      	b.n	80050de <UART_SetConfig+0xaee>
 80050c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c6:	e00a      	b.n	80050de <UART_SetConfig+0xaee>
 80050c8:	f241 5355 	movw	r3, #5461	; 0x1555
 80050cc:	e007      	b.n	80050de <UART_SetConfig+0xaee>
 80050ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050d2:	e004      	b.n	80050de <UART_SetConfig+0xaee>
 80050d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050d8:	e001      	b.n	80050de <UART_SetConfig+0xaee>
 80050da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050e0:	e003      	b.n	80050ea <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80050e8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f001 83e8 	beq.w	80068c2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fe:	429a      	cmp	r2, r3
 8005100:	d305      	bcc.n	800510e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800510a:	429a      	cmp	r2, r3
 800510c:	d904      	bls.n	8005118 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005114:	f001 bbd5 	b.w	80068c2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8005118:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800511c:	2b08      	cmp	r3, #8
 800511e:	f000 8154 	beq.w	80053ca <UART_SetConfig+0xdda>
 8005122:	2b08      	cmp	r3, #8
 8005124:	dc06      	bgt.n	8005134 <UART_SetConfig+0xb44>
 8005126:	2b02      	cmp	r3, #2
 8005128:	d00f      	beq.n	800514a <UART_SetConfig+0xb5a>
 800512a:	2b04      	cmp	r3, #4
 800512c:	f000 80ac 	beq.w	8005288 <UART_SetConfig+0xc98>
 8005130:	f000 bc30 	b.w	8005994 <UART_SetConfig+0x13a4>
 8005134:	2b20      	cmp	r3, #32
 8005136:	f000 832d 	beq.w	8005794 <UART_SetConfig+0x11a4>
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	f000 83a5 	beq.w	800588a <UART_SetConfig+0x129a>
 8005140:	2b10      	cmp	r3, #16
 8005142:	f000 81e3 	beq.w	800550c <UART_SetConfig+0xf1c>
 8005146:	f000 bc25 	b.w	8005994 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800514a:	f7fe f90d 	bl	8003368 <HAL_RCCEx_GetD3PCLK1Freq>
 800514e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	4618      	mov	r0, r3
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d067      	beq.n	8005230 <UART_SetConfig+0xc40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b01      	cmp	r3, #1
 8005166:	d05e      	beq.n	8005226 <UART_SetConfig+0xc36>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b02      	cmp	r3, #2
 800516e:	d055      	beq.n	800521c <UART_SetConfig+0xc2c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2b03      	cmp	r3, #3
 8005176:	d04c      	beq.n	8005212 <UART_SetConfig+0xc22>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b04      	cmp	r3, #4
 800517e:	d043      	beq.n	8005208 <UART_SetConfig+0xc18>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b05      	cmp	r3, #5
 8005186:	d03a      	beq.n	80051fe <UART_SetConfig+0xc0e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b06      	cmp	r3, #6
 800518e:	d031      	beq.n	80051f4 <UART_SetConfig+0xc04>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2b07      	cmp	r3, #7
 8005196:	d028      	beq.n	80051ea <UART_SetConfig+0xbfa>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b08      	cmp	r3, #8
 800519e:	d01f      	beq.n	80051e0 <UART_SetConfig+0xbf0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b09      	cmp	r3, #9
 80051a6:	d016      	beq.n	80051d6 <UART_SetConfig+0xbe6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b0a      	cmp	r3, #10
 80051ae:	d00d      	beq.n	80051cc <UART_SetConfig+0xbdc>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	2b0b      	cmp	r3, #11
 80051b6:	d104      	bne.n	80051c2 <UART_SetConfig+0xbd2>
 80051b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	e03a      	b.n	8005238 <UART_SetConfig+0xc48>
 80051c2:	f04f 0301 	mov.w	r3, #1
 80051c6:	f04f 0400 	mov.w	r4, #0
 80051ca:	e035      	b.n	8005238 <UART_SetConfig+0xc48>
 80051cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e030      	b.n	8005238 <UART_SetConfig+0xc48>
 80051d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	e02b      	b.n	8005238 <UART_SetConfig+0xc48>
 80051e0:	f04f 0320 	mov.w	r3, #32
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	e026      	b.n	8005238 <UART_SetConfig+0xc48>
 80051ea:	f04f 0310 	mov.w	r3, #16
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	e021      	b.n	8005238 <UART_SetConfig+0xc48>
 80051f4:	f04f 030c 	mov.w	r3, #12
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	e01c      	b.n	8005238 <UART_SetConfig+0xc48>
 80051fe:	f04f 030a 	mov.w	r3, #10
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	e017      	b.n	8005238 <UART_SetConfig+0xc48>
 8005208:	f04f 0308 	mov.w	r3, #8
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	e012      	b.n	8005238 <UART_SetConfig+0xc48>
 8005212:	f04f 0306 	mov.w	r3, #6
 8005216:	f04f 0400 	mov.w	r4, #0
 800521a:	e00d      	b.n	8005238 <UART_SetConfig+0xc48>
 800521c:	f04f 0304 	mov.w	r3, #4
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	e008      	b.n	8005238 <UART_SetConfig+0xc48>
 8005226:	f04f 0302 	mov.w	r3, #2
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	e003      	b.n	8005238 <UART_SetConfig+0xc48>
 8005230:	f04f 0301 	mov.w	r3, #1
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	461a      	mov	r2, r3
 800523a:	4623      	mov	r3, r4
 800523c:	f7fb f850 	bl	80002e0 <__aeabi_uldivmod>
 8005240:	4603      	mov	r3, r0
 8005242:	460c      	mov	r4, r1
 8005244:	4619      	mov	r1, r3
 8005246:	4622      	mov	r2, r4
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	f04f 0400 	mov.w	r4, #0
 8005250:	0214      	lsls	r4, r2, #8
 8005252:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005256:	020b      	lsls	r3, r1, #8
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6852      	ldr	r2, [r2, #4]
 800525c:	0852      	lsrs	r2, r2, #1
 800525e:	4611      	mov	r1, r2
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	eb13 0b01 	adds.w	fp, r3, r1
 8005268:	eb44 0c02 	adc.w	ip, r4, r2
 800526c:	4658      	mov	r0, fp
 800526e:	4661      	mov	r1, ip
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f04f 0400 	mov.w	r4, #0
 8005278:	461a      	mov	r2, r3
 800527a:	4623      	mov	r3, r4
 800527c:	f7fb f830 	bl	80002e0 <__aeabi_uldivmod>
 8005280:	4603      	mov	r3, r0
 8005282:	460c      	mov	r4, r1
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005286:	e389      	b.n	800599c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005288:	f107 0318 	add.w	r3, r7, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe f881 	bl	8003394 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4618      	mov	r0, r3
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d067      	beq.n	8005372 <UART_SetConfig+0xd82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d05e      	beq.n	8005368 <UART_SetConfig+0xd78>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d055      	beq.n	800535e <UART_SetConfig+0xd6e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d04c      	beq.n	8005354 <UART_SetConfig+0xd64>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d043      	beq.n	800534a <UART_SetConfig+0xd5a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d03a      	beq.n	8005340 <UART_SetConfig+0xd50>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d031      	beq.n	8005336 <UART_SetConfig+0xd46>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b07      	cmp	r3, #7
 80052d8:	d028      	beq.n	800532c <UART_SetConfig+0xd3c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d01f      	beq.n	8005322 <UART_SetConfig+0xd32>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d016      	beq.n	8005318 <UART_SetConfig+0xd28>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2b0a      	cmp	r3, #10
 80052f0:	d00d      	beq.n	800530e <UART_SetConfig+0xd1e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b0b      	cmp	r3, #11
 80052f8:	d104      	bne.n	8005304 <UART_SetConfig+0xd14>
 80052fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	e03a      	b.n	800537a <UART_SetConfig+0xd8a>
 8005304:	f04f 0301 	mov.w	r3, #1
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	e035      	b.n	800537a <UART_SetConfig+0xd8a>
 800530e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005312:	f04f 0400 	mov.w	r4, #0
 8005316:	e030      	b.n	800537a <UART_SetConfig+0xd8a>
 8005318:	f04f 0340 	mov.w	r3, #64	; 0x40
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	e02b      	b.n	800537a <UART_SetConfig+0xd8a>
 8005322:	f04f 0320 	mov.w	r3, #32
 8005326:	f04f 0400 	mov.w	r4, #0
 800532a:	e026      	b.n	800537a <UART_SetConfig+0xd8a>
 800532c:	f04f 0310 	mov.w	r3, #16
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	e021      	b.n	800537a <UART_SetConfig+0xd8a>
 8005336:	f04f 030c 	mov.w	r3, #12
 800533a:	f04f 0400 	mov.w	r4, #0
 800533e:	e01c      	b.n	800537a <UART_SetConfig+0xd8a>
 8005340:	f04f 030a 	mov.w	r3, #10
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	e017      	b.n	800537a <UART_SetConfig+0xd8a>
 800534a:	f04f 0308 	mov.w	r3, #8
 800534e:	f04f 0400 	mov.w	r4, #0
 8005352:	e012      	b.n	800537a <UART_SetConfig+0xd8a>
 8005354:	f04f 0306 	mov.w	r3, #6
 8005358:	f04f 0400 	mov.w	r4, #0
 800535c:	e00d      	b.n	800537a <UART_SetConfig+0xd8a>
 800535e:	f04f 0304 	mov.w	r3, #4
 8005362:	f04f 0400 	mov.w	r4, #0
 8005366:	e008      	b.n	800537a <UART_SetConfig+0xd8a>
 8005368:	f04f 0302 	mov.w	r3, #2
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	e003      	b.n	800537a <UART_SetConfig+0xd8a>
 8005372:	f04f 0301 	mov.w	r3, #1
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	461a      	mov	r2, r3
 800537c:	4623      	mov	r3, r4
 800537e:	f7fa ffaf 	bl	80002e0 <__aeabi_uldivmod>
 8005382:	4603      	mov	r3, r0
 8005384:	460c      	mov	r4, r1
 8005386:	4619      	mov	r1, r3
 8005388:	4622      	mov	r2, r4
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	f04f 0400 	mov.w	r4, #0
 8005392:	0214      	lsls	r4, r2, #8
 8005394:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005398:	020b      	lsls	r3, r1, #8
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6852      	ldr	r2, [r2, #4]
 800539e:	0852      	lsrs	r2, r2, #1
 80053a0:	4611      	mov	r1, r2
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	eb13 0b01 	adds.w	fp, r3, r1
 80053aa:	eb44 0c02 	adc.w	ip, r4, r2
 80053ae:	4658      	mov	r0, fp
 80053b0:	4661      	mov	r1, ip
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f04f 0400 	mov.w	r4, #0
 80053ba:	461a      	mov	r2, r3
 80053bc:	4623      	mov	r3, r4
 80053be:	f7fa ff8f 	bl	80002e0 <__aeabi_uldivmod>
 80053c2:	4603      	mov	r3, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80053c8:	e2e8      	b.n	800599c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ca:	f107 030c 	add.w	r3, r7, #12
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe f92c 	bl	800362c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d067      	beq.n	80054b4 <UART_SetConfig+0xec4>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d05e      	beq.n	80054aa <UART_SetConfig+0xeba>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d055      	beq.n	80054a0 <UART_SetConfig+0xeb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d04c      	beq.n	8005496 <UART_SetConfig+0xea6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b04      	cmp	r3, #4
 8005402:	d043      	beq.n	800548c <UART_SetConfig+0xe9c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b05      	cmp	r3, #5
 800540a:	d03a      	beq.n	8005482 <UART_SetConfig+0xe92>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b06      	cmp	r3, #6
 8005412:	d031      	beq.n	8005478 <UART_SetConfig+0xe88>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b07      	cmp	r3, #7
 800541a:	d028      	beq.n	800546e <UART_SetConfig+0xe7e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b08      	cmp	r3, #8
 8005422:	d01f      	beq.n	8005464 <UART_SetConfig+0xe74>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b09      	cmp	r3, #9
 800542a:	d016      	beq.n	800545a <UART_SetConfig+0xe6a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b0a      	cmp	r3, #10
 8005432:	d00d      	beq.n	8005450 <UART_SetConfig+0xe60>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b0b      	cmp	r3, #11
 800543a:	d104      	bne.n	8005446 <UART_SetConfig+0xe56>
 800543c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	e03a      	b.n	80054bc <UART_SetConfig+0xecc>
 8005446:	f04f 0301 	mov.w	r3, #1
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	e035      	b.n	80054bc <UART_SetConfig+0xecc>
 8005450:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005454:	f04f 0400 	mov.w	r4, #0
 8005458:	e030      	b.n	80054bc <UART_SetConfig+0xecc>
 800545a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800545e:	f04f 0400 	mov.w	r4, #0
 8005462:	e02b      	b.n	80054bc <UART_SetConfig+0xecc>
 8005464:	f04f 0320 	mov.w	r3, #32
 8005468:	f04f 0400 	mov.w	r4, #0
 800546c:	e026      	b.n	80054bc <UART_SetConfig+0xecc>
 800546e:	f04f 0310 	mov.w	r3, #16
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	e021      	b.n	80054bc <UART_SetConfig+0xecc>
 8005478:	f04f 030c 	mov.w	r3, #12
 800547c:	f04f 0400 	mov.w	r4, #0
 8005480:	e01c      	b.n	80054bc <UART_SetConfig+0xecc>
 8005482:	f04f 030a 	mov.w	r3, #10
 8005486:	f04f 0400 	mov.w	r4, #0
 800548a:	e017      	b.n	80054bc <UART_SetConfig+0xecc>
 800548c:	f04f 0308 	mov.w	r3, #8
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	e012      	b.n	80054bc <UART_SetConfig+0xecc>
 8005496:	f04f 0306 	mov.w	r3, #6
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	e00d      	b.n	80054bc <UART_SetConfig+0xecc>
 80054a0:	f04f 0304 	mov.w	r3, #4
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	e008      	b.n	80054bc <UART_SetConfig+0xecc>
 80054aa:	f04f 0302 	mov.w	r3, #2
 80054ae:	f04f 0400 	mov.w	r4, #0
 80054b2:	e003      	b.n	80054bc <UART_SetConfig+0xecc>
 80054b4:	f04f 0301 	mov.w	r3, #1
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	461a      	mov	r2, r3
 80054be:	4623      	mov	r3, r4
 80054c0:	f7fa ff0e 	bl	80002e0 <__aeabi_uldivmod>
 80054c4:	4603      	mov	r3, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4619      	mov	r1, r3
 80054ca:	4622      	mov	r2, r4
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	0214      	lsls	r4, r2, #8
 80054d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80054da:	020b      	lsls	r3, r1, #8
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6852      	ldr	r2, [r2, #4]
 80054e0:	0852      	lsrs	r2, r2, #1
 80054e2:	4611      	mov	r1, r2
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	eb13 0b01 	adds.w	fp, r3, r1
 80054ec:	eb44 0c02 	adc.w	ip, r4, r2
 80054f0:	4658      	mov	r0, fp
 80054f2:	4661      	mov	r1, ip
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	461a      	mov	r2, r3
 80054fe:	4623      	mov	r3, r4
 8005500:	f7fa feee 	bl	80002e0 <__aeabi_uldivmod>
 8005504:	4603      	mov	r3, r0
 8005506:	460c      	mov	r4, r1
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800550a:	e247      	b.n	800599c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	4b96      	ldr	r3, [pc, #600]	; (8005768 <UART_SetConfig+0x1178>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a3 	beq.w	8005660 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551a:	4b93      	ldr	r3, [pc, #588]	; (8005768 <UART_SetConfig+0x1178>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	4a91      	ldr	r2, [pc, #580]	; (800576c <UART_SetConfig+0x117c>)
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	4618      	mov	r0, r3
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	d067      	beq.n	8005608 <UART_SetConfig+0x1018>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b01      	cmp	r3, #1
 800553e:	d05e      	beq.n	80055fe <UART_SetConfig+0x100e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	2b02      	cmp	r3, #2
 8005546:	d055      	beq.n	80055f4 <UART_SetConfig+0x1004>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b03      	cmp	r3, #3
 800554e:	d04c      	beq.n	80055ea <UART_SetConfig+0xffa>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2b04      	cmp	r3, #4
 8005556:	d043      	beq.n	80055e0 <UART_SetConfig+0xff0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	2b05      	cmp	r3, #5
 800555e:	d03a      	beq.n	80055d6 <UART_SetConfig+0xfe6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b06      	cmp	r3, #6
 8005566:	d031      	beq.n	80055cc <UART_SetConfig+0xfdc>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b07      	cmp	r3, #7
 800556e:	d028      	beq.n	80055c2 <UART_SetConfig+0xfd2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	2b08      	cmp	r3, #8
 8005576:	d01f      	beq.n	80055b8 <UART_SetConfig+0xfc8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	2b09      	cmp	r3, #9
 800557e:	d016      	beq.n	80055ae <UART_SetConfig+0xfbe>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b0a      	cmp	r3, #10
 8005586:	d00d      	beq.n	80055a4 <UART_SetConfig+0xfb4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b0b      	cmp	r3, #11
 800558e:	d104      	bne.n	800559a <UART_SetConfig+0xfaa>
 8005590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	e03a      	b.n	8005610 <UART_SetConfig+0x1020>
 800559a:	f04f 0301 	mov.w	r3, #1
 800559e:	f04f 0400 	mov.w	r4, #0
 80055a2:	e035      	b.n	8005610 <UART_SetConfig+0x1020>
 80055a4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80055a8:	f04f 0400 	mov.w	r4, #0
 80055ac:	e030      	b.n	8005610 <UART_SetConfig+0x1020>
 80055ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	e02b      	b.n	8005610 <UART_SetConfig+0x1020>
 80055b8:	f04f 0320 	mov.w	r3, #32
 80055bc:	f04f 0400 	mov.w	r4, #0
 80055c0:	e026      	b.n	8005610 <UART_SetConfig+0x1020>
 80055c2:	f04f 0310 	mov.w	r3, #16
 80055c6:	f04f 0400 	mov.w	r4, #0
 80055ca:	e021      	b.n	8005610 <UART_SetConfig+0x1020>
 80055cc:	f04f 030c 	mov.w	r3, #12
 80055d0:	f04f 0400 	mov.w	r4, #0
 80055d4:	e01c      	b.n	8005610 <UART_SetConfig+0x1020>
 80055d6:	f04f 030a 	mov.w	r3, #10
 80055da:	f04f 0400 	mov.w	r4, #0
 80055de:	e017      	b.n	8005610 <UART_SetConfig+0x1020>
 80055e0:	f04f 0308 	mov.w	r3, #8
 80055e4:	f04f 0400 	mov.w	r4, #0
 80055e8:	e012      	b.n	8005610 <UART_SetConfig+0x1020>
 80055ea:	f04f 0306 	mov.w	r3, #6
 80055ee:	f04f 0400 	mov.w	r4, #0
 80055f2:	e00d      	b.n	8005610 <UART_SetConfig+0x1020>
 80055f4:	f04f 0304 	mov.w	r3, #4
 80055f8:	f04f 0400 	mov.w	r4, #0
 80055fc:	e008      	b.n	8005610 <UART_SetConfig+0x1020>
 80055fe:	f04f 0302 	mov.w	r3, #2
 8005602:	f04f 0400 	mov.w	r4, #0
 8005606:	e003      	b.n	8005610 <UART_SetConfig+0x1020>
 8005608:	f04f 0301 	mov.w	r3, #1
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	461a      	mov	r2, r3
 8005612:	4623      	mov	r3, r4
 8005614:	f7fa fe64 	bl	80002e0 <__aeabi_uldivmod>
 8005618:	4603      	mov	r3, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4619      	mov	r1, r3
 800561e:	4622      	mov	r2, r4
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	0214      	lsls	r4, r2, #8
 800562a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800562e:	020b      	lsls	r3, r1, #8
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	0852      	lsrs	r2, r2, #1
 8005636:	4611      	mov	r1, r2
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	eb13 0b01 	adds.w	fp, r3, r1
 8005640:	eb44 0c02 	adc.w	ip, r4, r2
 8005644:	4658      	mov	r0, fp
 8005646:	4661      	mov	r1, ip
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	461a      	mov	r2, r3
 8005652:	4623      	mov	r3, r4
 8005654:	f7fa fe44 	bl	80002e0 <__aeabi_uldivmod>
 8005658:	4603      	mov	r3, r0
 800565a:	460c      	mov	r4, r1
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800565e:	e19d      	b.n	800599c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05b      	beq.n	8005720 <UART_SetConfig+0x1130>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b01      	cmp	r3, #1
 800566e:	d053      	beq.n	8005718 <UART_SetConfig+0x1128>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b02      	cmp	r3, #2
 8005676:	d04b      	beq.n	8005710 <UART_SetConfig+0x1120>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b03      	cmp	r3, #3
 800567e:	d043      	beq.n	8005708 <UART_SetConfig+0x1118>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b04      	cmp	r3, #4
 8005686:	d03b      	beq.n	8005700 <UART_SetConfig+0x1110>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b05      	cmp	r3, #5
 800568e:	d033      	beq.n	80056f8 <UART_SetConfig+0x1108>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b06      	cmp	r3, #6
 8005696:	d02b      	beq.n	80056f0 <UART_SetConfig+0x1100>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b07      	cmp	r3, #7
 800569e:	d023      	beq.n	80056e8 <UART_SetConfig+0x10f8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d01b      	beq.n	80056e0 <UART_SetConfig+0x10f0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b09      	cmp	r3, #9
 80056ae:	d013      	beq.n	80056d8 <UART_SetConfig+0x10e8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b0a      	cmp	r3, #10
 80056b6:	d00b      	beq.n	80056d0 <UART_SetConfig+0x10e0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b0b      	cmp	r3, #11
 80056be:	d103      	bne.n	80056c8 <UART_SetConfig+0x10d8>
 80056c0:	4b2a      	ldr	r3, [pc, #168]	; (800576c <UART_SetConfig+0x117c>)
 80056c2:	f04f 0400 	mov.w	r4, #0
 80056c6:	e02e      	b.n	8005726 <UART_SetConfig+0x1136>
 80056c8:	4b29      	ldr	r3, [pc, #164]	; (8005770 <UART_SetConfig+0x1180>)
 80056ca:	f04f 0403 	mov.w	r4, #3
 80056ce:	e02a      	b.n	8005726 <UART_SetConfig+0x1136>
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <UART_SetConfig+0x1184>)
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	e026      	b.n	8005726 <UART_SetConfig+0x1136>
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <UART_SetConfig+0x1188>)
 80056da:	f04f 0400 	mov.w	r4, #0
 80056de:	e022      	b.n	8005726 <UART_SetConfig+0x1136>
 80056e0:	4b26      	ldr	r3, [pc, #152]	; (800577c <UART_SetConfig+0x118c>)
 80056e2:	f04f 0400 	mov.w	r4, #0
 80056e6:	e01e      	b.n	8005726 <UART_SetConfig+0x1136>
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <UART_SetConfig+0x1190>)
 80056ea:	f04f 0400 	mov.w	r4, #0
 80056ee:	e01a      	b.n	8005726 <UART_SetConfig+0x1136>
 80056f0:	a419      	add	r4, pc, #100	; (adr r4, 8005758 <UART_SetConfig+0x1168>)
 80056f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80056f6:	e016      	b.n	8005726 <UART_SetConfig+0x1136>
 80056f8:	4b22      	ldr	r3, [pc, #136]	; (8005784 <UART_SetConfig+0x1194>)
 80056fa:	f04f 0400 	mov.w	r4, #0
 80056fe:	e012      	b.n	8005726 <UART_SetConfig+0x1136>
 8005700:	4b21      	ldr	r3, [pc, #132]	; (8005788 <UART_SetConfig+0x1198>)
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	e00e      	b.n	8005726 <UART_SetConfig+0x1136>
 8005708:	a415      	add	r4, pc, #84	; (adr r4, 8005760 <UART_SetConfig+0x1170>)
 800570a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800570e:	e00a      	b.n	8005726 <UART_SetConfig+0x1136>
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <UART_SetConfig+0x119c>)
 8005712:	f04f 0400 	mov.w	r4, #0
 8005716:	e006      	b.n	8005726 <UART_SetConfig+0x1136>
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <UART_SetConfig+0x11a0>)
 800571a:	f04f 0401 	mov.w	r4, #1
 800571e:	e002      	b.n	8005726 <UART_SetConfig+0x1136>
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <UART_SetConfig+0x1180>)
 8005722:	f04f 0403 	mov.w	r4, #3
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6852      	ldr	r2, [r2, #4]
 800572a:	0852      	lsrs	r2, r2, #1
 800572c:	4611      	mov	r1, r2
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	eb13 0b01 	adds.w	fp, r3, r1
 8005736:	eb44 0c02 	adc.w	ip, r4, r2
 800573a:	4658      	mov	r0, fp
 800573c:	4661      	mov	r1, ip
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f04f 0400 	mov.w	r4, #0
 8005746:	461a      	mov	r2, r3
 8005748:	4623      	mov	r3, r4
 800574a:	f7fa fdc9 	bl	80002e0 <__aeabi_uldivmod>
 800574e:	4603      	mov	r3, r0
 8005750:	460c      	mov	r4, r1
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005754:	e122      	b.n	800599c <UART_SetConfig+0x13ac>
 8005756:	bf00      	nop
 8005758:	51615500 	.word	0x51615500
 800575c:	00000000 	.word	0x00000000
 8005760:	a2c2aa00 	.word	0xa2c2aa00
 8005764:	00000000 	.word	0x00000000
 8005768:	58024400 	.word	0x58024400
 800576c:	03d09000 	.word	0x03d09000
 8005770:	d0900000 	.word	0xd0900000
 8005774:	07a12000 	.word	0x07a12000
 8005778:	0f424000 	.word	0x0f424000
 800577c:	1e848000 	.word	0x1e848000
 8005780:	3d090000 	.word	0x3d090000
 8005784:	61a80000 	.word	0x61a80000
 8005788:	7a120000 	.word	0x7a120000
 800578c:	f4240000 	.word	0xf4240000
 8005790:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05b      	beq.n	8005854 <UART_SetConfig+0x1264>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d053      	beq.n	800584c <UART_SetConfig+0x125c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d04b      	beq.n	8005844 <UART_SetConfig+0x1254>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d043      	beq.n	800583c <UART_SetConfig+0x124c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d03b      	beq.n	8005834 <UART_SetConfig+0x1244>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d033      	beq.n	800582c <UART_SetConfig+0x123c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d02b      	beq.n	8005824 <UART_SetConfig+0x1234>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b07      	cmp	r3, #7
 80057d2:	d023      	beq.n	800581c <UART_SetConfig+0x122c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d01b      	beq.n	8005814 <UART_SetConfig+0x1224>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	d013      	beq.n	800580c <UART_SetConfig+0x121c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b0a      	cmp	r3, #10
 80057ea:	d00b      	beq.n	8005804 <UART_SetConfig+0x1214>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b0b      	cmp	r3, #11
 80057f2:	d103      	bne.n	80057fc <UART_SetConfig+0x120c>
 80057f4:	4bc0      	ldr	r3, [pc, #768]	; (8005af8 <UART_SetConfig+0x1508>)
 80057f6:	f04f 0400 	mov.w	r4, #0
 80057fa:	e02e      	b.n	800585a <UART_SetConfig+0x126a>
 80057fc:	4bbf      	ldr	r3, [pc, #764]	; (8005afc <UART_SetConfig+0x150c>)
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	e02a      	b.n	800585a <UART_SetConfig+0x126a>
 8005804:	4bbe      	ldr	r3, [pc, #760]	; (8005b00 <UART_SetConfig+0x1510>)
 8005806:	f04f 0400 	mov.w	r4, #0
 800580a:	e026      	b.n	800585a <UART_SetConfig+0x126a>
 800580c:	4bbd      	ldr	r3, [pc, #756]	; (8005b04 <UART_SetConfig+0x1514>)
 800580e:	f04f 0400 	mov.w	r4, #0
 8005812:	e022      	b.n	800585a <UART_SetConfig+0x126a>
 8005814:	4bbc      	ldr	r3, [pc, #752]	; (8005b08 <UART_SetConfig+0x1518>)
 8005816:	f04f 0400 	mov.w	r4, #0
 800581a:	e01e      	b.n	800585a <UART_SetConfig+0x126a>
 800581c:	4bbb      	ldr	r3, [pc, #748]	; (8005b0c <UART_SetConfig+0x151c>)
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	e01a      	b.n	800585a <UART_SetConfig+0x126a>
 8005824:	a4b0      	add	r4, pc, #704	; (adr r4, 8005ae8 <UART_SetConfig+0x14f8>)
 8005826:	e9d4 3400 	ldrd	r3, r4, [r4]
 800582a:	e016      	b.n	800585a <UART_SetConfig+0x126a>
 800582c:	4bb8      	ldr	r3, [pc, #736]	; (8005b10 <UART_SetConfig+0x1520>)
 800582e:	f04f 0400 	mov.w	r4, #0
 8005832:	e012      	b.n	800585a <UART_SetConfig+0x126a>
 8005834:	4bb7      	ldr	r3, [pc, #732]	; (8005b14 <UART_SetConfig+0x1524>)
 8005836:	f04f 0400 	mov.w	r4, #0
 800583a:	e00e      	b.n	800585a <UART_SetConfig+0x126a>
 800583c:	a4ac      	add	r4, pc, #688	; (adr r4, 8005af0 <UART_SetConfig+0x1500>)
 800583e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005842:	e00a      	b.n	800585a <UART_SetConfig+0x126a>
 8005844:	4bb4      	ldr	r3, [pc, #720]	; (8005b18 <UART_SetConfig+0x1528>)
 8005846:	f04f 0400 	mov.w	r4, #0
 800584a:	e006      	b.n	800585a <UART_SetConfig+0x126a>
 800584c:	4bb3      	ldr	r3, [pc, #716]	; (8005b1c <UART_SetConfig+0x152c>)
 800584e:	f04f 0400 	mov.w	r4, #0
 8005852:	e002      	b.n	800585a <UART_SetConfig+0x126a>
 8005854:	4ba9      	ldr	r3, [pc, #676]	; (8005afc <UART_SetConfig+0x150c>)
 8005856:	f04f 0400 	mov.w	r4, #0
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6852      	ldr	r2, [r2, #4]
 800585e:	0852      	lsrs	r2, r2, #1
 8005860:	4611      	mov	r1, r2
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	eb13 0b01 	adds.w	fp, r3, r1
 800586a:	eb44 0c02 	adc.w	ip, r4, r2
 800586e:	4658      	mov	r0, fp
 8005870:	4661      	mov	r1, ip
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f04f 0400 	mov.w	r4, #0
 800587a:	461a      	mov	r2, r3
 800587c:	4623      	mov	r3, r4
 800587e:	f7fa fd2f 	bl	80002e0 <__aeabi_uldivmod>
 8005882:	4603      	mov	r3, r0
 8005884:	460c      	mov	r4, r1
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005888:	e088      	b.n	800599c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d064      	beq.n	800595c <UART_SetConfig+0x136c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b01      	cmp	r3, #1
 8005898:	d05b      	beq.n	8005952 <UART_SetConfig+0x1362>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d052      	beq.n	8005948 <UART_SetConfig+0x1358>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d04a      	beq.n	8005940 <UART_SetConfig+0x1350>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d041      	beq.n	8005936 <UART_SetConfig+0x1346>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d039      	beq.n	800592e <UART_SetConfig+0x133e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b06      	cmp	r3, #6
 80058c0:	d031      	beq.n	8005926 <UART_SetConfig+0x1336>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	d028      	beq.n	800591c <UART_SetConfig+0x132c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d01f      	beq.n	8005912 <UART_SetConfig+0x1322>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b09      	cmp	r3, #9
 80058d8:	d016      	beq.n	8005908 <UART_SetConfig+0x1318>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b0a      	cmp	r3, #10
 80058e0:	d00d      	beq.n	80058fe <UART_SetConfig+0x130e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b0b      	cmp	r3, #11
 80058e8:	d104      	bne.n	80058f4 <UART_SetConfig+0x1304>
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ee:	f04f 0400 	mov.w	r4, #0
 80058f2:	e037      	b.n	8005964 <UART_SetConfig+0x1374>
 80058f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80058f8:	f04f 0400 	mov.w	r4, #0
 80058fc:	e032      	b.n	8005964 <UART_SetConfig+0x1374>
 80058fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005902:	f04f 0400 	mov.w	r4, #0
 8005906:	e02d      	b.n	8005964 <UART_SetConfig+0x1374>
 8005908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800590c:	f04f 0400 	mov.w	r4, #0
 8005910:	e028      	b.n	8005964 <UART_SetConfig+0x1374>
 8005912:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005916:	f04f 0400 	mov.w	r4, #0
 800591a:	e023      	b.n	8005964 <UART_SetConfig+0x1374>
 800591c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	e01e      	b.n	8005964 <UART_SetConfig+0x1374>
 8005926:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <UART_SetConfig+0x1530>)
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	e01a      	b.n	8005964 <UART_SetConfig+0x1374>
 800592e:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <UART_SetConfig+0x1534>)
 8005930:	f04f 0400 	mov.w	r4, #0
 8005934:	e016      	b.n	8005964 <UART_SetConfig+0x1374>
 8005936:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800593a:	f04f 0400 	mov.w	r4, #0
 800593e:	e011      	b.n	8005964 <UART_SetConfig+0x1374>
 8005940:	4b79      	ldr	r3, [pc, #484]	; (8005b28 <UART_SetConfig+0x1538>)
 8005942:	f04f 0400 	mov.w	r4, #0
 8005946:	e00d      	b.n	8005964 <UART_SetConfig+0x1374>
 8005948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800594c:	f04f 0400 	mov.w	r4, #0
 8005950:	e008      	b.n	8005964 <UART_SetConfig+0x1374>
 8005952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	e003      	b.n	8005964 <UART_SetConfig+0x1374>
 800595c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6852      	ldr	r2, [r2, #4]
 8005968:	0852      	lsrs	r2, r2, #1
 800596a:	4611      	mov	r1, r2
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	eb13 0b01 	adds.w	fp, r3, r1
 8005974:	eb44 0c02 	adc.w	ip, r4, r2
 8005978:	4658      	mov	r0, fp
 800597a:	4661      	mov	r1, ip
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f04f 0400 	mov.w	r4, #0
 8005984:	461a      	mov	r2, r3
 8005986:	4623      	mov	r3, r4
 8005988:	f7fa fcaa 	bl	80002e0 <__aeabi_uldivmod>
 800598c:	4603      	mov	r3, r0
 800598e:	460c      	mov	r4, r1
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005992:	e003      	b.n	800599c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800599a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a2:	d309      	bcc.n	80059b8 <UART_SetConfig+0x13c8>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059aa:	d205      	bcs.n	80059b8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	f000 bf85 	b.w	80068c2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059be:	f000 bf80 	b.w	80068c2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ca:	f040 83da 	bne.w	8006182 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80059ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	f200 83b3 	bhi.w	800613e <UART_SetConfig+0x1b4e>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x13f0>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005b2d 	.word	0x08005b2d
 80059e4:	08005be5 	.word	0x08005be5
 80059e8:	0800613f 	.word	0x0800613f
 80059ec:	0800613f 	.word	0x0800613f
 80059f0:	08005c9d 	.word	0x08005c9d
 80059f4:	0800613f 	.word	0x0800613f
 80059f8:	0800613f 	.word	0x0800613f
 80059fc:	0800613f 	.word	0x0800613f
 8005a00:	08005d59 	.word	0x08005d59
 8005a04:	0800613f 	.word	0x0800613f
 8005a08:	0800613f 	.word	0x0800613f
 8005a0c:	0800613f 	.word	0x0800613f
 8005a10:	0800613f 	.word	0x0800613f
 8005a14:	0800613f 	.word	0x0800613f
 8005a18:	0800613f 	.word	0x0800613f
 8005a1c:	0800613f 	.word	0x0800613f
 8005a20:	08005e15 	.word	0x08005e15
 8005a24:	0800613f 	.word	0x0800613f
 8005a28:	0800613f 	.word	0x0800613f
 8005a2c:	0800613f 	.word	0x0800613f
 8005a30:	0800613f 	.word	0x0800613f
 8005a34:	0800613f 	.word	0x0800613f
 8005a38:	0800613f 	.word	0x0800613f
 8005a3c:	0800613f 	.word	0x0800613f
 8005a40:	0800613f 	.word	0x0800613f
 8005a44:	0800613f 	.word	0x0800613f
 8005a48:	0800613f 	.word	0x0800613f
 8005a4c:	0800613f 	.word	0x0800613f
 8005a50:	0800613f 	.word	0x0800613f
 8005a54:	0800613f 	.word	0x0800613f
 8005a58:	0800613f 	.word	0x0800613f
 8005a5c:	0800613f 	.word	0x0800613f
 8005a60:	08005f87 	.word	0x08005f87
 8005a64:	0800613f 	.word	0x0800613f
 8005a68:	0800613f 	.word	0x0800613f
 8005a6c:	0800613f 	.word	0x0800613f
 8005a70:	0800613f 	.word	0x0800613f
 8005a74:	0800613f 	.word	0x0800613f
 8005a78:	0800613f 	.word	0x0800613f
 8005a7c:	0800613f 	.word	0x0800613f
 8005a80:	0800613f 	.word	0x0800613f
 8005a84:	0800613f 	.word	0x0800613f
 8005a88:	0800613f 	.word	0x0800613f
 8005a8c:	0800613f 	.word	0x0800613f
 8005a90:	0800613f 	.word	0x0800613f
 8005a94:	0800613f 	.word	0x0800613f
 8005a98:	0800613f 	.word	0x0800613f
 8005a9c:	0800613f 	.word	0x0800613f
 8005aa0:	0800613f 	.word	0x0800613f
 8005aa4:	0800613f 	.word	0x0800613f
 8005aa8:	0800613f 	.word	0x0800613f
 8005aac:	0800613f 	.word	0x0800613f
 8005ab0:	0800613f 	.word	0x0800613f
 8005ab4:	0800613f 	.word	0x0800613f
 8005ab8:	0800613f 	.word	0x0800613f
 8005abc:	0800613f 	.word	0x0800613f
 8005ac0:	0800613f 	.word	0x0800613f
 8005ac4:	0800613f 	.word	0x0800613f
 8005ac8:	0800613f 	.word	0x0800613f
 8005acc:	0800613f 	.word	0x0800613f
 8005ad0:	0800613f 	.word	0x0800613f
 8005ad4:	0800613f 	.word	0x0800613f
 8005ad8:	0800613f 	.word	0x0800613f
 8005adc:	0800613f 	.word	0x0800613f
 8005ae0:	0800607d 	.word	0x0800607d
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	05161500 	.word	0x05161500
 8005aec:	00000000 	.word	0x00000000
 8005af0:	0a2c2a00 	.word	0x0a2c2a00
 8005af4:	00000000 	.word	0x00000000
 8005af8:	003d0900 	.word	0x003d0900
 8005afc:	3d090000 	.word	0x3d090000
 8005b00:	007a1200 	.word	0x007a1200
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	01e84800 	.word	0x01e84800
 8005b0c:	03d09000 	.word	0x03d09000
 8005b10:	061a8000 	.word	0x061a8000
 8005b14:	07a12000 	.word	0x07a12000
 8005b18:	0f424000 	.word	0x0f424000
 8005b1c:	1e848000 	.word	0x1e848000
 8005b20:	000aaa00 	.word	0x000aaa00
 8005b24:	000ccc00 	.word	0x000ccc00
 8005b28:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fc fd12 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8005b30:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d044      	beq.n	8005bc4 <UART_SetConfig+0x15d4>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d03e      	beq.n	8005bc0 <UART_SetConfig+0x15d0>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d038      	beq.n	8005bbc <UART_SetConfig+0x15cc>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d032      	beq.n	8005bb8 <UART_SetConfig+0x15c8>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d02c      	beq.n	8005bb4 <UART_SetConfig+0x15c4>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d026      	beq.n	8005bb0 <UART_SetConfig+0x15c0>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d020      	beq.n	8005bac <UART_SetConfig+0x15bc>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b07      	cmp	r3, #7
 8005b70:	d01a      	beq.n	8005ba8 <UART_SetConfig+0x15b8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d014      	beq.n	8005ba4 <UART_SetConfig+0x15b4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b09      	cmp	r3, #9
 8005b80:	d00e      	beq.n	8005ba0 <UART_SetConfig+0x15b0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b0a      	cmp	r3, #10
 8005b88:	d008      	beq.n	8005b9c <UART_SetConfig+0x15ac>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b0b      	cmp	r3, #11
 8005b90:	d102      	bne.n	8005b98 <UART_SetConfig+0x15a8>
 8005b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b96:	e016      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e014      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	e012      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	e010      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	e00e      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	e00c      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bac:	230c      	movs	r3, #12
 8005bae:	e00a      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bb0:	230a      	movs	r3, #10
 8005bb2:	e008      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	e006      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bb8:	2306      	movs	r3, #6
 8005bba:	e004      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	e002      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e000      	b.n	8005bc6 <UART_SetConfig+0x15d6>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be2:	e2b0      	b.n	8006146 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fc fccc 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8005be8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d044      	beq.n	8005c7c <UART_SetConfig+0x168c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d03e      	beq.n	8005c78 <UART_SetConfig+0x1688>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d038      	beq.n	8005c74 <UART_SetConfig+0x1684>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d032      	beq.n	8005c70 <UART_SetConfig+0x1680>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d02c      	beq.n	8005c6c <UART_SetConfig+0x167c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d026      	beq.n	8005c68 <UART_SetConfig+0x1678>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	2b06      	cmp	r3, #6
 8005c20:	d020      	beq.n	8005c64 <UART_SetConfig+0x1674>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2b07      	cmp	r3, #7
 8005c28:	d01a      	beq.n	8005c60 <UART_SetConfig+0x1670>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d014      	beq.n	8005c5c <UART_SetConfig+0x166c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	2b09      	cmp	r3, #9
 8005c38:	d00e      	beq.n	8005c58 <UART_SetConfig+0x1668>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	2b0a      	cmp	r3, #10
 8005c40:	d008      	beq.n	8005c54 <UART_SetConfig+0x1664>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b0b      	cmp	r3, #11
 8005c48:	d102      	bne.n	8005c50 <UART_SetConfig+0x1660>
 8005c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c4e:	e016      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e014      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	e012      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	e010      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	e00e      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c60:	2310      	movs	r3, #16
 8005c62:	e00c      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c64:	230c      	movs	r3, #12
 8005c66:	e00a      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c68:	230a      	movs	r3, #10
 8005c6a:	e008      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	e006      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c70:	2306      	movs	r3, #6
 8005c72:	e004      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c74:	2304      	movs	r3, #4
 8005c76:	e002      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e000      	b.n	8005c7e <UART_SetConfig+0x168e>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	005a      	lsls	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c9a:	e254      	b.n	8006146 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9c:	f107 0318 	add.w	r3, r7, #24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fd fb77 	bl	8003394 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d044      	beq.n	8005d3a <UART_SetConfig+0x174a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d03e      	beq.n	8005d36 <UART_SetConfig+0x1746>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d038      	beq.n	8005d32 <UART_SetConfig+0x1742>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d032      	beq.n	8005d2e <UART_SetConfig+0x173e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d02c      	beq.n	8005d2a <UART_SetConfig+0x173a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	2b05      	cmp	r3, #5
 8005cd6:	d026      	beq.n	8005d26 <UART_SetConfig+0x1736>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b06      	cmp	r3, #6
 8005cde:	d020      	beq.n	8005d22 <UART_SetConfig+0x1732>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b07      	cmp	r3, #7
 8005ce6:	d01a      	beq.n	8005d1e <UART_SetConfig+0x172e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d014      	beq.n	8005d1a <UART_SetConfig+0x172a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b09      	cmp	r3, #9
 8005cf6:	d00e      	beq.n	8005d16 <UART_SetConfig+0x1726>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b0a      	cmp	r3, #10
 8005cfe:	d008      	beq.n	8005d12 <UART_SetConfig+0x1722>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b0b      	cmp	r3, #11
 8005d06:	d102      	bne.n	8005d0e <UART_SetConfig+0x171e>
 8005d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d0c:	e016      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e014      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d12:	2380      	movs	r3, #128	; 0x80
 8005d14:	e012      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	e010      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	e00e      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d1e:	2310      	movs	r3, #16
 8005d20:	e00c      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d22:	230c      	movs	r3, #12
 8005d24:	e00a      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d26:	230a      	movs	r3, #10
 8005d28:	e008      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	e006      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d2e:	2306      	movs	r3, #6
 8005d30:	e004      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d32:	2304      	movs	r3, #4
 8005d34:	e002      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e000      	b.n	8005d3c <UART_SetConfig+0x174c>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	005a      	lsls	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	441a      	add	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d56:	e1f6      	b.n	8006146 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd fc65 	bl	800362c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d044      	beq.n	8005df6 <UART_SetConfig+0x1806>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d03e      	beq.n	8005df2 <UART_SetConfig+0x1802>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d038      	beq.n	8005dee <UART_SetConfig+0x17fe>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d032      	beq.n	8005dea <UART_SetConfig+0x17fa>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d02c      	beq.n	8005de6 <UART_SetConfig+0x17f6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b05      	cmp	r3, #5
 8005d92:	d026      	beq.n	8005de2 <UART_SetConfig+0x17f2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d020      	beq.n	8005dde <UART_SetConfig+0x17ee>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b07      	cmp	r3, #7
 8005da2:	d01a      	beq.n	8005dda <UART_SetConfig+0x17ea>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d014      	beq.n	8005dd6 <UART_SetConfig+0x17e6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	d00e      	beq.n	8005dd2 <UART_SetConfig+0x17e2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b0a      	cmp	r3, #10
 8005dba:	d008      	beq.n	8005dce <UART_SetConfig+0x17de>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b0b      	cmp	r3, #11
 8005dc2:	d102      	bne.n	8005dca <UART_SetConfig+0x17da>
 8005dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dc8:	e016      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e014      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	e012      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	e010      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	e00e      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dda:	2310      	movs	r3, #16
 8005ddc:	e00c      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dde:	230c      	movs	r3, #12
 8005de0:	e00a      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005de2:	230a      	movs	r3, #10
 8005de4:	e008      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005de6:	2308      	movs	r3, #8
 8005de8:	e006      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dea:	2306      	movs	r3, #6
 8005dec:	e004      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005dee:	2304      	movs	r3, #4
 8005df0:	e002      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e000      	b.n	8005df8 <UART_SetConfig+0x1808>
 8005df6:	2301      	movs	r3, #1
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	005a      	lsls	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e12:	e198      	b.n	8006146 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e14:	4b87      	ldr	r3, [pc, #540]	; (8006034 <UART_SetConfig+0x1a44>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05e      	beq.n	8005ede <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e20:	4b84      	ldr	r3, [pc, #528]	; (8006034 <UART_SetConfig+0x1a44>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	08db      	lsrs	r3, r3, #3
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	4a83      	ldr	r2, [pc, #524]	; (8006038 <UART_SetConfig+0x1a48>)
 8005e2c:	40da      	lsrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d044      	beq.n	8005ec0 <UART_SetConfig+0x18d0>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d03e      	beq.n	8005ebc <UART_SetConfig+0x18cc>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d038      	beq.n	8005eb8 <UART_SetConfig+0x18c8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d032      	beq.n	8005eb4 <UART_SetConfig+0x18c4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d02c      	beq.n	8005eb0 <UART_SetConfig+0x18c0>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d026      	beq.n	8005eac <UART_SetConfig+0x18bc>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d020      	beq.n	8005ea8 <UART_SetConfig+0x18b8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b07      	cmp	r3, #7
 8005e6c:	d01a      	beq.n	8005ea4 <UART_SetConfig+0x18b4>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d014      	beq.n	8005ea0 <UART_SetConfig+0x18b0>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d00e      	beq.n	8005e9c <UART_SetConfig+0x18ac>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b0a      	cmp	r3, #10
 8005e84:	d008      	beq.n	8005e98 <UART_SetConfig+0x18a8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b0b      	cmp	r3, #11
 8005e8c:	d102      	bne.n	8005e94 <UART_SetConfig+0x18a4>
 8005e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e92:	e016      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e014      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	e012      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	e010      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	e00e      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	e00c      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	e00a      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005eac:	230a      	movs	r3, #10
 8005eae:	e008      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	e006      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005eb4:	2306      	movs	r3, #6
 8005eb6:	e004      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	e002      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e000      	b.n	8005ec2 <UART_SetConfig+0x18d2>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec6:	005a      	lsls	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	441a      	add	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005edc:	e133      	b.n	8006146 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d043      	beq.n	8005f6e <UART_SetConfig+0x197e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d03d      	beq.n	8005f6a <UART_SetConfig+0x197a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d037      	beq.n	8005f66 <UART_SetConfig+0x1976>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d031      	beq.n	8005f62 <UART_SetConfig+0x1972>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d02b      	beq.n	8005f5e <UART_SetConfig+0x196e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d025      	beq.n	8005f5a <UART_SetConfig+0x196a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d01f      	beq.n	8005f56 <UART_SetConfig+0x1966>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b07      	cmp	r3, #7
 8005f1c:	d019      	beq.n	8005f52 <UART_SetConfig+0x1962>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d013      	beq.n	8005f4e <UART_SetConfig+0x195e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d00d      	beq.n	8005f4a <UART_SetConfig+0x195a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b0a      	cmp	r3, #10
 8005f34:	d007      	beq.n	8005f46 <UART_SetConfig+0x1956>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	2b0b      	cmp	r3, #11
 8005f3c:	d101      	bne.n	8005f42 <UART_SetConfig+0x1952>
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <UART_SetConfig+0x1a4c>)
 8005f40:	e016      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <UART_SetConfig+0x1a50>)
 8005f44:	e014      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f46:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <UART_SetConfig+0x1a54>)
 8005f48:	e012      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <UART_SetConfig+0x1a58>)
 8005f4c:	e010      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	; (800604c <UART_SetConfig+0x1a5c>)
 8005f50:	e00e      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f52:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <UART_SetConfig+0x1a60>)
 8005f54:	e00c      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f56:	4b3f      	ldr	r3, [pc, #252]	; (8006054 <UART_SetConfig+0x1a64>)
 8005f58:	e00a      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f5a:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <UART_SetConfig+0x1a68>)
 8005f5c:	e008      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	; (800605c <UART_SetConfig+0x1a6c>)
 8005f60:	e006      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f62:	4b3f      	ldr	r3, [pc, #252]	; (8006060 <UART_SetConfig+0x1a70>)
 8005f64:	e004      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f66:	4b3f      	ldr	r3, [pc, #252]	; (8006064 <UART_SetConfig+0x1a74>)
 8005f68:	e002      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f6a:	4b33      	ldr	r3, [pc, #204]	; (8006038 <UART_SetConfig+0x1a48>)
 8005f6c:	e000      	b.n	8005f70 <UART_SetConfig+0x1980>
 8005f6e:	4b34      	ldr	r3, [pc, #208]	; (8006040 <UART_SetConfig+0x1a50>)
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6852      	ldr	r2, [r2, #4]
 8005f74:	0852      	lsrs	r2, r2, #1
 8005f76:	441a      	add	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f84:	e0df      	b.n	8006146 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d045      	beq.n	800601a <UART_SetConfig+0x1a2a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d03f      	beq.n	8006016 <UART_SetConfig+0x1a26>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d039      	beq.n	8006012 <UART_SetConfig+0x1a22>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d033      	beq.n	800600e <UART_SetConfig+0x1a1e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d02d      	beq.n	800600a <UART_SetConfig+0x1a1a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d027      	beq.n	8006006 <UART_SetConfig+0x1a16>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b06      	cmp	r3, #6
 8005fbc:	d021      	beq.n	8006002 <UART_SetConfig+0x1a12>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b07      	cmp	r3, #7
 8005fc4:	d01b      	beq.n	8005ffe <UART_SetConfig+0x1a0e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d015      	beq.n	8005ffa <UART_SetConfig+0x1a0a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d00f      	beq.n	8005ff6 <UART_SetConfig+0x1a06>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b0a      	cmp	r3, #10
 8005fdc:	d008      	beq.n	8005ff0 <UART_SetConfig+0x1a00>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b0b      	cmp	r3, #11
 8005fe4:	d102      	bne.n	8005fec <UART_SetConfig+0x19fc>
 8005fe6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005fea:	e017      	b.n	800601c <UART_SetConfig+0x1a2c>
 8005fec:	4b18      	ldr	r3, [pc, #96]	; (8006050 <UART_SetConfig+0x1a60>)
 8005fee:	e015      	b.n	800601c <UART_SetConfig+0x1a2c>
 8005ff0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005ff4:	e012      	b.n	800601c <UART_SetConfig+0x1a2c>
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <UART_SetConfig+0x1a78>)
 8005ff8:	e010      	b.n	800601c <UART_SetConfig+0x1a2c>
 8005ffa:	4b1c      	ldr	r3, [pc, #112]	; (800606c <UART_SetConfig+0x1a7c>)
 8005ffc:	e00e      	b.n	800601c <UART_SetConfig+0x1a2c>
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <UART_SetConfig+0x1a4c>)
 8006000:	e00c      	b.n	800601c <UART_SetConfig+0x1a2c>
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <UART_SetConfig+0x1a80>)
 8006004:	e00a      	b.n	800601c <UART_SetConfig+0x1a2c>
 8006006:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <UART_SetConfig+0x1a84>)
 8006008:	e008      	b.n	800601c <UART_SetConfig+0x1a2c>
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <UART_SetConfig+0x1a54>)
 800600c:	e006      	b.n	800601c <UART_SetConfig+0x1a2c>
 800600e:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <UART_SetConfig+0x1a88>)
 8006010:	e004      	b.n	800601c <UART_SetConfig+0x1a2c>
 8006012:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <UART_SetConfig+0x1a58>)
 8006014:	e002      	b.n	800601c <UART_SetConfig+0x1a2c>
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <UART_SetConfig+0x1a5c>)
 8006018:	e000      	b.n	800601c <UART_SetConfig+0x1a2c>
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <UART_SetConfig+0x1a60>)
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6852      	ldr	r2, [r2, #4]
 8006020:	0852      	lsrs	r2, r2, #1
 8006022:	441a      	add	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	b29b      	uxth	r3, r3
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006030:	e089      	b.n	8006146 <UART_SetConfig+0x1b56>
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
 8006038:	03d09000 	.word	0x03d09000
 800603c:	0007a120 	.word	0x0007a120
 8006040:	07a12000 	.word	0x07a12000
 8006044:	000f4240 	.word	0x000f4240
 8006048:	001e8480 	.word	0x001e8480
 800604c:	003d0900 	.word	0x003d0900
 8006050:	007a1200 	.word	0x007a1200
 8006054:	00a2c2aa 	.word	0x00a2c2aa
 8006058:	00c35000 	.word	0x00c35000
 800605c:	00f42400 	.word	0x00f42400
 8006060:	01458554 	.word	0x01458554
 8006064:	01e84800 	.word	0x01e84800
 8006068:	0001e848 	.word	0x0001e848
 800606c:	0003d090 	.word	0x0003d090
 8006070:	000a2c2a 	.word	0x000a2c2a
 8006074:	000c3500 	.word	0x000c3500
 8006078:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b00      	cmp	r3, #0
 8006082:	d04f      	beq.n	8006124 <UART_SetConfig+0x1b34>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b01      	cmp	r3, #1
 800608a:	d048      	beq.n	800611e <UART_SetConfig+0x1b2e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b02      	cmp	r3, #2
 8006092:	d041      	beq.n	8006118 <UART_SetConfig+0x1b28>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b03      	cmp	r3, #3
 800609a:	d03a      	beq.n	8006112 <UART_SetConfig+0x1b22>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d033      	beq.n	800610c <UART_SetConfig+0x1b1c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b05      	cmp	r3, #5
 80060aa:	d02c      	beq.n	8006106 <UART_SetConfig+0x1b16>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d025      	beq.n	8006100 <UART_SetConfig+0x1b10>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b07      	cmp	r3, #7
 80060ba:	d01e      	beq.n	80060fa <UART_SetConfig+0x1b0a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d017      	beq.n	80060f4 <UART_SetConfig+0x1b04>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b09      	cmp	r3, #9
 80060ca:	d010      	beq.n	80060ee <UART_SetConfig+0x1afe>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b0a      	cmp	r3, #10
 80060d2:	d009      	beq.n	80060e8 <UART_SetConfig+0x1af8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b0b      	cmp	r3, #11
 80060da:	d102      	bne.n	80060e2 <UART_SetConfig+0x1af2>
 80060dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e0:	e022      	b.n	8006128 <UART_SetConfig+0x1b38>
 80060e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060e6:	e01f      	b.n	8006128 <UART_SetConfig+0x1b38>
 80060e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ec:	e01c      	b.n	8006128 <UART_SetConfig+0x1b38>
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	e019      	b.n	8006128 <UART_SetConfig+0x1b38>
 80060f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060f8:	e016      	b.n	8006128 <UART_SetConfig+0x1b38>
 80060fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060fe:	e013      	b.n	8006128 <UART_SetConfig+0x1b38>
 8006100:	f241 5354 	movw	r3, #5460	; 0x1554
 8006104:	e010      	b.n	8006128 <UART_SetConfig+0x1b38>
 8006106:	f641 1398 	movw	r3, #6552	; 0x1998
 800610a:	e00d      	b.n	8006128 <UART_SetConfig+0x1b38>
 800610c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006110:	e00a      	b.n	8006128 <UART_SetConfig+0x1b38>
 8006112:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006116:	e007      	b.n	8006128 <UART_SetConfig+0x1b38>
 8006118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800611c:	e004      	b.n	8006128 <UART_SetConfig+0x1b38>
 800611e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006122:	e001      	b.n	8006128 <UART_SetConfig+0x1b38>
 8006124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6852      	ldr	r2, [r2, #4]
 800612c:	0852      	lsrs	r2, r2, #1
 800612e:	441a      	add	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	b29b      	uxth	r3, r3
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800613c:	e003      	b.n	8006146 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006148:	2b0f      	cmp	r3, #15
 800614a:	d916      	bls.n	800617a <UART_SetConfig+0x1b8a>
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006152:	d212      	bcs.n	800617a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	b29b      	uxth	r3, r3
 8006158:	f023 030f 	bic.w	r3, r3, #15
 800615c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	b29b      	uxth	r3, r3
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	b29a      	uxth	r2, r3
 800616a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800616c:	4313      	orrs	r3, r2
 800616e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	e3a3      	b.n	80068c2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006180:	e39f      	b.n	80068c2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8006182:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	f200 8388 	bhi.w	800689c <UART_SetConfig+0x22ac>
 800618c:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x1ba4>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	08006299 	.word	0x08006299
 8006198:	0800634f 	.word	0x0800634f
 800619c:	0800689d 	.word	0x0800689d
 80061a0:	0800689d 	.word	0x0800689d
 80061a4:	08006405 	.word	0x08006405
 80061a8:	0800689d 	.word	0x0800689d
 80061ac:	0800689d 	.word	0x0800689d
 80061b0:	0800689d 	.word	0x0800689d
 80061b4:	080064bf 	.word	0x080064bf
 80061b8:	0800689d 	.word	0x0800689d
 80061bc:	0800689d 	.word	0x0800689d
 80061c0:	0800689d 	.word	0x0800689d
 80061c4:	0800689d 	.word	0x0800689d
 80061c8:	0800689d 	.word	0x0800689d
 80061cc:	0800689d 	.word	0x0800689d
 80061d0:	0800689d 	.word	0x0800689d
 80061d4:	08006579 	.word	0x08006579
 80061d8:	0800689d 	.word	0x0800689d
 80061dc:	0800689d 	.word	0x0800689d
 80061e0:	0800689d 	.word	0x0800689d
 80061e4:	0800689d 	.word	0x0800689d
 80061e8:	0800689d 	.word	0x0800689d
 80061ec:	0800689d 	.word	0x0800689d
 80061f0:	0800689d 	.word	0x0800689d
 80061f4:	0800689d 	.word	0x0800689d
 80061f8:	0800689d 	.word	0x0800689d
 80061fc:	0800689d 	.word	0x0800689d
 8006200:	0800689d 	.word	0x0800689d
 8006204:	0800689d 	.word	0x0800689d
 8006208:	0800689d 	.word	0x0800689d
 800620c:	0800689d 	.word	0x0800689d
 8006210:	0800689d 	.word	0x0800689d
 8006214:	080066e9 	.word	0x080066e9
 8006218:	0800689d 	.word	0x0800689d
 800621c:	0800689d 	.word	0x0800689d
 8006220:	0800689d 	.word	0x0800689d
 8006224:	0800689d 	.word	0x0800689d
 8006228:	0800689d 	.word	0x0800689d
 800622c:	0800689d 	.word	0x0800689d
 8006230:	0800689d 	.word	0x0800689d
 8006234:	0800689d 	.word	0x0800689d
 8006238:	0800689d 	.word	0x0800689d
 800623c:	0800689d 	.word	0x0800689d
 8006240:	0800689d 	.word	0x0800689d
 8006244:	0800689d 	.word	0x0800689d
 8006248:	0800689d 	.word	0x0800689d
 800624c:	0800689d 	.word	0x0800689d
 8006250:	0800689d 	.word	0x0800689d
 8006254:	0800689d 	.word	0x0800689d
 8006258:	0800689d 	.word	0x0800689d
 800625c:	0800689d 	.word	0x0800689d
 8006260:	0800689d 	.word	0x0800689d
 8006264:	0800689d 	.word	0x0800689d
 8006268:	0800689d 	.word	0x0800689d
 800626c:	0800689d 	.word	0x0800689d
 8006270:	0800689d 	.word	0x0800689d
 8006274:	0800689d 	.word	0x0800689d
 8006278:	0800689d 	.word	0x0800689d
 800627c:	0800689d 	.word	0x0800689d
 8006280:	0800689d 	.word	0x0800689d
 8006284:	0800689d 	.word	0x0800689d
 8006288:	0800689d 	.word	0x0800689d
 800628c:	0800689d 	.word	0x0800689d
 8006290:	0800689d 	.word	0x0800689d
 8006294:	080067dd 	.word	0x080067dd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fc f95c 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 800629c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d044      	beq.n	8006330 <UART_SetConfig+0x1d40>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d03e      	beq.n	800632c <UART_SetConfig+0x1d3c>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d038      	beq.n	8006328 <UART_SetConfig+0x1d38>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d032      	beq.n	8006324 <UART_SetConfig+0x1d34>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d02c      	beq.n	8006320 <UART_SetConfig+0x1d30>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d026      	beq.n	800631c <UART_SetConfig+0x1d2c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d020      	beq.n	8006318 <UART_SetConfig+0x1d28>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2b07      	cmp	r3, #7
 80062dc:	d01a      	beq.n	8006314 <UART_SetConfig+0x1d24>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d014      	beq.n	8006310 <UART_SetConfig+0x1d20>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2b09      	cmp	r3, #9
 80062ec:	d00e      	beq.n	800630c <UART_SetConfig+0x1d1c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2b0a      	cmp	r3, #10
 80062f4:	d008      	beq.n	8006308 <UART_SetConfig+0x1d18>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b0b      	cmp	r3, #11
 80062fc:	d102      	bne.n	8006304 <UART_SetConfig+0x1d14>
 80062fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006302:	e016      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006304:	2301      	movs	r3, #1
 8006306:	e014      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	e012      	b.n	8006332 <UART_SetConfig+0x1d42>
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	e010      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006310:	2320      	movs	r3, #32
 8006312:	e00e      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006314:	2310      	movs	r3, #16
 8006316:	e00c      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006318:	230c      	movs	r3, #12
 800631a:	e00a      	b.n	8006332 <UART_SetConfig+0x1d42>
 800631c:	230a      	movs	r3, #10
 800631e:	e008      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006320:	2308      	movs	r3, #8
 8006322:	e006      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006324:	2306      	movs	r3, #6
 8006326:	e004      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006328:	2304      	movs	r3, #4
 800632a:	e002      	b.n	8006332 <UART_SetConfig+0x1d42>
 800632c:	2302      	movs	r3, #2
 800632e:	e000      	b.n	8006332 <UART_SetConfig+0x1d42>
 8006330:	2301      	movs	r3, #1
 8006332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006334:	fbb2 f2f3 	udiv	r2, r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	441a      	add	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	b29b      	uxth	r3, r3
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800634c:	e2aa      	b.n	80068a4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800634e:	f7fc f917 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8006352:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d044      	beq.n	80063e6 <UART_SetConfig+0x1df6>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b01      	cmp	r3, #1
 8006362:	d03e      	beq.n	80063e2 <UART_SetConfig+0x1df2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b02      	cmp	r3, #2
 800636a:	d038      	beq.n	80063de <UART_SetConfig+0x1dee>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b03      	cmp	r3, #3
 8006372:	d032      	beq.n	80063da <UART_SetConfig+0x1dea>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b04      	cmp	r3, #4
 800637a:	d02c      	beq.n	80063d6 <UART_SetConfig+0x1de6>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b05      	cmp	r3, #5
 8006382:	d026      	beq.n	80063d2 <UART_SetConfig+0x1de2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b06      	cmp	r3, #6
 800638a:	d020      	beq.n	80063ce <UART_SetConfig+0x1dde>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b07      	cmp	r3, #7
 8006392:	d01a      	beq.n	80063ca <UART_SetConfig+0x1dda>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b08      	cmp	r3, #8
 800639a:	d014      	beq.n	80063c6 <UART_SetConfig+0x1dd6>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b09      	cmp	r3, #9
 80063a2:	d00e      	beq.n	80063c2 <UART_SetConfig+0x1dd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b0a      	cmp	r3, #10
 80063aa:	d008      	beq.n	80063be <UART_SetConfig+0x1dce>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b0b      	cmp	r3, #11
 80063b2:	d102      	bne.n	80063ba <UART_SetConfig+0x1dca>
 80063b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063b8:	e016      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e014      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	e012      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	e010      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063c6:	2320      	movs	r3, #32
 80063c8:	e00e      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063ca:	2310      	movs	r3, #16
 80063cc:	e00c      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063ce:	230c      	movs	r3, #12
 80063d0:	e00a      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063d2:	230a      	movs	r3, #10
 80063d4:	e008      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063d6:	2308      	movs	r3, #8
 80063d8:	e006      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063da:	2306      	movs	r3, #6
 80063dc:	e004      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063de:	2304      	movs	r3, #4
 80063e0:	e002      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e000      	b.n	80063e8 <UART_SetConfig+0x1df8>
 80063e6:	2301      	movs	r3, #1
 80063e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	b29b      	uxth	r3, r3
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006402:	e24f      	b.n	80068a4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006404:	f107 0318 	add.w	r3, r7, #24
 8006408:	4618      	mov	r0, r3
 800640a:	f7fc ffc3 	bl	8003394 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d044      	beq.n	80064a2 <UART_SetConfig+0x1eb2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2b01      	cmp	r3, #1
 800641e:	d03e      	beq.n	800649e <UART_SetConfig+0x1eae>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b02      	cmp	r3, #2
 8006426:	d038      	beq.n	800649a <UART_SetConfig+0x1eaa>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b03      	cmp	r3, #3
 800642e:	d032      	beq.n	8006496 <UART_SetConfig+0x1ea6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	2b04      	cmp	r3, #4
 8006436:	d02c      	beq.n	8006492 <UART_SetConfig+0x1ea2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b05      	cmp	r3, #5
 800643e:	d026      	beq.n	800648e <UART_SetConfig+0x1e9e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b06      	cmp	r3, #6
 8006446:	d020      	beq.n	800648a <UART_SetConfig+0x1e9a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	2b07      	cmp	r3, #7
 800644e:	d01a      	beq.n	8006486 <UART_SetConfig+0x1e96>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	2b08      	cmp	r3, #8
 8006456:	d014      	beq.n	8006482 <UART_SetConfig+0x1e92>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2b09      	cmp	r3, #9
 800645e:	d00e      	beq.n	800647e <UART_SetConfig+0x1e8e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b0a      	cmp	r3, #10
 8006466:	d008      	beq.n	800647a <UART_SetConfig+0x1e8a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b0b      	cmp	r3, #11
 800646e:	d102      	bne.n	8006476 <UART_SetConfig+0x1e86>
 8006470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006474:	e016      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 8006476:	2301      	movs	r3, #1
 8006478:	e014      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	e012      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	e010      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 8006482:	2320      	movs	r3, #32
 8006484:	e00e      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 8006486:	2310      	movs	r3, #16
 8006488:	e00c      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 800648a:	230c      	movs	r3, #12
 800648c:	e00a      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 800648e:	230a      	movs	r3, #10
 8006490:	e008      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 8006492:	2308      	movs	r3, #8
 8006494:	e006      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 8006496:	2306      	movs	r3, #6
 8006498:	e004      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 800649a:	2304      	movs	r3, #4
 800649c:	e002      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 800649e:	2302      	movs	r3, #2
 80064a0:	e000      	b.n	80064a4 <UART_SetConfig+0x1eb4>
 80064a2:	2301      	movs	r3, #1
 80064a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	441a      	add	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064bc:	e1f2      	b.n	80068a4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064be:	f107 030c 	add.w	r3, r7, #12
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fd f8b2 	bl	800362c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d044      	beq.n	800655c <UART_SetConfig+0x1f6c>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d03e      	beq.n	8006558 <UART_SetConfig+0x1f68>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d038      	beq.n	8006554 <UART_SetConfig+0x1f64>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d032      	beq.n	8006550 <UART_SetConfig+0x1f60>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d02c      	beq.n	800654c <UART_SetConfig+0x1f5c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d026      	beq.n	8006548 <UART_SetConfig+0x1f58>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	2b06      	cmp	r3, #6
 8006500:	d020      	beq.n	8006544 <UART_SetConfig+0x1f54>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2b07      	cmp	r3, #7
 8006508:	d01a      	beq.n	8006540 <UART_SetConfig+0x1f50>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2b08      	cmp	r3, #8
 8006510:	d014      	beq.n	800653c <UART_SetConfig+0x1f4c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b09      	cmp	r3, #9
 8006518:	d00e      	beq.n	8006538 <UART_SetConfig+0x1f48>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b0a      	cmp	r3, #10
 8006520:	d008      	beq.n	8006534 <UART_SetConfig+0x1f44>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b0b      	cmp	r3, #11
 8006528:	d102      	bne.n	8006530 <UART_SetConfig+0x1f40>
 800652a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800652e:	e016      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006530:	2301      	movs	r3, #1
 8006532:	e014      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	e012      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	e010      	b.n	800655e <UART_SetConfig+0x1f6e>
 800653c:	2320      	movs	r3, #32
 800653e:	e00e      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006540:	2310      	movs	r3, #16
 8006542:	e00c      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006544:	230c      	movs	r3, #12
 8006546:	e00a      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006548:	230a      	movs	r3, #10
 800654a:	e008      	b.n	800655e <UART_SetConfig+0x1f6e>
 800654c:	2308      	movs	r3, #8
 800654e:	e006      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006550:	2306      	movs	r3, #6
 8006552:	e004      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006554:	2304      	movs	r3, #4
 8006556:	e002      	b.n	800655e <UART_SetConfig+0x1f6e>
 8006558:	2302      	movs	r3, #2
 800655a:	e000      	b.n	800655e <UART_SetConfig+0x1f6e>
 800655c:	2301      	movs	r3, #1
 800655e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	b29b      	uxth	r3, r3
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006576:	e195      	b.n	80068a4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006578:	4b87      	ldr	r3, [pc, #540]	; (8006798 <UART_SetConfig+0x21a8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d05d      	beq.n	8006640 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006584:	4b84      	ldr	r3, [pc, #528]	; (8006798 <UART_SetConfig+0x21a8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a83      	ldr	r2, [pc, #524]	; (800679c <UART_SetConfig+0x21ac>)
 8006590:	40da      	lsrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d044      	beq.n	8006624 <UART_SetConfig+0x2034>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d03e      	beq.n	8006620 <UART_SetConfig+0x2030>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d038      	beq.n	800661c <UART_SetConfig+0x202c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d032      	beq.n	8006618 <UART_SetConfig+0x2028>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d02c      	beq.n	8006614 <UART_SetConfig+0x2024>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	2b05      	cmp	r3, #5
 80065c0:	d026      	beq.n	8006610 <UART_SetConfig+0x2020>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d020      	beq.n	800660c <UART_SetConfig+0x201c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2b07      	cmp	r3, #7
 80065d0:	d01a      	beq.n	8006608 <UART_SetConfig+0x2018>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d014      	beq.n	8006604 <UART_SetConfig+0x2014>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d00e      	beq.n	8006600 <UART_SetConfig+0x2010>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b0a      	cmp	r3, #10
 80065e8:	d008      	beq.n	80065fc <UART_SetConfig+0x200c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2b0b      	cmp	r3, #11
 80065f0:	d102      	bne.n	80065f8 <UART_SetConfig+0x2008>
 80065f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065f6:	e016      	b.n	8006626 <UART_SetConfig+0x2036>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e014      	b.n	8006626 <UART_SetConfig+0x2036>
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	e012      	b.n	8006626 <UART_SetConfig+0x2036>
 8006600:	2340      	movs	r3, #64	; 0x40
 8006602:	e010      	b.n	8006626 <UART_SetConfig+0x2036>
 8006604:	2320      	movs	r3, #32
 8006606:	e00e      	b.n	8006626 <UART_SetConfig+0x2036>
 8006608:	2310      	movs	r3, #16
 800660a:	e00c      	b.n	8006626 <UART_SetConfig+0x2036>
 800660c:	230c      	movs	r3, #12
 800660e:	e00a      	b.n	8006626 <UART_SetConfig+0x2036>
 8006610:	230a      	movs	r3, #10
 8006612:	e008      	b.n	8006626 <UART_SetConfig+0x2036>
 8006614:	2308      	movs	r3, #8
 8006616:	e006      	b.n	8006626 <UART_SetConfig+0x2036>
 8006618:	2306      	movs	r3, #6
 800661a:	e004      	b.n	8006626 <UART_SetConfig+0x2036>
 800661c:	2304      	movs	r3, #4
 800661e:	e002      	b.n	8006626 <UART_SetConfig+0x2036>
 8006620:	2302      	movs	r3, #2
 8006622:	e000      	b.n	8006626 <UART_SetConfig+0x2036>
 8006624:	2301      	movs	r3, #1
 8006626:	fbb2 f2f3 	udiv	r2, r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	fbb2 f3f3 	udiv	r3, r2, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800663e:	e131      	b.n	80068a4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d043      	beq.n	80066d0 <UART_SetConfig+0x20e0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b01      	cmp	r3, #1
 800664e:	d03d      	beq.n	80066cc <UART_SetConfig+0x20dc>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2b02      	cmp	r3, #2
 8006656:	d037      	beq.n	80066c8 <UART_SetConfig+0x20d8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b03      	cmp	r3, #3
 800665e:	d031      	beq.n	80066c4 <UART_SetConfig+0x20d4>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b04      	cmp	r3, #4
 8006666:	d02b      	beq.n	80066c0 <UART_SetConfig+0x20d0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b05      	cmp	r3, #5
 800666e:	d025      	beq.n	80066bc <UART_SetConfig+0x20cc>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	2b06      	cmp	r3, #6
 8006676:	d01f      	beq.n	80066b8 <UART_SetConfig+0x20c8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b07      	cmp	r3, #7
 800667e:	d019      	beq.n	80066b4 <UART_SetConfig+0x20c4>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	2b08      	cmp	r3, #8
 8006686:	d013      	beq.n	80066b0 <UART_SetConfig+0x20c0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	2b09      	cmp	r3, #9
 800668e:	d00d      	beq.n	80066ac <UART_SetConfig+0x20bc>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	2b0a      	cmp	r3, #10
 8006696:	d007      	beq.n	80066a8 <UART_SetConfig+0x20b8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2b0b      	cmp	r3, #11
 800669e:	d101      	bne.n	80066a4 <UART_SetConfig+0x20b4>
 80066a0:	4b3f      	ldr	r3, [pc, #252]	; (80067a0 <UART_SetConfig+0x21b0>)
 80066a2:	e016      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066a4:	4b3d      	ldr	r3, [pc, #244]	; (800679c <UART_SetConfig+0x21ac>)
 80066a6:	e014      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066a8:	4b3e      	ldr	r3, [pc, #248]	; (80067a4 <UART_SetConfig+0x21b4>)
 80066aa:	e012      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066ac:	4b3e      	ldr	r3, [pc, #248]	; (80067a8 <UART_SetConfig+0x21b8>)
 80066ae:	e010      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066b0:	4b3e      	ldr	r3, [pc, #248]	; (80067ac <UART_SetConfig+0x21bc>)
 80066b2:	e00e      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066b4:	4b3e      	ldr	r3, [pc, #248]	; (80067b0 <UART_SetConfig+0x21c0>)
 80066b6:	e00c      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066b8:	4b3e      	ldr	r3, [pc, #248]	; (80067b4 <UART_SetConfig+0x21c4>)
 80066ba:	e00a      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066bc:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <UART_SetConfig+0x21c8>)
 80066be:	e008      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066c0:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <UART_SetConfig+0x21cc>)
 80066c2:	e006      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066c4:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <UART_SetConfig+0x21d0>)
 80066c6:	e004      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066c8:	4b3e      	ldr	r3, [pc, #248]	; (80067c4 <UART_SetConfig+0x21d4>)
 80066ca:	e002      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066cc:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <UART_SetConfig+0x21d8>)
 80066ce:	e000      	b.n	80066d2 <UART_SetConfig+0x20e2>
 80066d0:	4b32      	ldr	r3, [pc, #200]	; (800679c <UART_SetConfig+0x21ac>)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6852      	ldr	r2, [r2, #4]
 80066d6:	0852      	lsrs	r2, r2, #1
 80066d8:	441a      	add	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e6:	e0dd      	b.n	80068a4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d046      	beq.n	800677e <UART_SetConfig+0x218e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d040      	beq.n	800677a <UART_SetConfig+0x218a>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d03a      	beq.n	8006776 <UART_SetConfig+0x2186>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	2b03      	cmp	r3, #3
 8006706:	d034      	beq.n	8006772 <UART_SetConfig+0x2182>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b04      	cmp	r3, #4
 800670e:	d02e      	beq.n	800676e <UART_SetConfig+0x217e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b05      	cmp	r3, #5
 8006716:	d028      	beq.n	800676a <UART_SetConfig+0x217a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	2b06      	cmp	r3, #6
 800671e:	d022      	beq.n	8006766 <UART_SetConfig+0x2176>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2b07      	cmp	r3, #7
 8006726:	d01c      	beq.n	8006762 <UART_SetConfig+0x2172>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	2b08      	cmp	r3, #8
 800672e:	d016      	beq.n	800675e <UART_SetConfig+0x216e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	2b09      	cmp	r3, #9
 8006736:	d00f      	beq.n	8006758 <UART_SetConfig+0x2168>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	2b0a      	cmp	r3, #10
 800673e:	d008      	beq.n	8006752 <UART_SetConfig+0x2162>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	2b0b      	cmp	r3, #11
 8006746:	d102      	bne.n	800674e <UART_SetConfig+0x215e>
 8006748:	f643 5309 	movw	r3, #15625	; 0x3d09
 800674c:	e018      	b.n	8006780 <UART_SetConfig+0x2190>
 800674e:	4b18      	ldr	r3, [pc, #96]	; (80067b0 <UART_SetConfig+0x21c0>)
 8006750:	e016      	b.n	8006780 <UART_SetConfig+0x2190>
 8006752:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006756:	e013      	b.n	8006780 <UART_SetConfig+0x2190>
 8006758:	f24f 4324 	movw	r3, #62500	; 0xf424
 800675c:	e010      	b.n	8006780 <UART_SetConfig+0x2190>
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <UART_SetConfig+0x21dc>)
 8006760:	e00e      	b.n	8006780 <UART_SetConfig+0x2190>
 8006762:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <UART_SetConfig+0x21b0>)
 8006764:	e00c      	b.n	8006780 <UART_SetConfig+0x2190>
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <UART_SetConfig+0x21e0>)
 8006768:	e00a      	b.n	8006780 <UART_SetConfig+0x2190>
 800676a:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <UART_SetConfig+0x21e4>)
 800676c:	e008      	b.n	8006780 <UART_SetConfig+0x2190>
 800676e:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <UART_SetConfig+0x21b4>)
 8006770:	e006      	b.n	8006780 <UART_SetConfig+0x2190>
 8006772:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <UART_SetConfig+0x21e8>)
 8006774:	e004      	b.n	8006780 <UART_SetConfig+0x2190>
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <UART_SetConfig+0x21b8>)
 8006778:	e002      	b.n	8006780 <UART_SetConfig+0x2190>
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <UART_SetConfig+0x21bc>)
 800677c:	e000      	b.n	8006780 <UART_SetConfig+0x2190>
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <UART_SetConfig+0x21c0>)
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	0852      	lsrs	r2, r2, #1
 8006786:	441a      	add	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	b29b      	uxth	r3, r3
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006794:	e086      	b.n	80068a4 <UART_SetConfig+0x22b4>
 8006796:	bf00      	nop
 8006798:	58024400 	.word	0x58024400
 800679c:	03d09000 	.word	0x03d09000
 80067a0:	0003d090 	.word	0x0003d090
 80067a4:	0007a120 	.word	0x0007a120
 80067a8:	000f4240 	.word	0x000f4240
 80067ac:	001e8480 	.word	0x001e8480
 80067b0:	003d0900 	.word	0x003d0900
 80067b4:	00516155 	.word	0x00516155
 80067b8:	0061a800 	.word	0x0061a800
 80067bc:	007a1200 	.word	0x007a1200
 80067c0:	00a2c2aa 	.word	0x00a2c2aa
 80067c4:	00f42400 	.word	0x00f42400
 80067c8:	01e84800 	.word	0x01e84800
 80067cc:	0001e848 	.word	0x0001e848
 80067d0:	00051615 	.word	0x00051615
 80067d4:	00061a80 	.word	0x00061a80
 80067d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d04e      	beq.n	8006882 <UART_SetConfig+0x2292>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d047      	beq.n	800687c <UART_SetConfig+0x228c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d040      	beq.n	8006876 <UART_SetConfig+0x2286>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d039      	beq.n	8006870 <UART_SetConfig+0x2280>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	2b04      	cmp	r3, #4
 8006802:	d032      	beq.n	800686a <UART_SetConfig+0x227a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2b05      	cmp	r3, #5
 800680a:	d02b      	beq.n	8006864 <UART_SetConfig+0x2274>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2b06      	cmp	r3, #6
 8006812:	d024      	beq.n	800685e <UART_SetConfig+0x226e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	2b07      	cmp	r3, #7
 800681a:	d01d      	beq.n	8006858 <UART_SetConfig+0x2268>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b08      	cmp	r3, #8
 8006822:	d016      	beq.n	8006852 <UART_SetConfig+0x2262>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b09      	cmp	r3, #9
 800682a:	d00f      	beq.n	800684c <UART_SetConfig+0x225c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b0a      	cmp	r3, #10
 8006832:	d008      	beq.n	8006846 <UART_SetConfig+0x2256>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	2b0b      	cmp	r3, #11
 800683a:	d101      	bne.n	8006840 <UART_SetConfig+0x2250>
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	e022      	b.n	8006886 <UART_SetConfig+0x2296>
 8006840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006844:	e01f      	b.n	8006886 <UART_SetConfig+0x2296>
 8006846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800684a:	e01c      	b.n	8006886 <UART_SetConfig+0x2296>
 800684c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006850:	e019      	b.n	8006886 <UART_SetConfig+0x2296>
 8006852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006856:	e016      	b.n	8006886 <UART_SetConfig+0x2296>
 8006858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800685c:	e013      	b.n	8006886 <UART_SetConfig+0x2296>
 800685e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006862:	e010      	b.n	8006886 <UART_SetConfig+0x2296>
 8006864:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006868:	e00d      	b.n	8006886 <UART_SetConfig+0x2296>
 800686a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686e:	e00a      	b.n	8006886 <UART_SetConfig+0x2296>
 8006870:	f241 5355 	movw	r3, #5461	; 0x1555
 8006874:	e007      	b.n	8006886 <UART_SetConfig+0x2296>
 8006876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800687a:	e004      	b.n	8006886 <UART_SetConfig+0x2296>
 800687c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006880:	e001      	b.n	8006886 <UART_SetConfig+0x2296>
 8006882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6852      	ldr	r2, [r2, #4]
 800688a:	0852      	lsrs	r2, r2, #1
 800688c:	441a      	add	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	fbb2 f3f3 	udiv	r3, r2, r3
 8006896:	b29b      	uxth	r3, r3
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800689a:	e003      	b.n	80068a4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80068a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d908      	bls.n	80068bc <UART_SetConfig+0x22cc>
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b0:	d204      	bcs.n	80068bc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b8:	60da      	str	r2, [r3, #12]
 80068ba:	e002      	b.n	80068c2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80068de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3740      	adds	r7, #64	; 0x40
 80068e6:	46bd      	mov	sp, r7
 80068e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080068ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01a      	beq.n	8006a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ea:	d10a      	bne.n	8006a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a40:	f7fa fb2c 	bl	800109c <HAL_GetTick>
 8006a44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d10e      	bne.n	8006a72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f82c 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e022      	b.n	8006ab8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d10e      	bne.n	8006a9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f816 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e00c      	b.n	8006ab8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad0:	e062      	b.n	8006b98 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d05e      	beq.n	8006b98 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fa fadf 	bl	800109c <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11d      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006afe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e045      	b.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d02e      	beq.n	8006b98 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b48:	d126      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b52:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e00f      	b.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d08d      	beq.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e027      	b.n	8006c26 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	; 0x24
 8006be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e02d      	b.n	8006ca6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2224      	movs	r2, #36	; 0x24
 8006c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f850 	bl	8006d2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e02d      	b.n	8006d22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2224      	movs	r2, #36	; 0x24
 8006cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f812 	bl	8006d2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b089      	sub	sp, #36	; 0x24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006d34:	4a2f      	ldr	r2, [pc, #188]	; (8006df4 <UARTEx_SetNbDataToProcess+0xc8>)
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d3e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006d42:	4a2d      	ldr	r2, [pc, #180]	; (8006df8 <UARTEx_SetNbDataToProcess+0xcc>)
 8006d44:	f107 030c 	add.w	r3, r7, #12
 8006d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d4c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d108      	bne.n	8006d6a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d68:	e03d      	b.n	8006de6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d6e:	2308      	movs	r3, #8
 8006d70:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	0e5b      	lsrs	r3, r3, #25
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	0f5b      	lsrs	r3, r3, #29
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006d92:	7fbb      	ldrb	r3, [r7, #30]
 8006d94:	7f3a      	ldrb	r2, [r7, #28]
 8006d96:	f107 0120 	add.w	r1, r7, #32
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006da0:	fb02 f303 	mul.w	r3, r2, r3
 8006da4:	7f3a      	ldrb	r2, [r7, #28]
 8006da6:	f107 0120 	add.w	r1, r7, #32
 8006daa:	440a      	add	r2, r1
 8006dac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
 8006dbe:	7f7a      	ldrb	r2, [r7, #29]
 8006dc0:	f107 0120 	add.w	r1, r7, #32
 8006dc4:	440a      	add	r2, r1
 8006dc6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	7f7a      	ldrb	r2, [r7, #29]
 8006dd0:	f107 0120 	add.w	r1, r7, #32
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006de6:	bf00      	nop
 8006de8:	3724      	adds	r7, #36	; 0x24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	0800a234 	.word	0x0800a234
 8006df8:	0800a23c 	.word	0x0800a23c

08006dfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006e00:	bf00      	nop
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e12:	f3ef 8305 	mrs	r3, IPSR
 8006e16:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10f      	bne.n	8006e3e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e22:	607b      	str	r3, [r7, #4]
  return(result);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d007      	beq.n	8006e46 <osKernelInitialize+0x3a>
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <osKernelInitialize+0x64>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d103      	bne.n	8006e46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006e3e:	f06f 0305 	mvn.w	r3, #5
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e00c      	b.n	8006e60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <osKernelInitialize+0x64>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <osKernelInitialize+0x64>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e002      	b.n	8006e60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	24000098 	.word	0x24000098

08006e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e7a:	f3ef 8305 	mrs	r3, IPSR
 8006e7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10f      	bne.n	8006ea6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e86:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d105      	bne.n	8006e9e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e92:	f3ef 8311 	mrs	r3, BASEPRI
 8006e96:	603b      	str	r3, [r7, #0]
  return(result);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <osKernelStart+0x3a>
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <osKernelStart+0x68>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d103      	bne.n	8006eae <osKernelStart+0x3a>
    stat = osErrorISR;
 8006ea6:	f06f 0305 	mvn.w	r3, #5
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e010      	b.n	8006ed0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <osKernelStart+0x68>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d109      	bne.n	8006eca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006eb6:	f7ff ffa1 	bl	8006dfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <osKernelStart+0x68>)
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ec0:	f001 f870 	bl	8007fa4 <vTaskStartScheduler>
      stat = osOK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e002      	b.n	8006ed0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006eca:	f04f 33ff 	mov.w	r3, #4294967295
 8006ece:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	24000098 	.word	0x24000098

08006ee0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b090      	sub	sp, #64	; 0x40
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef0:	f3ef 8305 	mrs	r3, IPSR
 8006ef4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ef6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 808f 	bne.w	800701c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efe:	f3ef 8310 	mrs	r3, PRIMASK
 8006f02:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <osThreadNew+0x3e>
 8006f16:	4b44      	ldr	r3, [pc, #272]	; (8007028 <osThreadNew+0x148>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d07e      	beq.n	800701c <osThreadNew+0x13c>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d07b      	beq.n	800701c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006f24:	2380      	movs	r3, #128	; 0x80
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006f28:	2318      	movs	r3, #24
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006f30:	f04f 33ff 	mov.w	r3, #4294967295
 8006f34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d045      	beq.n	8006fc8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <osThreadNew+0x6a>
        name = attr->name;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d008      	beq.n	8006f70 <osThreadNew+0x90>
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b38      	cmp	r3, #56	; 0x38
 8006f62:	d805      	bhi.n	8006f70 <osThreadNew+0x90>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <osThreadNew+0x94>
        return (NULL);
 8006f70:	2300      	movs	r3, #0
 8006f72:	e054      	b.n	800701e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	089b      	lsrs	r3, r3, #2
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <osThreadNew+0xca>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b5b      	cmp	r3, #91	; 0x5b
 8006f92:	d90a      	bls.n	8006faa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d006      	beq.n	8006faa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <osThreadNew+0xca>
        mem = 1;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	623b      	str	r3, [r7, #32]
 8006fa8:	e010      	b.n	8006fcc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10c      	bne.n	8006fcc <osThreadNew+0xec>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d108      	bne.n	8006fcc <osThreadNew+0xec>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <osThreadNew+0xec>
          mem = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	e001      	b.n	8006fcc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d110      	bne.n	8006ff4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fda:	9202      	str	r2, [sp, #8]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fe09 	bl	8007c00 <xTaskCreateStatic>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	e013      	b.n	800701c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d110      	bne.n	800701c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f107 0310 	add.w	r3, r7, #16
 8007002:	9301      	str	r3, [sp, #4]
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fe51 	bl	8007cb4 <xTaskCreate>
 8007012:	4603      	mov	r3, r0
 8007014:	2b01      	cmp	r3, #1
 8007016:	d001      	beq.n	800701c <osThreadNew+0x13c>
          hTask = NULL;
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800701c:	693b      	ldr	r3, [r7, #16]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3730      	adds	r7, #48	; 0x30
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	24000098 	.word	0x24000098

0800702c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007034:	f3ef 8305 	mrs	r3, IPSR
 8007038:	613b      	str	r3, [r7, #16]
  return(result);
 800703a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10f      	bne.n	8007060 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007040:	f3ef 8310 	mrs	r3, PRIMASK
 8007044:	60fb      	str	r3, [r7, #12]
  return(result);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800704c:	f3ef 8311 	mrs	r3, BASEPRI
 8007050:	60bb      	str	r3, [r7, #8]
  return(result);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <osDelay+0x3c>
 8007058:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <osDelay+0x58>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d103      	bne.n	8007068 <osDelay+0x3c>
    stat = osErrorISR;
 8007060:	f06f 0305 	mvn.w	r3, #5
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	e007      	b.n	8007078 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 ff62 	bl	8007f3c <vTaskDelay>
    }
  }

  return (stat);
 8007078:	697b      	ldr	r3, [r7, #20]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	24000098 	.word	0x24000098

08007088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a07      	ldr	r2, [pc, #28]	; (80070b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4a06      	ldr	r2, [pc, #24]	; (80070b8 <vApplicationGetIdleTaskMemory+0x30>)
 800709e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2280      	movs	r2, #128	; 0x80
 80070a4:	601a      	str	r2, [r3, #0]
}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2400009c 	.word	0x2400009c
 80070b8:	240000f8 	.word	0x240000f8

080070bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4a07      	ldr	r2, [pc, #28]	; (80070e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80070cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4a06      	ldr	r2, [pc, #24]	; (80070ec <vApplicationGetTimerTaskMemory+0x30>)
 80070d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070da:	601a      	str	r2, [r3, #0]
}
 80070dc:	bf00      	nop
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	240002f8 	.word	0x240002f8
 80070ec:	24000354 	.word	0x24000354

080070f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0208 	add.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f04f 32ff 	mov.w	r2, #4294967295
 8007108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f103 0208 	add.w	r2, r3, #8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f103 0208 	add.w	r2, r3, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d103      	bne.n	80071b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e00c      	b.n	80071cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3308      	adds	r3, #8
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e002      	b.n	80071c0 <vListInsert+0x2e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d2f6      	bcs.n	80071ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6892      	ldr	r2, [r2, #8]
 800721a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6852      	ldr	r2, [r2, #4]
 8007224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d103      	bne.n	8007238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	e7fe      	b.n	800727e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007280:	f002 f814 	bl	80092ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	441a      	add	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	3b01      	subs	r3, #1
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072b6:	fb01 f303 	mul.w	r3, r1, r3
 80072ba:	441a      	add	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	22ff      	movs	r2, #255	; 0xff
 80072cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d114      	bne.n	8007300 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01a      	beq.n	8007314 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3310      	adds	r3, #16
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f8de 	bl	80084a4 <xTaskRemoveFromEventList>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d012      	beq.n	8007314 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <xQueueGenericReset+0xcc>)
 80072f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	e009      	b.n	8007314 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3310      	adds	r3, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fef3 	bl	80070f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3324      	adds	r3, #36	; 0x24
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff feee 	bl	80070f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007314:	f001 fff8 	bl	8009308 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007318:	2301      	movs	r3, #1
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08e      	sub	sp, #56	; 0x38
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <xQueueGenericCreateStatic+0x28>
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
 800734e:	e7fe      	b.n	800734e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <xQueueGenericCreateStatic+0x42>
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
 8007368:	e7fe      	b.n	8007368 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <xQueueGenericCreateStatic+0x4e>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <xQueueGenericCreateStatic+0x52>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <xQueueGenericCreateStatic+0x54>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <xQueueGenericCreateStatic+0x6c>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	623b      	str	r3, [r7, #32]
 8007392:	e7fe      	b.n	8007392 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <xQueueGenericCreateStatic+0x78>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <xQueueGenericCreateStatic+0x7c>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <xQueueGenericCreateStatic+0x7e>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <xQueueGenericCreateStatic+0x96>
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e7fe      	b.n	80073bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073be:	2350      	movs	r3, #80	; 0x50
 80073c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b50      	cmp	r3, #80	; 0x50
 80073c6:	d009      	beq.n	80073dc <xQueueGenericCreateStatic+0xb4>
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	e7fe      	b.n	80073da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f805 	bl	800740e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007406:	4618      	mov	r0, r3
 8007408:	3730      	adds	r7, #48	; 0x30
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d103      	bne.n	800742a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e002      	b.n	8007430 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800743c:	2101      	movs	r1, #1
 800743e:	69b8      	ldr	r0, [r7, #24]
 8007440:	f7ff ff0a 	bl	8007258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007462:	2300      	movs	r3, #0
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <xQueueGenericSend+0x30>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
 8007482:	e7fe      	b.n	8007482 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <xQueueGenericSend+0x3e>
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <xQueueGenericSend+0x42>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <xQueueGenericSend+0x44>
 8007496:	2300      	movs	r3, #0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d109      	bne.n	80074b0 <xQueueGenericSend+0x5c>
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
 80074ae:	e7fe      	b.n	80074ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d103      	bne.n	80074be <xQueueGenericSend+0x6a>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <xQueueGenericSend+0x6e>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <xQueueGenericSend+0x70>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <xQueueGenericSend+0x88>
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	623b      	str	r3, [r7, #32]
 80074da:	e7fe      	b.n	80074da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074dc:	f001 f998 	bl	8008810 <xTaskGetSchedulerState>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <xQueueGenericSend+0x98>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <xQueueGenericSend+0x9c>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xQueueGenericSend+0x9e>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <xQueueGenericSend+0xb6>
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800750a:	f001 fecf 	bl	80092ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <xQueueGenericSend+0xcc>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d129      	bne.n	8007574 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007526:	f000 f9ff 	bl	8007928 <prvCopyDataToQueue>
 800752a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	3324      	adds	r3, #36	; 0x24
 8007538:	4618      	mov	r0, r3
 800753a:	f000 ffb3 	bl	80084a4 <xTaskRemoveFromEventList>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d013      	beq.n	800756c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007544:	4b3f      	ldr	r3, [pc, #252]	; (8007644 <xQueueGenericSend+0x1f0>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	e00a      	b.n	800756c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800755c:	4b39      	ldr	r3, [pc, #228]	; (8007644 <xQueueGenericSend+0x1f0>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800756c:	f001 fecc 	bl	8009308 <vPortExitCritical>
				return pdPASS;
 8007570:	2301      	movs	r3, #1
 8007572:	e063      	b.n	800763c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800757a:	f001 fec5 	bl	8009308 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800757e:	2300      	movs	r3, #0
 8007580:	e05c      	b.n	800763c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4618      	mov	r0, r3
 800758e:	f000 ffeb 	bl	8008568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007596:	f001 feb7 	bl	8009308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800759a:	f000 fd67 	bl	800806c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800759e:	f001 fe85 	bl	80092ac <vPortEnterCritical>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	d103      	bne.n	80075b8 <xQueueGenericSend+0x164>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d103      	bne.n	80075ce <xQueueGenericSend+0x17a>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ce:	f001 fe9b 	bl	8009308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075d2:	1d3a      	adds	r2, r7, #4
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 ffda 	bl	8008594 <xTaskCheckForTimeOut>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d124      	bne.n	8007630 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e8:	f000 fa96 	bl	8007b18 <prvIsQueueFull>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d018      	beq.n	8007624 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	3310      	adds	r3, #16
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ff04 	bl	8008408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007602:	f000 fa21 	bl	8007a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007606:	f000 fd3f 	bl	8008088 <xTaskResumeAll>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f af7c 	bne.w	800750a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <xQueueGenericSend+0x1f0>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	e772      	b.n	800750a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007626:	f000 fa0f 	bl	8007a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800762a:	f000 fd2d 	bl	8008088 <xTaskResumeAll>
 800762e:	e76c      	b.n	800750a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007632:	f000 fa09 	bl	8007a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007636:	f000 fd27 	bl	8008088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800763a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800763c:	4618      	mov	r0, r3
 800763e:	3738      	adds	r7, #56	; 0x38
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2b00      	cmp	r3, #0
 800765e:	d109      	bne.n	8007674 <xQueueGenericSendFromISR+0x2c>
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
 8007672:	e7fe      	b.n	8007672 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <xQueueGenericSendFromISR+0x3a>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <xQueueGenericSendFromISR+0x3e>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <xQueueGenericSendFromISR+0x40>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <xQueueGenericSendFromISR+0x58>
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	e7fe      	b.n	800769e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d103      	bne.n	80076ae <xQueueGenericSendFromISR+0x66>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <xQueueGenericSendFromISR+0x6a>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <xQueueGenericSendFromISR+0x6c>
 80076b2:	2300      	movs	r3, #0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <xQueueGenericSendFromISR+0x84>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	e7fe      	b.n	80076ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076cc:	f001 feca 	bl	8009464 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076d0:	f3ef 8211 	mrs	r2, BASEPRI
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	61ba      	str	r2, [r7, #24]
 80076e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d302      	bcc.n	80076fe <xQueueGenericSendFromISR+0xb6>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d12c      	bne.n	8007758 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800770e:	f000 f90b 	bl	8007928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007712:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d112      	bne.n	8007742 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d016      	beq.n	8007752 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	3324      	adds	r3, #36	; 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f000 febb 	bl	80084a4 <xTaskRemoveFromEventList>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00e      	beq.n	8007752 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	e007      	b.n	8007752 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007746:	3301      	adds	r3, #1
 8007748:	b2db      	uxtb	r3, r3
 800774a:	b25a      	sxtb	r2, r3
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007752:	2301      	movs	r3, #1
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007756:	e001      	b.n	800775c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007758:	2300      	movs	r3, #0
 800775a:	637b      	str	r3, [r7, #52]	; 0x34
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007768:	4618      	mov	r0, r3
 800776a:	3738      	adds	r7, #56	; 0x38
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08c      	sub	sp, #48	; 0x30
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <xQueueReceive+0x2e>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	e7fe      	b.n	800779c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <xQueueReceive+0x3c>
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <xQueueReceive+0x40>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <xQueueReceive+0x42>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <xQueueReceive+0x5a>
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	61fb      	str	r3, [r7, #28]
 80077c8:	e7fe      	b.n	80077c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ca:	f001 f821 	bl	8008810 <xTaskGetSchedulerState>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d102      	bne.n	80077da <xQueueReceive+0x6a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <xQueueReceive+0x6e>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <xQueueReceive+0x70>
 80077de:	2300      	movs	r3, #0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <xQueueReceive+0x88>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	e7fe      	b.n	80077f6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077f8:	f001 fd58 	bl	80092ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01f      	beq.n	8007848 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780c:	f000 f8f6 	bl	80079fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	1e5a      	subs	r2, r3, #1
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00f      	beq.n	8007840 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	3310      	adds	r3, #16
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fe3d 	bl	80084a4 <xTaskRemoveFromEventList>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007830:	4b3c      	ldr	r3, [pc, #240]	; (8007924 <xQueueReceive+0x1b4>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007840:	f001 fd62 	bl	8009308 <vPortExitCritical>
				return pdPASS;
 8007844:	2301      	movs	r3, #1
 8007846:	e069      	b.n	800791c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d103      	bne.n	8007856 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800784e:	f001 fd5b 	bl	8009308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007852:	2300      	movs	r3, #0
 8007854:	e062      	b.n	800791c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800785c:	f107 0310 	add.w	r3, r7, #16
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fe81 	bl	8008568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007866:	2301      	movs	r3, #1
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786a:	f001 fd4d 	bl	8009308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800786e:	f000 fbfd 	bl	800806c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007872:	f001 fd1b 	bl	80092ac <vPortEnterCritical>
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800787c:	b25b      	sxtb	r3, r3
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d103      	bne.n	800788c <xQueueReceive+0x11c>
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007892:	b25b      	sxtb	r3, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d103      	bne.n	80078a2 <xQueueReceive+0x132>
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a2:	f001 fd31 	bl	8009308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a6:	1d3a      	adds	r2, r7, #4
 80078a8:	f107 0310 	add.w	r3, r7, #16
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fe70 	bl	8008594 <xTaskCheckForTimeOut>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d123      	bne.n	8007902 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078bc:	f000 f916 	bl	8007aec <prvIsQueueEmpty>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d017      	beq.n	80078f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	3324      	adds	r3, #36	; 0x24
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fd9a 	bl	8008408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d6:	f000 f8b7 	bl	8007a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078da:	f000 fbd5 	bl	8008088 <xTaskResumeAll>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d189      	bne.n	80077f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80078e4:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <xQueueReceive+0x1b4>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	e780      	b.n	80077f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f8:	f000 f8a6 	bl	8007a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078fc:	f000 fbc4 	bl	8008088 <xTaskResumeAll>
 8007900:	e77a      	b.n	80077f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007904:	f000 f8a0 	bl	8007a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007908:	f000 fbbe 	bl	8008088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800790c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790e:	f000 f8ed 	bl	8007aec <prvIsQueueEmpty>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	f43f af6f 	beq.w	80077f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800791a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800791c:	4618      	mov	r0, r3
 800791e:	3730      	adds	r7, #48	; 0x30
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d14d      	bne.n	80079ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 ff7a 	bl	800884c <xTaskPriorityDisinherit>
 8007958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	e043      	b.n	80079ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d119      	bne.n	800799c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6858      	ldr	r0, [r3, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	461a      	mov	r2, r3
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	f001 ffb4 	bl	80098e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	d32b      	bcc.n	80079ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	e026      	b.n	80079ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68d8      	ldr	r0, [r3, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	461a      	mov	r2, r3
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	f001 ff9a 	bl	80098e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	425b      	negs	r3, r3
 80079b6:	441a      	add	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d207      	bcs.n	80079d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d0:	425b      	negs	r3, r3
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d105      	bne.n	80079ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079f2:	697b      	ldr	r3, [r7, #20]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	441a      	add	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d303      	bcc.n	8007a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68d9      	ldr	r1, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6838      	ldr	r0, [r7, #0]
 8007a3c:	f001 ff50 	bl	80098e0 <memcpy>
	}
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a50:	f001 fc2c 	bl	80092ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a5c:	e011      	b.n	8007a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d012      	beq.n	8007a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	; 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fd1a 	bl	80084a4 <xTaskRemoveFromEventList>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a76:	f000 fded 	bl	8008654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dce9      	bgt.n	8007a5e <prvUnlockQueue+0x16>
 8007a8a:	e000      	b.n	8007a8e <prvUnlockQueue+0x46>
					break;
 8007a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	22ff      	movs	r2, #255	; 0xff
 8007a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 fc37 	bl	8009308 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a9a:	f001 fc07 	bl	80092ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aa6:	e011      	b.n	8007acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d012      	beq.n	8007ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fcf5 	bl	80084a4 <xTaskRemoveFromEventList>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ac0:	f000 fdc8 	bl	8008654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dce9      	bgt.n	8007aa8 <prvUnlockQueue+0x60>
 8007ad4:	e000      	b.n	8007ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	22ff      	movs	r2, #255	; 0xff
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ae0:	f001 fc12 	bl	8009308 <vPortExitCritical>
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af4:	f001 fbda 	bl	80092ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e001      	b.n	8007b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0a:	f001 fbfd 	bl	8009308 <vPortExitCritical>

	return xReturn;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b20:	f001 fbc4 	bl	80092ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d102      	bne.n	8007b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e001      	b.n	8007b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b3a:	f001 fbe5 	bl	8009308 <vPortExitCritical>

	return xReturn;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e014      	b.n	8007b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b58:	4a0e      	ldr	r2, [pc, #56]	; (8007b94 <vQueueAddToRegistry+0x4c>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b64:	490b      	ldr	r1, [pc, #44]	; (8007b94 <vQueueAddToRegistry+0x4c>)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b6e:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <vQueueAddToRegistry+0x4c>)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4413      	add	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b7a:	e005      	b.n	8007b88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b07      	cmp	r3, #7
 8007b86:	d9e7      	bls.n	8007b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	24004ac0 	.word	0x24004ac0

08007b98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ba8:	f001 fb80 	bl	80092ac <vPortEnterCritical>
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bb2:	b25b      	sxtb	r3, r3
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d103      	bne.n	8007bc2 <vQueueWaitForMessageRestricted+0x2a>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bce:	d103      	bne.n	8007bd8 <vQueueWaitForMessageRestricted+0x40>
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bd8:	f001 fb96 	bl	8009308 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fc2f 	bl	8008450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007bf2:	6978      	ldr	r0, [r7, #20]
 8007bf4:	f7ff ff28 	bl	8007a48 <prvUnlockQueue>
	}
 8007bf8:	bf00      	nop
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08e      	sub	sp, #56	; 0x38
 8007c04:	af04      	add	r7, sp, #16
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <xTaskCreateStatic+0x28>
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	623b      	str	r3, [r7, #32]
 8007c26:	e7fe      	b.n	8007c26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <xTaskCreateStatic+0x42>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	e7fe      	b.n	8007c40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c42:	235c      	movs	r3, #92	; 0x5c
 8007c44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b5c      	cmp	r3, #92	; 0x5c
 8007c4a:	d009      	beq.n	8007c60 <xTaskCreateStatic+0x60>
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	e7fe      	b.n	8007c5e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01e      	beq.n	8007ca6 <xTaskCreateStatic+0xa6>
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01b      	beq.n	8007ca6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c80:	2300      	movs	r3, #0
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f850 	bl	8007d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ca0:	f000 f8dc 	bl	8007e5c <prvAddNewTaskToReadyList>
 8007ca4:	e001      	b.n	8007caa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007caa:	697b      	ldr	r3, [r7, #20]
	}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3728      	adds	r7, #40	; 0x28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08c      	sub	sp, #48	; 0x30
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fc09 	bl	80094e0 <pvPortMalloc>
 8007cce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00e      	beq.n	8007cf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007cd6:	205c      	movs	r0, #92	; 0x5c
 8007cd8:	f001 fc02 	bl	80094e0 <pvPortMalloc>
 8007cdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8007cea:	e005      	b.n	8007cf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cec:	6978      	ldr	r0, [r7, #20]
 8007cee:	f001 fcb9 	bl	8009664 <vPortFree>
 8007cf2:	e001      	b.n	8007cf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d017      	beq.n	8007d2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9303      	str	r3, [sp, #12]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f80e 	bl	8007d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d22:	69f8      	ldr	r0, [r7, #28]
 8007d24:	f000 f89a 	bl	8007e5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	61bb      	str	r3, [r7, #24]
 8007d2c:	e002      	b.n	8007d34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d34:	69bb      	ldr	r3, [r7, #24]
	}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	461a      	mov	r2, r3
 8007d56:	21a5      	movs	r1, #165	; 0xa5
 8007d58:	f001 fdcd 	bl	80098f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007d66:	440b      	add	r3, r1
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d009      	beq.n	8007d94 <prvInitialiseNewTask+0x56>
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e7fe      	b.n	8007d92 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01f      	beq.n	8007dda <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	e012      	b.n	8007dc6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	7819      	ldrb	r1, [r3, #0]
 8007da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	3334      	adds	r3, #52	; 0x34
 8007db0:	460a      	mov	r2, r1
 8007db2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d006      	beq.n	8007dce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d9e9      	bls.n	8007da0 <prvInitialiseNewTask+0x62>
 8007dcc:	e000      	b.n	8007dd0 <prvInitialiseNewTask+0x92>
			{
				break;
 8007dce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dd8:	e003      	b.n	8007de2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	2b37      	cmp	r3, #55	; 0x37
 8007de6:	d901      	bls.n	8007dec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007de8:	2337      	movs	r3, #55	; 0x37
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff f994 	bl	8007130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff f98f 	bl	8007130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	69b8      	ldr	r0, [r7, #24]
 8007e3c:	f001 f90c 	bl	8009058 <pxPortInitialiseStack>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e52:	bf00      	nop
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e64:	f001 fa22 	bl	80092ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e68:	4b2d      	ldr	r3, [pc, #180]	; (8007f20 <prvAddNewTaskToReadyList+0xc4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	4a2c      	ldr	r2, [pc, #176]	; (8007f20 <prvAddNewTaskToReadyList+0xc4>)
 8007e70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e72:	4b2c      	ldr	r3, [pc, #176]	; (8007f24 <prvAddNewTaskToReadyList+0xc8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e7a:	4a2a      	ldr	r2, [pc, #168]	; (8007f24 <prvAddNewTaskToReadyList+0xc8>)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e80:	4b27      	ldr	r3, [pc, #156]	; (8007f20 <prvAddNewTaskToReadyList+0xc4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d110      	bne.n	8007eaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e88:	f000 fc08 	bl	800869c <prvInitialiseTaskLists>
 8007e8c:	e00d      	b.n	8007eaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e8e:	4b26      	ldr	r3, [pc, #152]	; (8007f28 <prvAddNewTaskToReadyList+0xcc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e96:	4b23      	ldr	r3, [pc, #140]	; (8007f24 <prvAddNewTaskToReadyList+0xc8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d802      	bhi.n	8007eaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ea4:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <prvAddNewTaskToReadyList+0xc8>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007eaa:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <prvAddNewTaskToReadyList+0xd0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	4a1e      	ldr	r2, [pc, #120]	; (8007f2c <prvAddNewTaskToReadyList+0xd0>)
 8007eb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <prvAddNewTaskToReadyList+0xd0>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec0:	4b1b      	ldr	r3, [pc, #108]	; (8007f30 <prvAddNewTaskToReadyList+0xd4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d903      	bls.n	8007ed0 <prvAddNewTaskToReadyList+0x74>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <prvAddNewTaskToReadyList+0xd4>)
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4a15      	ldr	r2, [pc, #84]	; (8007f34 <prvAddNewTaskToReadyList+0xd8>)
 8007ede:	441a      	add	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f7ff f92f 	bl	800714a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007eec:	f001 fa0c 	bl	8009308 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <prvAddNewTaskToReadyList+0xcc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00e      	beq.n	8007f16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <prvAddNewTaskToReadyList+0xc8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d207      	bcs.n	8007f16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <prvAddNewTaskToReadyList+0xdc>)
 8007f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	24000c28 	.word	0x24000c28
 8007f24:	24000754 	.word	0x24000754
 8007f28:	24000c34 	.word	0x24000c34
 8007f2c:	24000c44 	.word	0x24000c44
 8007f30:	24000c30 	.word	0x24000c30
 8007f34:	24000758 	.word	0x24000758
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <vTaskDelay+0x60>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <vTaskDelay+0x2e>
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	e7fe      	b.n	8007f68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007f6a:	f000 f87f 	bl	800806c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fcd7 	bl	8008924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f76:	f000 f887 	bl	8008088 <xTaskResumeAll>
 8007f7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d107      	bne.n	8007f92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <vTaskDelay+0x64>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	24000c50 	.word	0x24000c50
 8007fa0:	e000ed04 	.word	0xe000ed04

08007fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	1d39      	adds	r1, r7, #4
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff f864 	bl	8007088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	9202      	str	r2, [sp, #8]
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	460a      	mov	r2, r1
 8007fd2:	4920      	ldr	r1, [pc, #128]	; (8008054 <vTaskStartScheduler+0xb0>)
 8007fd4:	4820      	ldr	r0, [pc, #128]	; (8008058 <vTaskStartScheduler+0xb4>)
 8007fd6:	f7ff fe13 	bl	8007c00 <xTaskCreateStatic>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4b1f      	ldr	r3, [pc, #124]	; (800805c <vTaskStartScheduler+0xb8>)
 8007fde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fe0:	4b1e      	ldr	r3, [pc, #120]	; (800805c <vTaskStartScheduler+0xb8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	e001      	b.n	8007ff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d102      	bne.n	8007ffe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ff8:	f000 fce8 	bl	80089cc <xTimerCreateTimerTask>
 8007ffc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d115      	bne.n	8008030 <vTaskStartScheduler+0x8c>
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008016:	4b12      	ldr	r3, [pc, #72]	; (8008060 <vTaskStartScheduler+0xbc>)
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <vTaskStartScheduler+0xc0>)
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008024:	4b10      	ldr	r3, [pc, #64]	; (8008068 <vTaskStartScheduler+0xc4>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800802a:	f001 f8a1 	bl	8009170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800802e:	e00d      	b.n	800804c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008036:	d109      	bne.n	800804c <vTaskStartScheduler+0xa8>
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e7fe      	b.n	800804a <vTaskStartScheduler+0xa6>
}
 800804c:	bf00      	nop
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	0800a244 	.word	0x0800a244
 8008058:	0800866d 	.word	0x0800866d
 800805c:	24000c4c 	.word	0x24000c4c
 8008060:	24000c48 	.word	0x24000c48
 8008064:	24000c34 	.word	0x24000c34
 8008068:	24000c2c 	.word	0x24000c2c

0800806c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008070:	4b04      	ldr	r3, [pc, #16]	; (8008084 <vTaskSuspendAll+0x18>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	4a03      	ldr	r2, [pc, #12]	; (8008084 <vTaskSuspendAll+0x18>)
 8008078:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800807a:	bf00      	nop
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	24000c50 	.word	0x24000c50

08008088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008092:	2300      	movs	r3, #0
 8008094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008096:	4b41      	ldr	r3, [pc, #260]	; (800819c <xTaskResumeAll+0x114>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d109      	bne.n	80080b2 <xTaskResumeAll+0x2a>
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	e7fe      	b.n	80080b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080b2:	f001 f8fb 	bl	80092ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080b6:	4b39      	ldr	r3, [pc, #228]	; (800819c <xTaskResumeAll+0x114>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	4a37      	ldr	r2, [pc, #220]	; (800819c <xTaskResumeAll+0x114>)
 80080be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c0:	4b36      	ldr	r3, [pc, #216]	; (800819c <xTaskResumeAll+0x114>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d162      	bne.n	800818e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080c8:	4b35      	ldr	r3, [pc, #212]	; (80081a0 <xTaskResumeAll+0x118>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d05e      	beq.n	800818e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080d0:	e02f      	b.n	8008132 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d2:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <xTaskResumeAll+0x11c>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3318      	adds	r3, #24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff f890 	bl	8007204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff f88b 	bl	8007204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f2:	4b2d      	ldr	r3, [pc, #180]	; (80081a8 <xTaskResumeAll+0x120>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d903      	bls.n	8008102 <xTaskResumeAll+0x7a>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <xTaskResumeAll+0x120>)
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008106:	4613      	mov	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4a27      	ldr	r2, [pc, #156]	; (80081ac <xTaskResumeAll+0x124>)
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3304      	adds	r3, #4
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f7ff f816 	bl	800714a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008122:	4b23      	ldr	r3, [pc, #140]	; (80081b0 <xTaskResumeAll+0x128>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	429a      	cmp	r2, r3
 800812a:	d302      	bcc.n	8008132 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800812c:	4b21      	ldr	r3, [pc, #132]	; (80081b4 <xTaskResumeAll+0x12c>)
 800812e:	2201      	movs	r2, #1
 8008130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008132:	4b1c      	ldr	r3, [pc, #112]	; (80081a4 <xTaskResumeAll+0x11c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1cb      	bne.n	80080d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008140:	f000 fb46 	bl	80087d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008144:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <xTaskResumeAll+0x130>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d010      	beq.n	8008172 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008150:	f000 f846 	bl	80081e0 <xTaskIncrementTick>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800815a:	4b16      	ldr	r3, [pc, #88]	; (80081b4 <xTaskResumeAll+0x12c>)
 800815c:	2201      	movs	r2, #1
 800815e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3b01      	subs	r3, #1
 8008164:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f1      	bne.n	8008150 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800816c:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <xTaskResumeAll+0x130>)
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008172:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <xTaskResumeAll+0x12c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800817a:	2301      	movs	r3, #1
 800817c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <xTaskResumeAll+0x134>)
 8008180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800818e:	f001 f8bb 	bl	8009308 <vPortExitCritical>

	return xAlreadyYielded;
 8008192:	68bb      	ldr	r3, [r7, #8]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	24000c50 	.word	0x24000c50
 80081a0:	24000c28 	.word	0x24000c28
 80081a4:	24000be8 	.word	0x24000be8
 80081a8:	24000c30 	.word	0x24000c30
 80081ac:	24000758 	.word	0x24000758
 80081b0:	24000754 	.word	0x24000754
 80081b4:	24000c3c 	.word	0x24000c3c
 80081b8:	24000c38 	.word	0x24000c38
 80081bc:	e000ed04 	.word	0xe000ed04

080081c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <xTaskGetTickCount+0x1c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081cc:	687b      	ldr	r3, [r7, #4]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	24000c2c 	.word	0x24000c2c

080081e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ea:	4b4e      	ldr	r3, [pc, #312]	; (8008324 <xTaskIncrementTick+0x144>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 8088 	bne.w	8008304 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081f4:	4b4c      	ldr	r3, [pc, #304]	; (8008328 <xTaskIncrementTick+0x148>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081fc:	4a4a      	ldr	r2, [pc, #296]	; (8008328 <xTaskIncrementTick+0x148>)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11f      	bne.n	8008248 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008208:	4b48      	ldr	r3, [pc, #288]	; (800832c <xTaskIncrementTick+0x14c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <xTaskIncrementTick+0x46>
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	e7fe      	b.n	8008224 <xTaskIncrementTick+0x44>
 8008226:	4b41      	ldr	r3, [pc, #260]	; (800832c <xTaskIncrementTick+0x14c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	4b40      	ldr	r3, [pc, #256]	; (8008330 <xTaskIncrementTick+0x150>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a3e      	ldr	r2, [pc, #248]	; (800832c <xTaskIncrementTick+0x14c>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	4a3e      	ldr	r2, [pc, #248]	; (8008330 <xTaskIncrementTick+0x150>)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	4b3e      	ldr	r3, [pc, #248]	; (8008334 <xTaskIncrementTick+0x154>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	4a3c      	ldr	r2, [pc, #240]	; (8008334 <xTaskIncrementTick+0x154>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f000 fac4 	bl	80087d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008248:	4b3b      	ldr	r3, [pc, #236]	; (8008338 <xTaskIncrementTick+0x158>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	429a      	cmp	r2, r3
 8008250:	d349      	bcc.n	80082e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008252:	4b36      	ldr	r3, [pc, #216]	; (800832c <xTaskIncrementTick+0x14c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	4b36      	ldr	r3, [pc, #216]	; (8008338 <xTaskIncrementTick+0x158>)
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	601a      	str	r2, [r3, #0]
					break;
 8008264:	e03f      	b.n	80082e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008266:	4b31      	ldr	r3, [pc, #196]	; (800832c <xTaskIncrementTick+0x14c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d203      	bcs.n	8008286 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800827e:	4a2e      	ldr	r2, [pc, #184]	; (8008338 <xTaskIncrementTick+0x158>)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008284:	e02f      	b.n	80082e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe ffba 	bl	8007204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3318      	adds	r3, #24
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe ffb1 	bl	8007204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a6:	4b25      	ldr	r3, [pc, #148]	; (800833c <xTaskIncrementTick+0x15c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d903      	bls.n	80082b6 <xTaskIncrementTick+0xd6>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	4a22      	ldr	r2, [pc, #136]	; (800833c <xTaskIncrementTick+0x15c>)
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <xTaskIncrementTick+0x160>)
 80082c4:	441a      	add	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f7fe ff3c 	bl	800714a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d6:	4b1b      	ldr	r3, [pc, #108]	; (8008344 <xTaskIncrementTick+0x164>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	429a      	cmp	r2, r3
 80082de:	d3b8      	bcc.n	8008252 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e4:	e7b5      	b.n	8008252 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082e6:	4b17      	ldr	r3, [pc, #92]	; (8008344 <xTaskIncrementTick+0x164>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	4914      	ldr	r1, [pc, #80]	; (8008340 <xTaskIncrementTick+0x160>)
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d907      	bls.n	800830e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80082fe:	2301      	movs	r3, #1
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e004      	b.n	800830e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008304:	4b10      	ldr	r3, [pc, #64]	; (8008348 <xTaskIncrementTick+0x168>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	4a0f      	ldr	r2, [pc, #60]	; (8008348 <xTaskIncrementTick+0x168>)
 800830c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <xTaskIncrementTick+0x16c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008316:	2301      	movs	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800831a:	697b      	ldr	r3, [r7, #20]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	24000c50 	.word	0x24000c50
 8008328:	24000c2c 	.word	0x24000c2c
 800832c:	24000be0 	.word	0x24000be0
 8008330:	24000be4 	.word	0x24000be4
 8008334:	24000c40 	.word	0x24000c40
 8008338:	24000c48 	.word	0x24000c48
 800833c:	24000c30 	.word	0x24000c30
 8008340:	24000758 	.word	0x24000758
 8008344:	24000754 	.word	0x24000754
 8008348:	24000c38 	.word	0x24000c38
 800834c:	24000c3c 	.word	0x24000c3c

08008350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008356:	4b27      	ldr	r3, [pc, #156]	; (80083f4 <vTaskSwitchContext+0xa4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800835e:	4b26      	ldr	r3, [pc, #152]	; (80083f8 <vTaskSwitchContext+0xa8>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008364:	e040      	b.n	80083e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008366:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <vTaskSwitchContext+0xa8>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836c:	4b23      	ldr	r3, [pc, #140]	; (80083fc <vTaskSwitchContext+0xac>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e00f      	b.n	8008394 <vTaskSwitchContext+0x44>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <vTaskSwitchContext+0x3e>
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	607b      	str	r3, [r7, #4]
 800838c:	e7fe      	b.n	800838c <vTaskSwitchContext+0x3c>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3b01      	subs	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	491a      	ldr	r1, [pc, #104]	; (8008400 <vTaskSwitchContext+0xb0>)
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0e5      	beq.n	8008374 <vTaskSwitchContext+0x24>
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a13      	ldr	r2, [pc, #76]	; (8008400 <vTaskSwitchContext+0xb0>)
 80083b4:	4413      	add	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	3308      	adds	r3, #8
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d104      	bne.n	80083d8 <vTaskSwitchContext+0x88>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	605a      	str	r2, [r3, #4]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <vTaskSwitchContext+0xb4>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	4a06      	ldr	r2, [pc, #24]	; (80083fc <vTaskSwitchContext+0xac>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6013      	str	r3, [r2, #0]
}
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	24000c50 	.word	0x24000c50
 80083f8:	24000c3c 	.word	0x24000c3c
 80083fc:	24000c30 	.word	0x24000c30
 8008400:	24000758 	.word	0x24000758
 8008404:	24000754 	.word	0x24000754

08008408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <vTaskPlaceOnEventList+0x24>
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e7fe      	b.n	800842a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800842c:	4b07      	ldr	r3, [pc, #28]	; (800844c <vTaskPlaceOnEventList+0x44>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3318      	adds	r3, #24
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7fe feac 	bl	8007192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800843a:	2101      	movs	r1, #1
 800843c:	6838      	ldr	r0, [r7, #0]
 800843e:	f000 fa71 	bl	8008924 <prvAddCurrentTaskToDelayedList>
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	24000754 	.word	0x24000754

08008450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <vTaskPlaceOnEventListRestricted+0x26>
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	e7fe      	b.n	8008474 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3318      	adds	r3, #24
 800847c:	4619      	mov	r1, r3
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7fe fe63 	bl	800714a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295
 800848e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68b8      	ldr	r0, [r7, #8]
 8008494:	f000 fa46 	bl	8008924 <prvAddCurrentTaskToDelayedList>
	}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	24000754 	.word	0x24000754

080084a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <xTaskRemoveFromEventList+0x2a>
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e7fe      	b.n	80084cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3318      	adds	r3, #24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fe96 	bl	8007204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d8:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <xTaskRemoveFromEventList+0xac>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11d      	bne.n	800851c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fe8d 	bl	8007204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ee:	4b19      	ldr	r3, [pc, #100]	; (8008554 <xTaskRemoveFromEventList+0xb0>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d903      	bls.n	80084fe <xTaskRemoveFromEventList+0x5a>
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	4a16      	ldr	r2, [pc, #88]	; (8008554 <xTaskRemoveFromEventList+0xb0>)
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4a13      	ldr	r2, [pc, #76]	; (8008558 <xTaskRemoveFromEventList+0xb4>)
 800850c:	441a      	add	r2, r3
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7fe fe18 	bl	800714a <vListInsertEnd>
 800851a:	e005      	b.n	8008528 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	3318      	adds	r3, #24
 8008520:	4619      	mov	r1, r3
 8008522:	480e      	ldr	r0, [pc, #56]	; (800855c <xTaskRemoveFromEventList+0xb8>)
 8008524:	f7fe fe11 	bl	800714a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <xTaskRemoveFromEventList+0xbc>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	429a      	cmp	r2, r3
 8008534:	d905      	bls.n	8008542 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008536:	2301      	movs	r3, #1
 8008538:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800853a:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <xTaskRemoveFromEventList+0xc0>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e001      	b.n	8008546 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008546:	697b      	ldr	r3, [r7, #20]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	24000c50 	.word	0x24000c50
 8008554:	24000c30 	.word	0x24000c30
 8008558:	24000758 	.word	0x24000758
 800855c:	24000be8 	.word	0x24000be8
 8008560:	24000754 	.word	0x24000754
 8008564:	24000c3c 	.word	0x24000c3c

08008568 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <vTaskInternalSetTimeOutState+0x24>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <vTaskInternalSetTimeOutState+0x28>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	24000c40 	.word	0x24000c40
 8008590:	24000c2c 	.word	0x24000c2c

08008594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <xTaskCheckForTimeOut+0x24>
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	e7fe      	b.n	80085b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <xTaskCheckForTimeOut+0x3e>
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e7fe      	b.n	80085d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80085d2:	f000 fe6b 	bl	80092ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085d6:	4b1d      	ldr	r3, [pc, #116]	; (800864c <xTaskCheckForTimeOut+0xb8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d102      	bne.n	80085f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	e023      	b.n	800863e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <xTaskCheckForTimeOut+0xbc>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d007      	beq.n	8008612 <xTaskCheckForTimeOut+0x7e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	429a      	cmp	r2, r3
 800860a:	d302      	bcc.n	8008612 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	e015      	b.n	800863e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	429a      	cmp	r2, r3
 800861a:	d20b      	bcs.n	8008634 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff9d 	bl	8008568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	e004      	b.n	800863e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800863e:	f000 fe63 	bl	8009308 <vPortExitCritical>

	return xReturn;
 8008642:	69fb      	ldr	r3, [r7, #28]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	24000c2c 	.word	0x24000c2c
 8008650:	24000c40 	.word	0x24000c40

08008654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008658:	4b03      	ldr	r3, [pc, #12]	; (8008668 <vTaskMissedYield+0x14>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	24000c3c 	.word	0x24000c3c

0800866c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008674:	f000 f852 	bl	800871c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <prvIdleTask+0x28>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d9f9      	bls.n	8008674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <prvIdleTask+0x2c>)
 8008682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008690:	e7f0      	b.n	8008674 <prvIdleTask+0x8>
 8008692:	bf00      	nop
 8008694:	24000758 	.word	0x24000758
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	e00c      	b.n	80086c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a12      	ldr	r2, [pc, #72]	; (80086fc <prvInitialiseTaskLists+0x60>)
 80086b4:	4413      	add	r3, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fd1a 	bl	80070f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3301      	adds	r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b37      	cmp	r3, #55	; 0x37
 80086c6:	d9ef      	bls.n	80086a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086c8:	480d      	ldr	r0, [pc, #52]	; (8008700 <prvInitialiseTaskLists+0x64>)
 80086ca:	f7fe fd11 	bl	80070f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086ce:	480d      	ldr	r0, [pc, #52]	; (8008704 <prvInitialiseTaskLists+0x68>)
 80086d0:	f7fe fd0e 	bl	80070f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086d4:	480c      	ldr	r0, [pc, #48]	; (8008708 <prvInitialiseTaskLists+0x6c>)
 80086d6:	f7fe fd0b 	bl	80070f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086da:	480c      	ldr	r0, [pc, #48]	; (800870c <prvInitialiseTaskLists+0x70>)
 80086dc:	f7fe fd08 	bl	80070f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086e0:	480b      	ldr	r0, [pc, #44]	; (8008710 <prvInitialiseTaskLists+0x74>)
 80086e2:	f7fe fd05 	bl	80070f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <prvInitialiseTaskLists+0x78>)
 80086e8:	4a05      	ldr	r2, [pc, #20]	; (8008700 <prvInitialiseTaskLists+0x64>)
 80086ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <prvInitialiseTaskLists+0x7c>)
 80086ee:	4a05      	ldr	r2, [pc, #20]	; (8008704 <prvInitialiseTaskLists+0x68>)
 80086f0:	601a      	str	r2, [r3, #0]
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	24000758 	.word	0x24000758
 8008700:	24000bb8 	.word	0x24000bb8
 8008704:	24000bcc 	.word	0x24000bcc
 8008708:	24000be8 	.word	0x24000be8
 800870c:	24000bfc 	.word	0x24000bfc
 8008710:	24000c14 	.word	0x24000c14
 8008714:	24000be0 	.word	0x24000be0
 8008718:	24000be4 	.word	0x24000be4

0800871c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008722:	e019      	b.n	8008758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008724:	f000 fdc2 	bl	80092ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008728:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <prvCheckTasksWaitingTermination+0x4c>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fd65 	bl	8007204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <prvCheckTasksWaitingTermination+0x50>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a0a      	ldr	r2, [pc, #40]	; (800876c <prvCheckTasksWaitingTermination+0x50>)
 8008742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <prvCheckTasksWaitingTermination+0x54>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3b01      	subs	r3, #1
 800874a:	4a09      	ldr	r2, [pc, #36]	; (8008770 <prvCheckTasksWaitingTermination+0x54>)
 800874c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800874e:	f000 fddb 	bl	8009308 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f80e 	bl	8008774 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008758:	4b05      	ldr	r3, [pc, #20]	; (8008770 <prvCheckTasksWaitingTermination+0x54>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e1      	bne.n	8008724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	24000bfc 	.word	0x24000bfc
 800876c:	24000c28 	.word	0x24000c28
 8008770:	24000c10 	.word	0x24000c10

08008774 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008782:	2b00      	cmp	r3, #0
 8008784:	d108      	bne.n	8008798 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	4618      	mov	r0, r3
 800878c:	f000 ff6a 	bl	8009664 <vPortFree>
				vPortFree( pxTCB );
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 ff67 	bl	8009664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008796:	e017      	b.n	80087c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d103      	bne.n	80087aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 ff5e 	bl	8009664 <vPortFree>
	}
 80087a8:	e00e      	b.n	80087c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d009      	beq.n	80087c8 <prvDeleteTCB+0x54>
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	e7fe      	b.n	80087c6 <prvDeleteTCB+0x52>
	}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <prvResetNextTaskUnblockTime+0x38>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <prvResetNextTaskUnblockTime+0x3c>)
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087e8:	e008      	b.n	80087fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <prvResetNextTaskUnblockTime+0x38>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	4a04      	ldr	r2, [pc, #16]	; (800880c <prvResetNextTaskUnblockTime+0x3c>)
 80087fa:	6013      	str	r3, [r2, #0]
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	24000be0 	.word	0x24000be0
 800880c:	24000c48 	.word	0x24000c48

08008810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <xTaskGetSchedulerState+0x34>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800881e:	2301      	movs	r3, #1
 8008820:	607b      	str	r3, [r7, #4]
 8008822:	e008      	b.n	8008836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008824:	4b08      	ldr	r3, [pc, #32]	; (8008848 <xTaskGetSchedulerState+0x38>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800882c:	2302      	movs	r3, #2
 800882e:	607b      	str	r3, [r7, #4]
 8008830:	e001      	b.n	8008836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008836:	687b      	ldr	r3, [r7, #4]
	}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	24000c34 	.word	0x24000c34
 8008848:	24000c50 	.word	0x24000c50

0800884c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d054      	beq.n	800890c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008862:	4b2d      	ldr	r3, [pc, #180]	; (8008918 <xTaskPriorityDisinherit+0xcc>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	429a      	cmp	r2, r3
 800886a:	d009      	beq.n	8008880 <xTaskPriorityDisinherit+0x34>
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	e7fe      	b.n	800887e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008884:	2b00      	cmp	r3, #0
 8008886:	d109      	bne.n	800889c <xTaskPriorityDisinherit+0x50>
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	e7fe      	b.n	800889a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a0:	1e5a      	subs	r2, r3, #1
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d02c      	beq.n	800890c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d128      	bne.n	800890c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3304      	adds	r3, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fca0 	bl	8007204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088dc:	4b0f      	ldr	r3, [pc, #60]	; (800891c <xTaskPriorityDisinherit+0xd0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d903      	bls.n	80088ec <xTaskPriorityDisinherit+0xa0>
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	4a0c      	ldr	r2, [pc, #48]	; (800891c <xTaskPriorityDisinherit+0xd0>)
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4a09      	ldr	r2, [pc, #36]	; (8008920 <xTaskPriorityDisinherit+0xd4>)
 80088fa:	441a      	add	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3304      	adds	r3, #4
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fe fc21 	bl	800714a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800890c:	697b      	ldr	r3, [r7, #20]
	}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	24000754 	.word	0x24000754
 800891c:	24000c30 	.word	0x24000c30
 8008920:	24000758 	.word	0x24000758

08008924 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800892e:	4b21      	ldr	r3, [pc, #132]	; (80089b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008934:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fc62 	bl	8007204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008946:	d10a      	bne.n	800895e <prvAddCurrentTaskToDelayedList+0x3a>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d007      	beq.n	800895e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4819      	ldr	r0, [pc, #100]	; (80089bc <prvAddCurrentTaskToDelayedList+0x98>)
 8008958:	f7fe fbf7 	bl	800714a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800895c:	e026      	b.n	80089ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	429a      	cmp	r2, r3
 8008974:	d209      	bcs.n	800898a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008976:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3304      	adds	r3, #4
 8008980:	4619      	mov	r1, r3
 8008982:	4610      	mov	r0, r2
 8008984:	f7fe fc05 	bl	8007192 <vListInsert>
}
 8008988:	e010      	b.n	80089ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7fe fbfb 	bl	8007192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d202      	bcs.n	80089ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089a6:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6013      	str	r3, [r2, #0]
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	24000c2c 	.word	0x24000c2c
 80089b8:	24000754 	.word	0x24000754
 80089bc:	24000c14 	.word	0x24000c14
 80089c0:	24000be4 	.word	0x24000be4
 80089c4:	24000be0 	.word	0x24000be0
 80089c8:	24000c48 	.word	0x24000c48

080089cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089d6:	f000 faff 	bl	8008fd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089da:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <xTimerCreateTimerTask+0x80>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d021      	beq.n	8008a26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089ea:	1d3a      	adds	r2, r7, #4
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	f107 030c 	add.w	r3, r7, #12
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fb61 	bl	80070bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	9202      	str	r2, [sp, #8]
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	2302      	movs	r3, #2
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	460a      	mov	r2, r1
 8008a0c:	4910      	ldr	r1, [pc, #64]	; (8008a50 <xTimerCreateTimerTask+0x84>)
 8008a0e:	4811      	ldr	r0, [pc, #68]	; (8008a54 <xTimerCreateTimerTask+0x88>)
 8008a10:	f7ff f8f6 	bl	8007c00 <xTaskCreateStatic>
 8008a14:	4602      	mov	r2, r0
 8008a16:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <xTimerCreateTimerTask+0x8c>)
 8008a18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a1a:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <xTimerCreateTimerTask+0x8c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a22:	2301      	movs	r3, #1
 8008a24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <xTimerCreateTimerTask+0x74>
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e7fe      	b.n	8008a3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008a40:	697b      	ldr	r3, [r7, #20]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	24000c84 	.word	0x24000c84
 8008a50:	0800a24c 	.word	0x0800a24c
 8008a54:	08008b8d 	.word	0x08008b8d
 8008a58:	24000c88 	.word	0x24000c88

08008a5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <xTimerGenericCommand+0x2c>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	623b      	str	r3, [r7, #32]
 8008a86:	e7fe      	b.n	8008a86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a88:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <xTimerGenericCommand+0x94>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d02a      	beq.n	8008ae6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b05      	cmp	r3, #5
 8008aa0:	dc18      	bgt.n	8008ad4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008aa2:	f7ff feb5 	bl	8008810 <xTaskGetSchedulerState>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d109      	bne.n	8008ac0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <xTimerGenericCommand+0x94>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	f107 0110 	add.w	r1, r7, #16
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ab8:	f7fe fccc 	bl	8007454 <xQueueGenericSend>
 8008abc:	6278      	str	r0, [r7, #36]	; 0x24
 8008abe:	e012      	b.n	8008ae6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <xTimerGenericCommand+0x94>)
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	f107 0110 	add.w	r1, r7, #16
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2200      	movs	r2, #0
 8008acc:	f7fe fcc2 	bl	8007454 <xQueueGenericSend>
 8008ad0:	6278      	str	r0, [r7, #36]	; 0x24
 8008ad2:	e008      	b.n	8008ae6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <xTimerGenericCommand+0x94>)
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	f107 0110 	add.w	r1, r7, #16
 8008adc:	2300      	movs	r3, #0
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	f7fe fdb2 	bl	8007648 <xQueueGenericSendFromISR>
 8008ae4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3728      	adds	r7, #40	; 0x28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	24000c84 	.word	0x24000c84

08008af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afe:	4b22      	ldr	r3, [pc, #136]	; (8008b88 <prvProcessExpiredTimer+0x94>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fb79 	bl	8007204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d021      	beq.n	8008b64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	699a      	ldr	r2, [r3, #24]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	18d1      	adds	r1, r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	6978      	ldr	r0, [r7, #20]
 8008b2e:	f000 f8d1 	bl	8008cd4 <prvInsertTimerInActiveList>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01e      	beq.n	8008b76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	2100      	movs	r1, #0
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff ff8a 	bl	8008a5c <xTimerGenericCommand>
 8008b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d112      	bne.n	8008b76 <prvProcessExpiredTimer+0x82>
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	e7fe      	b.n	8008b62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b6a:	f023 0301 	bic.w	r3, r3, #1
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	6978      	ldr	r0, [r7, #20]
 8008b7c:	4798      	blx	r3
}
 8008b7e:	bf00      	nop
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	24000c7c 	.word	0x24000c7c

08008b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b94:	f107 0308 	add.w	r3, r7, #8
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f857 	bl	8008c4c <prvGetNextExpireTime>
 8008b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f803 	bl	8008bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008baa:	f000 f8d5 	bl	8008d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bae:	e7f1      	b.n	8008b94 <prvTimerTask+0x8>

08008bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bba:	f7ff fa57 	bl	800806c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f866 	bl	8008c94 <prvSampleTimeNow>
 8008bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d130      	bne.n	8008c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <prvProcessTimerOrBlockTask+0x3c>
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d806      	bhi.n	8008bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bde:	f7ff fa53 	bl	8008088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ff85 	bl	8008af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bea:	e024      	b.n	8008c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bf2:	4b13      	ldr	r3, [pc, #76]	; (8008c40 <prvProcessTimerOrBlockTask+0x90>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <prvProcessTimerOrBlockTask+0x50>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <prvProcessTimerOrBlockTask+0x52>
 8008c00:	2300      	movs	r3, #0
 8008c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <prvProcessTimerOrBlockTask+0x94>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7fe ffc1 	bl	8007b98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c16:	f7ff fa37 	bl	8008088 <xTaskResumeAll>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c20:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <prvProcessTimerOrBlockTask+0x98>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
}
 8008c30:	e001      	b.n	8008c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c32:	f7ff fa29 	bl	8008088 <xTaskResumeAll>
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	24000c80 	.word	0x24000c80
 8008c44:	24000c84 	.word	0x24000c84
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c54:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <prvGetNextExpireTime+0x44>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <prvGetNextExpireTime+0x16>
 8008c5e:	2201      	movs	r2, #1
 8008c60:	e000      	b.n	8008c64 <prvGetNextExpireTime+0x18>
 8008c62:	2200      	movs	r2, #0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <prvGetNextExpireTime+0x44>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e001      	b.n	8008c80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c80:	68fb      	ldr	r3, [r7, #12]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	24000c7c 	.word	0x24000c7c

08008c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c9c:	f7ff fa90 	bl	80081c0 <xTaskGetTickCount>
 8008ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <prvSampleTimeNow+0x3c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d205      	bcs.n	8008cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cac:	f000 f930 	bl	8008f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e002      	b.n	8008cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cbe:	4a04      	ldr	r2, [pc, #16]	; (8008cd0 <prvSampleTimeNow+0x3c>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	24000c8c 	.word	0x24000c8c

08008cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d812      	bhi.n	8008d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d302      	bcc.n	8008d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e01b      	b.n	8008d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d0e:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <prvInsertTimerInActiveList+0x7c>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f7fe fa3a 	bl	8007192 <vListInsert>
 8008d1e:	e012      	b.n	8008d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d206      	bcs.n	8008d36 <prvInsertTimerInActiveList+0x62>
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d302      	bcc.n	8008d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	e007      	b.n	8008d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <prvInsertTimerInActiveList+0x80>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f7fe fa26 	bl	8007192 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d46:	697b      	ldr	r3, [r7, #20]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	24000c80 	.word	0x24000c80
 8008d54:	24000c7c 	.word	0x24000c7c

08008d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	; 0x38
 8008d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d5e:	e0c6      	b.n	8008eee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da17      	bge.n	8008d96 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d66:	1d3b      	adds	r3, r7, #4
 8008d68:	3304      	adds	r3, #4
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <prvProcessReceivedCommands+0x2e>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	e7fe      	b.n	8008d84 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8c:	6850      	ldr	r0, [r2, #4]
 8008d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d90:	6892      	ldr	r2, [r2, #8]
 8008d92:	4611      	mov	r1, r2
 8008d94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f2c0 80a7 	blt.w	8008eec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	3304      	adds	r3, #4
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fa28 	bl	8007204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008db4:	463b      	mov	r3, r7
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff ff6c 	bl	8008c94 <prvSampleTimeNow>
 8008dbc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b09      	cmp	r3, #9
 8008dc2:	f200 8094 	bhi.w	8008eee <prvProcessReceivedCommands+0x196>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <prvProcessReceivedCommands+0x74>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008df5 	.word	0x08008df5
 8008dd8:	08008e67 	.word	0x08008e67
 8008ddc:	08008e7b 	.word	0x08008e7b
 8008de0:	08008ec3 	.word	0x08008ec3
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008df5 	.word	0x08008df5
 8008dec:	08008e67 	.word	0x08008e67
 8008df0:	08008e7b 	.word	0x08008e7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	18d1      	adds	r1, r2, r3
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e14:	f7ff ff5e 	bl	8008cd4 <prvInsertTimerInActiveList>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d067      	beq.n	8008eee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d05c      	beq.n	8008eee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	441a      	add	r2, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	2300      	movs	r3, #0
 8008e42:	2100      	movs	r1, #0
 8008e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e46:	f7ff fe09 	bl	8008a5c <xTimerGenericCommand>
 8008e4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d14d      	bne.n	8008eee <prvProcessReceivedCommands+0x196>
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	e7fe      	b.n	8008e64 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e6c:	f023 0301 	bic.w	r3, r3, #1
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e78:	e039      	b.n	8008eee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e80:	f043 0301 	orr.w	r3, r3, #1
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <prvProcessReceivedCommands+0x156>
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e7fe      	b.n	8008eac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb0:	699a      	ldr	r2, [r3, #24]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	18d1      	adds	r1, r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ebc:	f7ff ff0a 	bl	8008cd4 <prvInsertTimerInActiveList>
					break;
 8008ec0:	e015      	b.n	8008eee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed2:	f000 fbc7 	bl	8009664 <vPortFree>
 8008ed6:	e00a      	b.n	8008eee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ede:	f023 0301 	bic.w	r3, r3, #1
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008eea:	e000      	b.n	8008eee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008eec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <prvProcessReceivedCommands+0x1b4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	1d39      	adds	r1, r7, #4
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fc3a 	bl	8007770 <xQueueReceive>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f47f af2e 	bne.w	8008d60 <prvProcessReceivedCommands+0x8>
	}
}
 8008f04:	bf00      	nop
 8008f06:	3730      	adds	r7, #48	; 0x30
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	24000c84 	.word	0x24000c84

08008f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f16:	e047      	b.n	8008fa8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f18:	4b2d      	ldr	r3, [pc, #180]	; (8008fd0 <prvSwitchTimerLists+0xc0>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f22:	4b2b      	ldr	r3, [pc, #172]	; (8008fd0 <prvSwitchTimerLists+0xc0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe f967 	bl	8007204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d02d      	beq.n	8008fa8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4413      	add	r3, r2
 8008f54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d90e      	bls.n	8008f7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f6a:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <prvSwitchTimerLists+0xc0>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe f90c 	bl	8007192 <vListInsert>
 8008f7a:	e015      	b.n	8008fa8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2300      	movs	r3, #0
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	2100      	movs	r1, #0
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fd68 	bl	8008a5c <xTimerGenericCommand>
 8008f8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d109      	bne.n	8008fa8 <prvSwitchTimerLists+0x98>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	603b      	str	r3, [r7, #0]
 8008fa6:	e7fe      	b.n	8008fa6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fa8:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <prvSwitchTimerLists+0xc0>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1b2      	bne.n	8008f18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fb2:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <prvSwitchTimerLists+0xc0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fb8:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <prvSwitchTimerLists+0xc4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a04      	ldr	r2, [pc, #16]	; (8008fd0 <prvSwitchTimerLists+0xc0>)
 8008fbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fc0:	4a04      	ldr	r2, [pc, #16]	; (8008fd4 <prvSwitchTimerLists+0xc4>)
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	6013      	str	r3, [r2, #0]
}
 8008fc6:	bf00      	nop
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	24000c7c 	.word	0x24000c7c
 8008fd4:	24000c80 	.word	0x24000c80

08008fd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fde:	f000 f965 	bl	80092ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <prvCheckForValidListAndQueue+0x60>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d120      	bne.n	800902c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fea:	4814      	ldr	r0, [pc, #80]	; (800903c <prvCheckForValidListAndQueue+0x64>)
 8008fec:	f7fe f880 	bl	80070f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ff0:	4813      	ldr	r0, [pc, #76]	; (8009040 <prvCheckForValidListAndQueue+0x68>)
 8008ff2:	f7fe f87d 	bl	80070f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ff6:	4b13      	ldr	r3, [pc, #76]	; (8009044 <prvCheckForValidListAndQueue+0x6c>)
 8008ff8:	4a10      	ldr	r2, [pc, #64]	; (800903c <prvCheckForValidListAndQueue+0x64>)
 8008ffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ffc:	4b12      	ldr	r3, [pc, #72]	; (8009048 <prvCheckForValidListAndQueue+0x70>)
 8008ffe:	4a10      	ldr	r2, [pc, #64]	; (8009040 <prvCheckForValidListAndQueue+0x68>)
 8009000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009002:	2300      	movs	r3, #0
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4b11      	ldr	r3, [pc, #68]	; (800904c <prvCheckForValidListAndQueue+0x74>)
 8009008:	4a11      	ldr	r2, [pc, #68]	; (8009050 <prvCheckForValidListAndQueue+0x78>)
 800900a:	2110      	movs	r1, #16
 800900c:	200a      	movs	r0, #10
 800900e:	f7fe f98b 	bl	8007328 <xQueueGenericCreateStatic>
 8009012:	4602      	mov	r2, r0
 8009014:	4b08      	ldr	r3, [pc, #32]	; (8009038 <prvCheckForValidListAndQueue+0x60>)
 8009016:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <prvCheckForValidListAndQueue+0x60>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d005      	beq.n	800902c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <prvCheckForValidListAndQueue+0x60>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	490b      	ldr	r1, [pc, #44]	; (8009054 <prvCheckForValidListAndQueue+0x7c>)
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fd8e 	bl	8007b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800902c:	f000 f96c 	bl	8009308 <vPortExitCritical>
}
 8009030:	bf00      	nop
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	24000c84 	.word	0x24000c84
 800903c:	24000c54 	.word	0x24000c54
 8009040:	24000c68 	.word	0x24000c68
 8009044:	24000c7c 	.word	0x24000c7c
 8009048:	24000c80 	.word	0x24000c80
 800904c:	24000d30 	.word	0x24000d30
 8009050:	24000c90 	.word	0x24000c90
 8009054:	0800a254 	.word	0x0800a254

08009058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3b04      	subs	r3, #4
 8009068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3b04      	subs	r3, #4
 8009076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f023 0201 	bic.w	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b04      	subs	r3, #4
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009088:	4a0c      	ldr	r2, [pc, #48]	; (80090bc <pxPortInitialiseStack+0x64>)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b14      	subs	r3, #20
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3b04      	subs	r3, #4
 800909e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f06f 0202 	mvn.w	r2, #2
 80090a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3b20      	subs	r3, #32
 80090ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ae:	68fb      	ldr	r3, [r7, #12]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	080090c1 	.word	0x080090c1

080090c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <prvTaskExitError+0x50>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d2:	d009      	beq.n	80090e8 <prvTaskExitError+0x28>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e7fe      	b.n	80090e6 <prvTaskExitError+0x26>
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090fa:	bf00      	nop
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0fc      	beq.n	80090fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009102:	bf00      	nop
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	24000010 	.word	0x24000010
	...

08009120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <pxCurrentTCBConst2>)
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	6808      	ldr	r0, [r1, #0]
 8009126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	f380 8809 	msr	PSP, r0
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f380 8811 	msr	BASEPRI, r0
 800913a:	4770      	bx	lr
 800913c:	f3af 8000 	nop.w

08009140 <pxCurrentTCBConst2>:
 8009140:	24000754 	.word	0x24000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop

08009148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009148:	4808      	ldr	r0, [pc, #32]	; (800916c <prvPortStartFirstTask+0x24>)
 800914a:	6800      	ldr	r0, [r0, #0]
 800914c:	6800      	ldr	r0, [r0, #0]
 800914e:	f380 8808 	msr	MSP, r0
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8814 	msr	CONTROL, r0
 800915a:	b662      	cpsie	i
 800915c:	b661      	cpsie	f
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	df00      	svc	0
 8009168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800916a:	bf00      	nop
 800916c:	e000ed08 	.word	0xe000ed08

08009170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009176:	4b44      	ldr	r3, [pc, #272]	; (8009288 <xPortStartScheduler+0x118>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a44      	ldr	r2, [pc, #272]	; (800928c <xPortStartScheduler+0x11c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d109      	bne.n	8009194 <xPortStartScheduler+0x24>
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	e7fe      	b.n	8009192 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009194:	4b3c      	ldr	r3, [pc, #240]	; (8009288 <xPortStartScheduler+0x118>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a3d      	ldr	r2, [pc, #244]	; (8009290 <xPortStartScheduler+0x120>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d109      	bne.n	80091b2 <xPortStartScheduler+0x42>
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e7fe      	b.n	80091b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091b2:	4b38      	ldr	r3, [pc, #224]	; (8009294 <xPortStartScheduler+0x124>)
 80091b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	22ff      	movs	r2, #255	; 0xff
 80091c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	4b30      	ldr	r3, [pc, #192]	; (8009298 <xPortStartScheduler+0x128>)
 80091d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091da:	4b30      	ldr	r3, [pc, #192]	; (800929c <xPortStartScheduler+0x12c>)
 80091dc:	2207      	movs	r2, #7
 80091de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091e0:	e009      	b.n	80091f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80091e2:	4b2e      	ldr	r3, [pc, #184]	; (800929c <xPortStartScheduler+0x12c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	4a2c      	ldr	r2, [pc, #176]	; (800929c <xPortStartScheduler+0x12c>)
 80091ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fe:	2b80      	cmp	r3, #128	; 0x80
 8009200:	d0ef      	beq.n	80091e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009202:	4b26      	ldr	r3, [pc, #152]	; (800929c <xPortStartScheduler+0x12c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f1c3 0307 	rsb	r3, r3, #7
 800920a:	2b04      	cmp	r3, #4
 800920c:	d009      	beq.n	8009222 <xPortStartScheduler+0xb2>
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60bb      	str	r3, [r7, #8]
 8009220:	e7fe      	b.n	8009220 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009222:	4b1e      	ldr	r3, [pc, #120]	; (800929c <xPortStartScheduler+0x12c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	4a1c      	ldr	r2, [pc, #112]	; (800929c <xPortStartScheduler+0x12c>)
 800922a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800922c:	4b1b      	ldr	r3, [pc, #108]	; (800929c <xPortStartScheduler+0x12c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009234:	4a19      	ldr	r2, [pc, #100]	; (800929c <xPortStartScheduler+0x12c>)
 8009236:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	b2da      	uxtb	r2, r3
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009240:	4b17      	ldr	r3, [pc, #92]	; (80092a0 <xPortStartScheduler+0x130>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a16      	ldr	r2, [pc, #88]	; (80092a0 <xPortStartScheduler+0x130>)
 8009246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800924a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800924c:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <xPortStartScheduler+0x130>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a13      	ldr	r2, [pc, #76]	; (80092a0 <xPortStartScheduler+0x130>)
 8009252:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009256:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009258:	f000 f8d6 	bl	8009408 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800925c:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <xPortStartScheduler+0x134>)
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009262:	f000 f8f5 	bl	8009450 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <xPortStartScheduler+0x138>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a0f      	ldr	r2, [pc, #60]	; (80092a8 <xPortStartScheduler+0x138>)
 800926c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009270:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009272:	f7ff ff69 	bl	8009148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009276:	f7ff f86b 	bl	8008350 <vTaskSwitchContext>
	prvTaskExitError();
 800927a:	f7ff ff21 	bl	80090c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	e000ed00 	.word	0xe000ed00
 800928c:	410fc271 	.word	0x410fc271
 8009290:	410fc270 	.word	0x410fc270
 8009294:	e000e400 	.word	0xe000e400
 8009298:	24000d80 	.word	0x24000d80
 800929c:	24000d84 	.word	0x24000d84
 80092a0:	e000ed20 	.word	0xe000ed20
 80092a4:	24000010 	.word	0x24000010
 80092a8:	e000ef34 	.word	0xe000ef34

080092ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092c4:	4b0e      	ldr	r3, [pc, #56]	; (8009300 <vPortEnterCritical+0x54>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <vPortEnterCritical+0x54>)
 80092cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <vPortEnterCritical+0x54>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d10e      	bne.n	80092f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092d6:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <vPortEnterCritical+0x58>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <vPortEnterCritical+0x48>
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	e7fe      	b.n	80092f2 <vPortEnterCritical+0x46>
	}
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	24000010 	.word	0x24000010
 8009304:	e000ed04 	.word	0xe000ed04

08009308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <vPortExitCritical+0x4c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <vPortExitCritical+0x22>
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	607b      	str	r3, [r7, #4]
 8009328:	e7fe      	b.n	8009328 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800932a:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <vPortExitCritical+0x4c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3b01      	subs	r3, #1
 8009330:	4a08      	ldr	r2, [pc, #32]	; (8009354 <vPortExitCritical+0x4c>)
 8009332:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009334:	4b07      	ldr	r3, [pc, #28]	; (8009354 <vPortExitCritical+0x4c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d104      	bne.n	8009346 <vPortExitCritical+0x3e>
 800933c:	2300      	movs	r3, #0
 800933e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	24000010 	.word	0x24000010
	...

08009360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009360:	f3ef 8009 	mrs	r0, PSP
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <pxCurrentTCBConst>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	f01e 0f10 	tst.w	lr, #16
 8009370:	bf08      	it	eq
 8009372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	6010      	str	r0, [r2, #0]
 800937c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009384:	f380 8811 	msr	BASEPRI, r0
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f7fe ffde 	bl	8008350 <vTaskSwitchContext>
 8009394:	f04f 0000 	mov.w	r0, #0
 8009398:	f380 8811 	msr	BASEPRI, r0
 800939c:	bc09      	pop	{r0, r3}
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	6808      	ldr	r0, [r1, #0]
 80093a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a6:	f01e 0f10 	tst.w	lr, #16
 80093aa:	bf08      	it	eq
 80093ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093b0:	f380 8809 	msr	PSP, r0
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst>:
 80093c0:	24000754 	.word	0x24000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093e0:	f7fe fefe 	bl	80081e0 <xTaskIncrementTick>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093ea:	4b06      	ldr	r3, [pc, #24]	; (8009404 <xPortSysTickHandler+0x3c>)
 80093ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <vPortSetupTimerInterrupt+0x34>)
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009412:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <vPortSetupTimerInterrupt+0x38>)
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <vPortSetupTimerInterrupt+0x3c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <vPortSetupTimerInterrupt+0x40>)
 800941e:	fba2 2303 	umull	r2, r3, r2, r3
 8009422:	099b      	lsrs	r3, r3, #6
 8009424:	4a09      	ldr	r2, [pc, #36]	; (800944c <vPortSetupTimerInterrupt+0x44>)
 8009426:	3b01      	subs	r3, #1
 8009428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800942a:	4b04      	ldr	r3, [pc, #16]	; (800943c <vPortSetupTimerInterrupt+0x34>)
 800942c:	2207      	movs	r2, #7
 800942e:	601a      	str	r2, [r3, #0]
}
 8009430:	bf00      	nop
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	e000e010 	.word	0xe000e010
 8009440:	e000e018 	.word	0xe000e018
 8009444:	24000000 	.word	0x24000000
 8009448:	10624dd3 	.word	0x10624dd3
 800944c:	e000e014 	.word	0xe000e014

08009450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009460 <vPortEnableVFP+0x10>
 8009454:	6801      	ldr	r1, [r0, #0]
 8009456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800945a:	6001      	str	r1, [r0, #0]
 800945c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800945e:	bf00      	nop
 8009460:	e000ed88 	.word	0xe000ed88

08009464 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800946a:	f3ef 8305 	mrs	r3, IPSR
 800946e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b0f      	cmp	r3, #15
 8009474:	d913      	bls.n	800949e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009476:	4a16      	ldr	r2, [pc, #88]	; (80094d0 <vPortValidateInterruptPriority+0x6c>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009480:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <vPortValidateInterruptPriority+0x70>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	7afa      	ldrb	r2, [r7, #11]
 8009486:	429a      	cmp	r2, r3
 8009488:	d209      	bcs.n	800949e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	607b      	str	r3, [r7, #4]
 800949c:	e7fe      	b.n	800949c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800949e:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <vPortValidateInterruptPriority+0x74>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094a6:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <vPortValidateInterruptPriority+0x78>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d909      	bls.n	80094c2 <vPortValidateInterruptPriority+0x5e>
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	e7fe      	b.n	80094c0 <vPortValidateInterruptPriority+0x5c>
	}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000e3f0 	.word	0xe000e3f0
 80094d4:	24000d80 	.word	0x24000d80
 80094d8:	e000ed0c 	.word	0xe000ed0c
 80094dc:	24000d84 	.word	0x24000d84

080094e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094e8:	2300      	movs	r3, #0
 80094ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094ec:	f7fe fdbe 	bl	800806c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094f0:	4b57      	ldr	r3, [pc, #348]	; (8009650 <pvPortMalloc+0x170>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094f8:	f000 f90c 	bl	8009714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094fc:	4b55      	ldr	r3, [pc, #340]	; (8009654 <pvPortMalloc+0x174>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4013      	ands	r3, r2
 8009504:	2b00      	cmp	r3, #0
 8009506:	f040 808c 	bne.w	8009622 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01c      	beq.n	800954a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009510:	2208      	movs	r2, #8
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b00      	cmp	r3, #0
 8009520:	d013      	beq.n	800954a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f023 0307 	bic.w	r3, r3, #7
 8009528:	3308      	adds	r3, #8
 800952a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b00      	cmp	r3, #0
 8009534:	d009      	beq.n	800954a <pvPortMalloc+0x6a>
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e7fe      	b.n	8009548 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d068      	beq.n	8009622 <pvPortMalloc+0x142>
 8009550:	4b41      	ldr	r3, [pc, #260]	; (8009658 <pvPortMalloc+0x178>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	429a      	cmp	r2, r3
 8009558:	d863      	bhi.n	8009622 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800955a:	4b40      	ldr	r3, [pc, #256]	; (800965c <pvPortMalloc+0x17c>)
 800955c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800955e:	4b3f      	ldr	r3, [pc, #252]	; (800965c <pvPortMalloc+0x17c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009564:	e004      	b.n	8009570 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d903      	bls.n	8009582 <pvPortMalloc+0xa2>
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f1      	bne.n	8009566 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009582:	4b33      	ldr	r3, [pc, #204]	; (8009650 <pvPortMalloc+0x170>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009588:	429a      	cmp	r2, r3
 800958a:	d04a      	beq.n	8009622 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2208      	movs	r2, #8
 8009592:	4413      	add	r3, r2
 8009594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	1ad2      	subs	r2, r2, r3
 80095a6:	2308      	movs	r3, #8
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d91e      	bls.n	80095ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <pvPortMalloc+0xf4>
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	e7fe      	b.n	80095d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095e6:	69b8      	ldr	r0, [r7, #24]
 80095e8:	f000 f8f6 	bl	80097d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095ec:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <pvPortMalloc+0x178>)
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	4a18      	ldr	r2, [pc, #96]	; (8009658 <pvPortMalloc+0x178>)
 80095f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095fa:	4b17      	ldr	r3, [pc, #92]	; (8009658 <pvPortMalloc+0x178>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b18      	ldr	r3, [pc, #96]	; (8009660 <pvPortMalloc+0x180>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d203      	bcs.n	800960e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009606:	4b14      	ldr	r3, [pc, #80]	; (8009658 <pvPortMalloc+0x178>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a15      	ldr	r2, [pc, #84]	; (8009660 <pvPortMalloc+0x180>)
 800960c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	4b10      	ldr	r3, [pc, #64]	; (8009654 <pvPortMalloc+0x174>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	431a      	orrs	r2, r3
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009622:	f7fe fd31 	bl	8008088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <pvPortMalloc+0x164>
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	e7fe      	b.n	8009642 <pvPortMalloc+0x162>
	return pvReturn;
 8009644:	69fb      	ldr	r3, [r7, #28]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3728      	adds	r7, #40	; 0x28
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	24004990 	.word	0x24004990
 8009654:	2400499c 	.word	0x2400499c
 8009658:	24004994 	.word	0x24004994
 800965c:	24004988 	.word	0x24004988
 8009660:	24004998 	.word	0x24004998

08009664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d046      	beq.n	8009704 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009676:	2308      	movs	r3, #8
 8009678:	425b      	negs	r3, r3
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4413      	add	r3, r2
 800967e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	4b20      	ldr	r3, [pc, #128]	; (800970c <vPortFree+0xa8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4013      	ands	r3, r2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d109      	bne.n	80096a6 <vPortFree+0x42>
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	e7fe      	b.n	80096a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d009      	beq.n	80096c2 <vPortFree+0x5e>
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60bb      	str	r3, [r7, #8]
 80096c0:	e7fe      	b.n	80096c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	4b11      	ldr	r3, [pc, #68]	; (800970c <vPortFree+0xa8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4013      	ands	r3, r2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d019      	beq.n	8009704 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d115      	bne.n	8009704 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b0b      	ldr	r3, [pc, #44]	; (800970c <vPortFree+0xa8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	401a      	ands	r2, r3
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096e8:	f7fe fcc0 	bl	800806c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <vPortFree+0xac>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	4a06      	ldr	r2, [pc, #24]	; (8009710 <vPortFree+0xac>)
 80096f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096fa:	6938      	ldr	r0, [r7, #16]
 80096fc:	f000 f86c 	bl	80097d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009700:	f7fe fcc2 	bl	8008088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009704:	bf00      	nop
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	2400499c 	.word	0x2400499c
 8009710:	24004994 	.word	0x24004994

08009714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800971a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800971e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009720:	4b27      	ldr	r3, [pc, #156]	; (80097c0 <prvHeapInit+0xac>)
 8009722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3307      	adds	r3, #7
 8009732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	4a1f      	ldr	r2, [pc, #124]	; (80097c0 <prvHeapInit+0xac>)
 8009744:	4413      	add	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800974c:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <prvHeapInit+0xb0>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <prvHeapInit+0xb0>)
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4413      	add	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009760:	2208      	movs	r2, #8
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	1a9b      	subs	r3, r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0307 	bic.w	r3, r3, #7
 800976e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a15      	ldr	r2, [pc, #84]	; (80097c8 <prvHeapInit+0xb4>)
 8009774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009776:	4b14      	ldr	r3, [pc, #80]	; (80097c8 <prvHeapInit+0xb4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <prvHeapInit+0xb4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	1ad2      	subs	r2, r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009794:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <prvHeapInit+0xb4>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a0a      	ldr	r2, [pc, #40]	; (80097cc <prvHeapInit+0xb8>)
 80097a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <prvHeapInit+0xbc>)
 80097aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <prvHeapInit+0xc0>)
 80097ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097b2:	601a      	str	r2, [r3, #0]
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	24000d88 	.word	0x24000d88
 80097c4:	24004988 	.word	0x24004988
 80097c8:	24004990 	.word	0x24004990
 80097cc:	24004998 	.word	0x24004998
 80097d0:	24004994 	.word	0x24004994
 80097d4:	2400499c 	.word	0x2400499c

080097d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097e0:	4b28      	ldr	r3, [pc, #160]	; (8009884 <prvInsertBlockIntoFreeList+0xac>)
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e002      	b.n	80097ec <prvInsertBlockIntoFreeList+0x14>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d8f7      	bhi.n	80097e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	4413      	add	r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d108      	bne.n	800981a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	441a      	add	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	441a      	add	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d118      	bne.n	8009860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b15      	ldr	r3, [pc, #84]	; (8009888 <prvInsertBlockIntoFreeList+0xb0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d00d      	beq.n	8009856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	441a      	add	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e008      	b.n	8009868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <prvInsertBlockIntoFreeList+0xb0>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e003      	b.n	8009868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d002      	beq.n	8009876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	24004988 	.word	0x24004988
 8009888:	24004990 	.word	0x24004990

0800988c <__errno>:
 800988c:	4b01      	ldr	r3, [pc, #4]	; (8009894 <__errno+0x8>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	24000014 	.word	0x24000014

08009898 <__libc_init_array>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	4e0d      	ldr	r6, [pc, #52]	; (80098d0 <__libc_init_array+0x38>)
 800989c:	4c0d      	ldr	r4, [pc, #52]	; (80098d4 <__libc_init_array+0x3c>)
 800989e:	1ba4      	subs	r4, r4, r6
 80098a0:	10a4      	asrs	r4, r4, #2
 80098a2:	2500      	movs	r5, #0
 80098a4:	42a5      	cmp	r5, r4
 80098a6:	d109      	bne.n	80098bc <__libc_init_array+0x24>
 80098a8:	4e0b      	ldr	r6, [pc, #44]	; (80098d8 <__libc_init_array+0x40>)
 80098aa:	4c0c      	ldr	r4, [pc, #48]	; (80098dc <__libc_init_array+0x44>)
 80098ac:	f000 fc94 	bl	800a1d8 <_init>
 80098b0:	1ba4      	subs	r4, r4, r6
 80098b2:	10a4      	asrs	r4, r4, #2
 80098b4:	2500      	movs	r5, #0
 80098b6:	42a5      	cmp	r5, r4
 80098b8:	d105      	bne.n	80098c6 <__libc_init_array+0x2e>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098c0:	4798      	blx	r3
 80098c2:	3501      	adds	r5, #1
 80098c4:	e7ee      	b.n	80098a4 <__libc_init_array+0xc>
 80098c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098ca:	4798      	blx	r3
 80098cc:	3501      	adds	r5, #1
 80098ce:	e7f2      	b.n	80098b6 <__libc_init_array+0x1e>
 80098d0:	0800a320 	.word	0x0800a320
 80098d4:	0800a320 	.word	0x0800a320
 80098d8:	0800a320 	.word	0x0800a320
 80098dc:	0800a324 	.word	0x0800a324

080098e0 <memcpy>:
 80098e0:	b510      	push	{r4, lr}
 80098e2:	1e43      	subs	r3, r0, #1
 80098e4:	440a      	add	r2, r1
 80098e6:	4291      	cmp	r1, r2
 80098e8:	d100      	bne.n	80098ec <memcpy+0xc>
 80098ea:	bd10      	pop	{r4, pc}
 80098ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098f4:	e7f7      	b.n	80098e6 <memcpy+0x6>

080098f6 <memset>:
 80098f6:	4402      	add	r2, r0
 80098f8:	4603      	mov	r3, r0
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d100      	bne.n	8009900 <memset+0xa>
 80098fe:	4770      	bx	lr
 8009900:	f803 1b01 	strb.w	r1, [r3], #1
 8009904:	e7f9      	b.n	80098fa <memset+0x4>
	...

08009908 <_puts_r>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	460e      	mov	r6, r1
 800990c:	4605      	mov	r5, r0
 800990e:	b118      	cbz	r0, 8009918 <_puts_r+0x10>
 8009910:	6983      	ldr	r3, [r0, #24]
 8009912:	b90b      	cbnz	r3, 8009918 <_puts_r+0x10>
 8009914:	f000 fa0c 	bl	8009d30 <__sinit>
 8009918:	69ab      	ldr	r3, [r5, #24]
 800991a:	68ac      	ldr	r4, [r5, #8]
 800991c:	b913      	cbnz	r3, 8009924 <_puts_r+0x1c>
 800991e:	4628      	mov	r0, r5
 8009920:	f000 fa06 	bl	8009d30 <__sinit>
 8009924:	4b23      	ldr	r3, [pc, #140]	; (80099b4 <_puts_r+0xac>)
 8009926:	429c      	cmp	r4, r3
 8009928:	d117      	bne.n	800995a <_puts_r+0x52>
 800992a:	686c      	ldr	r4, [r5, #4]
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	071b      	lsls	r3, r3, #28
 8009930:	d51d      	bpl.n	800996e <_puts_r+0x66>
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	b1db      	cbz	r3, 800996e <_puts_r+0x66>
 8009936:	3e01      	subs	r6, #1
 8009938:	68a3      	ldr	r3, [r4, #8]
 800993a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800993e:	3b01      	subs	r3, #1
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	b9e9      	cbnz	r1, 8009980 <_puts_r+0x78>
 8009944:	2b00      	cmp	r3, #0
 8009946:	da2e      	bge.n	80099a6 <_puts_r+0x9e>
 8009948:	4622      	mov	r2, r4
 800994a:	210a      	movs	r1, #10
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f83f 	bl	80099d0 <__swbuf_r>
 8009952:	3001      	adds	r0, #1
 8009954:	d011      	beq.n	800997a <_puts_r+0x72>
 8009956:	200a      	movs	r0, #10
 8009958:	e011      	b.n	800997e <_puts_r+0x76>
 800995a:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <_puts_r+0xb0>)
 800995c:	429c      	cmp	r4, r3
 800995e:	d101      	bne.n	8009964 <_puts_r+0x5c>
 8009960:	68ac      	ldr	r4, [r5, #8]
 8009962:	e7e3      	b.n	800992c <_puts_r+0x24>
 8009964:	4b15      	ldr	r3, [pc, #84]	; (80099bc <_puts_r+0xb4>)
 8009966:	429c      	cmp	r4, r3
 8009968:	bf08      	it	eq
 800996a:	68ec      	ldreq	r4, [r5, #12]
 800996c:	e7de      	b.n	800992c <_puts_r+0x24>
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f87f 	bl	8009a74 <__swsetup_r>
 8009976:	2800      	cmp	r0, #0
 8009978:	d0dd      	beq.n	8009936 <_puts_r+0x2e>
 800997a:	f04f 30ff 	mov.w	r0, #4294967295
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	2b00      	cmp	r3, #0
 8009982:	da04      	bge.n	800998e <_puts_r+0x86>
 8009984:	69a2      	ldr	r2, [r4, #24]
 8009986:	429a      	cmp	r2, r3
 8009988:	dc06      	bgt.n	8009998 <_puts_r+0x90>
 800998a:	290a      	cmp	r1, #10
 800998c:	d004      	beq.n	8009998 <_puts_r+0x90>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	6022      	str	r2, [r4, #0]
 8009994:	7019      	strb	r1, [r3, #0]
 8009996:	e7cf      	b.n	8009938 <_puts_r+0x30>
 8009998:	4622      	mov	r2, r4
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f818 	bl	80099d0 <__swbuf_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d1c9      	bne.n	8009938 <_puts_r+0x30>
 80099a4:	e7e9      	b.n	800997a <_puts_r+0x72>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	200a      	movs	r0, #10
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	7018      	strb	r0, [r3, #0]
 80099b0:	e7e5      	b.n	800997e <_puts_r+0x76>
 80099b2:	bf00      	nop
 80099b4:	0800a2d8 	.word	0x0800a2d8
 80099b8:	0800a2f8 	.word	0x0800a2f8
 80099bc:	0800a2b8 	.word	0x0800a2b8

080099c0 <puts>:
 80099c0:	4b02      	ldr	r3, [pc, #8]	; (80099cc <puts+0xc>)
 80099c2:	4601      	mov	r1, r0
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f7ff bf9f 	b.w	8009908 <_puts_r>
 80099ca:	bf00      	nop
 80099cc:	24000014 	.word	0x24000014

080099d0 <__swbuf_r>:
 80099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d2:	460e      	mov	r6, r1
 80099d4:	4614      	mov	r4, r2
 80099d6:	4605      	mov	r5, r0
 80099d8:	b118      	cbz	r0, 80099e2 <__swbuf_r+0x12>
 80099da:	6983      	ldr	r3, [r0, #24]
 80099dc:	b90b      	cbnz	r3, 80099e2 <__swbuf_r+0x12>
 80099de:	f000 f9a7 	bl	8009d30 <__sinit>
 80099e2:	4b21      	ldr	r3, [pc, #132]	; (8009a68 <__swbuf_r+0x98>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d12a      	bne.n	8009a3e <__swbuf_r+0x6e>
 80099e8:	686c      	ldr	r4, [r5, #4]
 80099ea:	69a3      	ldr	r3, [r4, #24]
 80099ec:	60a3      	str	r3, [r4, #8]
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	071a      	lsls	r2, r3, #28
 80099f2:	d52e      	bpl.n	8009a52 <__swbuf_r+0x82>
 80099f4:	6923      	ldr	r3, [r4, #16]
 80099f6:	b363      	cbz	r3, 8009a52 <__swbuf_r+0x82>
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	6820      	ldr	r0, [r4, #0]
 80099fc:	1ac0      	subs	r0, r0, r3
 80099fe:	6963      	ldr	r3, [r4, #20]
 8009a00:	b2f6      	uxtb	r6, r6
 8009a02:	4283      	cmp	r3, r0
 8009a04:	4637      	mov	r7, r6
 8009a06:	dc04      	bgt.n	8009a12 <__swbuf_r+0x42>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 f926 	bl	8009c5c <_fflush_r>
 8009a10:	bb28      	cbnz	r0, 8009a5e <__swbuf_r+0x8e>
 8009a12:	68a3      	ldr	r3, [r4, #8]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	60a3      	str	r3, [r4, #8]
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	701e      	strb	r6, [r3, #0]
 8009a20:	6963      	ldr	r3, [r4, #20]
 8009a22:	3001      	adds	r0, #1
 8009a24:	4283      	cmp	r3, r0
 8009a26:	d004      	beq.n	8009a32 <__swbuf_r+0x62>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	07db      	lsls	r3, r3, #31
 8009a2c:	d519      	bpl.n	8009a62 <__swbuf_r+0x92>
 8009a2e:	2e0a      	cmp	r6, #10
 8009a30:	d117      	bne.n	8009a62 <__swbuf_r+0x92>
 8009a32:	4621      	mov	r1, r4
 8009a34:	4628      	mov	r0, r5
 8009a36:	f000 f911 	bl	8009c5c <_fflush_r>
 8009a3a:	b190      	cbz	r0, 8009a62 <__swbuf_r+0x92>
 8009a3c:	e00f      	b.n	8009a5e <__swbuf_r+0x8e>
 8009a3e:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <__swbuf_r+0x9c>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d101      	bne.n	8009a48 <__swbuf_r+0x78>
 8009a44:	68ac      	ldr	r4, [r5, #8]
 8009a46:	e7d0      	b.n	80099ea <__swbuf_r+0x1a>
 8009a48:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <__swbuf_r+0xa0>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	bf08      	it	eq
 8009a4e:	68ec      	ldreq	r4, [r5, #12]
 8009a50:	e7cb      	b.n	80099ea <__swbuf_r+0x1a>
 8009a52:	4621      	mov	r1, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 f80d 	bl	8009a74 <__swsetup_r>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0cc      	beq.n	80099f8 <__swbuf_r+0x28>
 8009a5e:	f04f 37ff 	mov.w	r7, #4294967295
 8009a62:	4638      	mov	r0, r7
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800a2d8 	.word	0x0800a2d8
 8009a6c:	0800a2f8 	.word	0x0800a2f8
 8009a70:	0800a2b8 	.word	0x0800a2b8

08009a74 <__swsetup_r>:
 8009a74:	4b32      	ldr	r3, [pc, #200]	; (8009b40 <__swsetup_r+0xcc>)
 8009a76:	b570      	push	{r4, r5, r6, lr}
 8009a78:	681d      	ldr	r5, [r3, #0]
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	b125      	cbz	r5, 8009a8a <__swsetup_r+0x16>
 8009a80:	69ab      	ldr	r3, [r5, #24]
 8009a82:	b913      	cbnz	r3, 8009a8a <__swsetup_r+0x16>
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 f953 	bl	8009d30 <__sinit>
 8009a8a:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <__swsetup_r+0xd0>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	d10f      	bne.n	8009ab0 <__swsetup_r+0x3c>
 8009a90:	686c      	ldr	r4, [r5, #4]
 8009a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	0715      	lsls	r5, r2, #28
 8009a9a:	d42c      	bmi.n	8009af6 <__swsetup_r+0x82>
 8009a9c:	06d0      	lsls	r0, r2, #27
 8009a9e:	d411      	bmi.n	8009ac4 <__swsetup_r+0x50>
 8009aa0:	2209      	movs	r2, #9
 8009aa2:	6032      	str	r2, [r6, #0]
 8009aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009aae:	e03e      	b.n	8009b2e <__swsetup_r+0xba>
 8009ab0:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <__swsetup_r+0xd4>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <__swsetup_r+0x46>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7eb      	b.n	8009a92 <__swsetup_r+0x1e>
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <__swsetup_r+0xd8>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7e6      	b.n	8009a92 <__swsetup_r+0x1e>
 8009ac4:	0751      	lsls	r1, r2, #29
 8009ac6:	d512      	bpl.n	8009aee <__swsetup_r+0x7a>
 8009ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aca:	b141      	cbz	r1, 8009ade <__swsetup_r+0x6a>
 8009acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d002      	beq.n	8009ada <__swsetup_r+0x66>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 fa19 	bl	8009f0c <_free_r>
 8009ada:	2300      	movs	r3, #0
 8009adc:	6363      	str	r3, [r4, #52]	; 0x34
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6063      	str	r3, [r4, #4]
 8009aea:	6923      	ldr	r3, [r4, #16]
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f043 0308 	orr.w	r3, r3, #8
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	b94b      	cbnz	r3, 8009b0e <__swsetup_r+0x9a>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b04:	d003      	beq.n	8009b0e <__swsetup_r+0x9a>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 f9bf 	bl	8009e8c <__smakebuf_r>
 8009b0e:	89a2      	ldrh	r2, [r4, #12]
 8009b10:	f012 0301 	ands.w	r3, r2, #1
 8009b14:	d00c      	beq.n	8009b30 <__swsetup_r+0xbc>
 8009b16:	2300      	movs	r3, #0
 8009b18:	60a3      	str	r3, [r4, #8]
 8009b1a:	6963      	ldr	r3, [r4, #20]
 8009b1c:	425b      	negs	r3, r3
 8009b1e:	61a3      	str	r3, [r4, #24]
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	b953      	cbnz	r3, 8009b3a <__swsetup_r+0xc6>
 8009b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009b2c:	d1ba      	bne.n	8009aa4 <__swsetup_r+0x30>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	0792      	lsls	r2, r2, #30
 8009b32:	bf58      	it	pl
 8009b34:	6963      	ldrpl	r3, [r4, #20]
 8009b36:	60a3      	str	r3, [r4, #8]
 8009b38:	e7f2      	b.n	8009b20 <__swsetup_r+0xac>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e7f7      	b.n	8009b2e <__swsetup_r+0xba>
 8009b3e:	bf00      	nop
 8009b40:	24000014 	.word	0x24000014
 8009b44:	0800a2d8 	.word	0x0800a2d8
 8009b48:	0800a2f8 	.word	0x0800a2f8
 8009b4c:	0800a2b8 	.word	0x0800a2b8

08009b50 <__sflush_r>:
 8009b50:	898a      	ldrh	r2, [r1, #12]
 8009b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	4605      	mov	r5, r0
 8009b58:	0710      	lsls	r0, r2, #28
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	d458      	bmi.n	8009c10 <__sflush_r+0xc0>
 8009b5e:	684b      	ldr	r3, [r1, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dc05      	bgt.n	8009b70 <__sflush_r+0x20>
 8009b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dc02      	bgt.n	8009b70 <__sflush_r+0x20>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d0f9      	beq.n	8009b6a <__sflush_r+0x1a>
 8009b76:	2300      	movs	r3, #0
 8009b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b7c:	682f      	ldr	r7, [r5, #0]
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	d032      	beq.n	8009bea <__sflush_r+0x9a>
 8009b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	075a      	lsls	r2, r3, #29
 8009b8a:	d505      	bpl.n	8009b98 <__sflush_r+0x48>
 8009b8c:	6863      	ldr	r3, [r4, #4]
 8009b8e:	1ac0      	subs	r0, r0, r3
 8009b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b92:	b10b      	cbz	r3, 8009b98 <__sflush_r+0x48>
 8009b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b96:	1ac0      	subs	r0, r0, r3
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b9e:	6a21      	ldr	r1, [r4, #32]
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b0      	blx	r6
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	d106      	bne.n	8009bb8 <__sflush_r+0x68>
 8009baa:	6829      	ldr	r1, [r5, #0]
 8009bac:	291d      	cmp	r1, #29
 8009bae:	d848      	bhi.n	8009c42 <__sflush_r+0xf2>
 8009bb0:	4a29      	ldr	r2, [pc, #164]	; (8009c58 <__sflush_r+0x108>)
 8009bb2:	40ca      	lsrs	r2, r1
 8009bb4:	07d6      	lsls	r6, r2, #31
 8009bb6:	d544      	bpl.n	8009c42 <__sflush_r+0xf2>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	6062      	str	r2, [r4, #4]
 8009bbc:	04d9      	lsls	r1, r3, #19
 8009bbe:	6922      	ldr	r2, [r4, #16]
 8009bc0:	6022      	str	r2, [r4, #0]
 8009bc2:	d504      	bpl.n	8009bce <__sflush_r+0x7e>
 8009bc4:	1c42      	adds	r2, r0, #1
 8009bc6:	d101      	bne.n	8009bcc <__sflush_r+0x7c>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b903      	cbnz	r3, 8009bce <__sflush_r+0x7e>
 8009bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8009bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bd0:	602f      	str	r7, [r5, #0]
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d0c9      	beq.n	8009b6a <__sflush_r+0x1a>
 8009bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d002      	beq.n	8009be4 <__sflush_r+0x94>
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 f994 	bl	8009f0c <_free_r>
 8009be4:	2000      	movs	r0, #0
 8009be6:	6360      	str	r0, [r4, #52]	; 0x34
 8009be8:	e7c0      	b.n	8009b6c <__sflush_r+0x1c>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b0      	blx	r6
 8009bf0:	1c41      	adds	r1, r0, #1
 8009bf2:	d1c8      	bne.n	8009b86 <__sflush_r+0x36>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0c5      	beq.n	8009b86 <__sflush_r+0x36>
 8009bfa:	2b1d      	cmp	r3, #29
 8009bfc:	d001      	beq.n	8009c02 <__sflush_r+0xb2>
 8009bfe:	2b16      	cmp	r3, #22
 8009c00:	d101      	bne.n	8009c06 <__sflush_r+0xb6>
 8009c02:	602f      	str	r7, [r5, #0]
 8009c04:	e7b1      	b.n	8009b6a <__sflush_r+0x1a>
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	e7ad      	b.n	8009b6c <__sflush_r+0x1c>
 8009c10:	690f      	ldr	r7, [r1, #16]
 8009c12:	2f00      	cmp	r7, #0
 8009c14:	d0a9      	beq.n	8009b6a <__sflush_r+0x1a>
 8009c16:	0793      	lsls	r3, r2, #30
 8009c18:	680e      	ldr	r6, [r1, #0]
 8009c1a:	bf08      	it	eq
 8009c1c:	694b      	ldreq	r3, [r1, #20]
 8009c1e:	600f      	str	r7, [r1, #0]
 8009c20:	bf18      	it	ne
 8009c22:	2300      	movne	r3, #0
 8009c24:	eba6 0807 	sub.w	r8, r6, r7
 8009c28:	608b      	str	r3, [r1, #8]
 8009c2a:	f1b8 0f00 	cmp.w	r8, #0
 8009c2e:	dd9c      	ble.n	8009b6a <__sflush_r+0x1a>
 8009c30:	4643      	mov	r3, r8
 8009c32:	463a      	mov	r2, r7
 8009c34:	6a21      	ldr	r1, [r4, #32]
 8009c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c38:	4628      	mov	r0, r5
 8009c3a:	47b0      	blx	r6
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	dc06      	bgt.n	8009c4e <__sflush_r+0xfe>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c46:	81a3      	strh	r3, [r4, #12]
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e78e      	b.n	8009b6c <__sflush_r+0x1c>
 8009c4e:	4407      	add	r7, r0
 8009c50:	eba8 0800 	sub.w	r8, r8, r0
 8009c54:	e7e9      	b.n	8009c2a <__sflush_r+0xda>
 8009c56:	bf00      	nop
 8009c58:	20400001 	.word	0x20400001

08009c5c <_fflush_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	690b      	ldr	r3, [r1, #16]
 8009c60:	4605      	mov	r5, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	b1db      	cbz	r3, 8009c9e <_fflush_r+0x42>
 8009c66:	b118      	cbz	r0, 8009c70 <_fflush_r+0x14>
 8009c68:	6983      	ldr	r3, [r0, #24]
 8009c6a:	b90b      	cbnz	r3, 8009c70 <_fflush_r+0x14>
 8009c6c:	f000 f860 	bl	8009d30 <__sinit>
 8009c70:	4b0c      	ldr	r3, [pc, #48]	; (8009ca4 <_fflush_r+0x48>)
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d109      	bne.n	8009c8a <_fflush_r+0x2e>
 8009c76:	686c      	ldr	r4, [r5, #4]
 8009c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7c:	b17b      	cbz	r3, 8009c9e <_fflush_r+0x42>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c86:	f7ff bf63 	b.w	8009b50 <__sflush_r>
 8009c8a:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <_fflush_r+0x4c>)
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	d101      	bne.n	8009c94 <_fflush_r+0x38>
 8009c90:	68ac      	ldr	r4, [r5, #8]
 8009c92:	e7f1      	b.n	8009c78 <_fflush_r+0x1c>
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <_fflush_r+0x50>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	bf08      	it	eq
 8009c9a:	68ec      	ldreq	r4, [r5, #12]
 8009c9c:	e7ec      	b.n	8009c78 <_fflush_r+0x1c>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	bd38      	pop	{r3, r4, r5, pc}
 8009ca2:	bf00      	nop
 8009ca4:	0800a2d8 	.word	0x0800a2d8
 8009ca8:	0800a2f8 	.word	0x0800a2f8
 8009cac:	0800a2b8 	.word	0x0800a2b8

08009cb0 <std>:
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8009cba:	6083      	str	r3, [r0, #8]
 8009cbc:	8181      	strh	r1, [r0, #12]
 8009cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8009cc0:	81c2      	strh	r2, [r0, #14]
 8009cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cc6:	6183      	str	r3, [r0, #24]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	2208      	movs	r2, #8
 8009ccc:	305c      	adds	r0, #92	; 0x5c
 8009cce:	f7ff fe12 	bl	80098f6 <memset>
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <std+0x38>)
 8009cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <std+0x3c>)
 8009cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cda:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <std+0x40>)
 8009cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <std+0x44>)
 8009ce0:	6224      	str	r4, [r4, #32]
 8009ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	bf00      	nop
 8009ce8:	0800a07d 	.word	0x0800a07d
 8009cec:	0800a09f 	.word	0x0800a09f
 8009cf0:	0800a0d7 	.word	0x0800a0d7
 8009cf4:	0800a0fb 	.word	0x0800a0fb

08009cf8 <_cleanup_r>:
 8009cf8:	4901      	ldr	r1, [pc, #4]	; (8009d00 <_cleanup_r+0x8>)
 8009cfa:	f000 b885 	b.w	8009e08 <_fwalk_reent>
 8009cfe:	bf00      	nop
 8009d00:	08009c5d 	.word	0x08009c5d

08009d04 <__sfmoreglue>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	1e4a      	subs	r2, r1, #1
 8009d08:	2568      	movs	r5, #104	; 0x68
 8009d0a:	4355      	muls	r5, r2
 8009d0c:	460e      	mov	r6, r1
 8009d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d12:	f000 f949 	bl	8009fa8 <_malloc_r>
 8009d16:	4604      	mov	r4, r0
 8009d18:	b140      	cbz	r0, 8009d2c <__sfmoreglue+0x28>
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8009d20:	300c      	adds	r0, #12
 8009d22:	60a0      	str	r0, [r4, #8]
 8009d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d28:	f7ff fde5 	bl	80098f6 <memset>
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}

08009d30 <__sinit>:
 8009d30:	6983      	ldr	r3, [r0, #24]
 8009d32:	b510      	push	{r4, lr}
 8009d34:	4604      	mov	r4, r0
 8009d36:	bb33      	cbnz	r3, 8009d86 <__sinit+0x56>
 8009d38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009d3c:	6503      	str	r3, [r0, #80]	; 0x50
 8009d3e:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <__sinit+0x58>)
 8009d40:	4a12      	ldr	r2, [pc, #72]	; (8009d8c <__sinit+0x5c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6282      	str	r2, [r0, #40]	; 0x28
 8009d46:	4298      	cmp	r0, r3
 8009d48:	bf04      	itt	eq
 8009d4a:	2301      	moveq	r3, #1
 8009d4c:	6183      	streq	r3, [r0, #24]
 8009d4e:	f000 f81f 	bl	8009d90 <__sfp>
 8009d52:	6060      	str	r0, [r4, #4]
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 f81b 	bl	8009d90 <__sfp>
 8009d5a:	60a0      	str	r0, [r4, #8]
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 f817 	bl	8009d90 <__sfp>
 8009d62:	2200      	movs	r2, #0
 8009d64:	60e0      	str	r0, [r4, #12]
 8009d66:	2104      	movs	r1, #4
 8009d68:	6860      	ldr	r0, [r4, #4]
 8009d6a:	f7ff ffa1 	bl	8009cb0 <std>
 8009d6e:	2201      	movs	r2, #1
 8009d70:	2109      	movs	r1, #9
 8009d72:	68a0      	ldr	r0, [r4, #8]
 8009d74:	f7ff ff9c 	bl	8009cb0 <std>
 8009d78:	2202      	movs	r2, #2
 8009d7a:	2112      	movs	r1, #18
 8009d7c:	68e0      	ldr	r0, [r4, #12]
 8009d7e:	f7ff ff97 	bl	8009cb0 <std>
 8009d82:	2301      	movs	r3, #1
 8009d84:	61a3      	str	r3, [r4, #24]
 8009d86:	bd10      	pop	{r4, pc}
 8009d88:	0800a2b4 	.word	0x0800a2b4
 8009d8c:	08009cf9 	.word	0x08009cf9

08009d90 <__sfp>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <__sfp+0x70>)
 8009d94:	681e      	ldr	r6, [r3, #0]
 8009d96:	69b3      	ldr	r3, [r6, #24]
 8009d98:	4607      	mov	r7, r0
 8009d9a:	b913      	cbnz	r3, 8009da2 <__sfp+0x12>
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff ffc7 	bl	8009d30 <__sinit>
 8009da2:	3648      	adds	r6, #72	; 0x48
 8009da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	d503      	bpl.n	8009db4 <__sfp+0x24>
 8009dac:	6833      	ldr	r3, [r6, #0]
 8009dae:	b133      	cbz	r3, 8009dbe <__sfp+0x2e>
 8009db0:	6836      	ldr	r6, [r6, #0]
 8009db2:	e7f7      	b.n	8009da4 <__sfp+0x14>
 8009db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009db8:	b16d      	cbz	r5, 8009dd6 <__sfp+0x46>
 8009dba:	3468      	adds	r4, #104	; 0x68
 8009dbc:	e7f4      	b.n	8009da8 <__sfp+0x18>
 8009dbe:	2104      	movs	r1, #4
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ff9f 	bl	8009d04 <__sfmoreglue>
 8009dc6:	6030      	str	r0, [r6, #0]
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1f1      	bne.n	8009db0 <__sfp+0x20>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd6:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <__sfp+0x74>)
 8009dd8:	6665      	str	r5, [r4, #100]	; 0x64
 8009dda:	e9c4 5500 	strd	r5, r5, [r4]
 8009dde:	60a5      	str	r5, [r4, #8]
 8009de0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009de4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009de8:	2208      	movs	r2, #8
 8009dea:	4629      	mov	r1, r5
 8009dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009df0:	f7ff fd81 	bl	80098f6 <memset>
 8009df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dfc:	e7e9      	b.n	8009dd2 <__sfp+0x42>
 8009dfe:	bf00      	nop
 8009e00:	0800a2b4 	.word	0x0800a2b4
 8009e04:	ffff0001 	.word	0xffff0001

08009e08 <_fwalk_reent>:
 8009e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4689      	mov	r9, r1
 8009e10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e14:	2600      	movs	r6, #0
 8009e16:	b914      	cbnz	r4, 8009e1e <_fwalk_reent+0x16>
 8009e18:	4630      	mov	r0, r6
 8009e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009e22:	3f01      	subs	r7, #1
 8009e24:	d501      	bpl.n	8009e2a <_fwalk_reent+0x22>
 8009e26:	6824      	ldr	r4, [r4, #0]
 8009e28:	e7f5      	b.n	8009e16 <_fwalk_reent+0xe>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d907      	bls.n	8009e40 <_fwalk_reent+0x38>
 8009e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e34:	3301      	adds	r3, #1
 8009e36:	d003      	beq.n	8009e40 <_fwalk_reent+0x38>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	47c8      	blx	r9
 8009e3e:	4306      	orrs	r6, r0
 8009e40:	3568      	adds	r5, #104	; 0x68
 8009e42:	e7ee      	b.n	8009e22 <_fwalk_reent+0x1a>

08009e44 <__swhatbuf_r>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	460e      	mov	r6, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	b096      	sub	sp, #88	; 0x58
 8009e50:	4614      	mov	r4, r2
 8009e52:	461d      	mov	r5, r3
 8009e54:	da07      	bge.n	8009e66 <__swhatbuf_r+0x22>
 8009e56:	2300      	movs	r3, #0
 8009e58:	602b      	str	r3, [r5, #0]
 8009e5a:	89b3      	ldrh	r3, [r6, #12]
 8009e5c:	061a      	lsls	r2, r3, #24
 8009e5e:	d410      	bmi.n	8009e82 <__swhatbuf_r+0x3e>
 8009e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e64:	e00e      	b.n	8009e84 <__swhatbuf_r+0x40>
 8009e66:	466a      	mov	r2, sp
 8009e68:	f000 f96e 	bl	800a148 <_fstat_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	dbf2      	blt.n	8009e56 <__swhatbuf_r+0x12>
 8009e70:	9a01      	ldr	r2, [sp, #4]
 8009e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e7a:	425a      	negs	r2, r3
 8009e7c:	415a      	adcs	r2, r3
 8009e7e:	602a      	str	r2, [r5, #0]
 8009e80:	e7ee      	b.n	8009e60 <__swhatbuf_r+0x1c>
 8009e82:	2340      	movs	r3, #64	; 0x40
 8009e84:	2000      	movs	r0, #0
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	b016      	add	sp, #88	; 0x58
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}

08009e8c <__smakebuf_r>:
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e90:	079d      	lsls	r5, r3, #30
 8009e92:	4606      	mov	r6, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	d507      	bpl.n	8009ea8 <__smakebuf_r+0x1c>
 8009e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	b002      	add	sp, #8
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	ab01      	add	r3, sp, #4
 8009eaa:	466a      	mov	r2, sp
 8009eac:	f7ff ffca 	bl	8009e44 <__swhatbuf_r>
 8009eb0:	9900      	ldr	r1, [sp, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f000 f877 	bl	8009fa8 <_malloc_r>
 8009eba:	b948      	cbnz	r0, 8009ed0 <__smakebuf_r+0x44>
 8009ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec0:	059a      	lsls	r2, r3, #22
 8009ec2:	d4ef      	bmi.n	8009ea4 <__smakebuf_r+0x18>
 8009ec4:	f023 0303 	bic.w	r3, r3, #3
 8009ec8:	f043 0302 	orr.w	r3, r3, #2
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	e7e3      	b.n	8009e98 <__smakebuf_r+0xc>
 8009ed0:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <__smakebuf_r+0x7c>)
 8009ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	6020      	str	r0, [r4, #0]
 8009ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	6163      	str	r3, [r4, #20]
 8009ee2:	9b01      	ldr	r3, [sp, #4]
 8009ee4:	6120      	str	r0, [r4, #16]
 8009ee6:	b15b      	cbz	r3, 8009f00 <__smakebuf_r+0x74>
 8009ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eec:	4630      	mov	r0, r6
 8009eee:	f000 f93d 	bl	800a16c <_isatty_r>
 8009ef2:	b128      	cbz	r0, 8009f00 <__smakebuf_r+0x74>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f023 0303 	bic.w	r3, r3, #3
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	431d      	orrs	r5, r3
 8009f04:	81a5      	strh	r5, [r4, #12]
 8009f06:	e7cd      	b.n	8009ea4 <__smakebuf_r+0x18>
 8009f08:	08009cf9 	.word	0x08009cf9

08009f0c <_free_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4605      	mov	r5, r0
 8009f10:	2900      	cmp	r1, #0
 8009f12:	d045      	beq.n	8009fa0 <_free_r+0x94>
 8009f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f18:	1f0c      	subs	r4, r1, #4
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bfb8      	it	lt
 8009f1e:	18e4      	addlt	r4, r4, r3
 8009f20:	f000 f946 	bl	800a1b0 <__malloc_lock>
 8009f24:	4a1f      	ldr	r2, [pc, #124]	; (8009fa4 <_free_r+0x98>)
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	4610      	mov	r0, r2
 8009f2a:	b933      	cbnz	r3, 8009f3a <_free_r+0x2e>
 8009f2c:	6063      	str	r3, [r4, #4]
 8009f2e:	6014      	str	r4, [r2, #0]
 8009f30:	4628      	mov	r0, r5
 8009f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f36:	f000 b93c 	b.w	800a1b2 <__malloc_unlock>
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	d90c      	bls.n	8009f58 <_free_r+0x4c>
 8009f3e:	6821      	ldr	r1, [r4, #0]
 8009f40:	1862      	adds	r2, r4, r1
 8009f42:	4293      	cmp	r3, r2
 8009f44:	bf04      	itt	eq
 8009f46:	681a      	ldreq	r2, [r3, #0]
 8009f48:	685b      	ldreq	r3, [r3, #4]
 8009f4a:	6063      	str	r3, [r4, #4]
 8009f4c:	bf04      	itt	eq
 8009f4e:	1852      	addeq	r2, r2, r1
 8009f50:	6022      	streq	r2, [r4, #0]
 8009f52:	6004      	str	r4, [r0, #0]
 8009f54:	e7ec      	b.n	8009f30 <_free_r+0x24>
 8009f56:	4613      	mov	r3, r2
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	b10a      	cbz	r2, 8009f60 <_free_r+0x54>
 8009f5c:	42a2      	cmp	r2, r4
 8009f5e:	d9fa      	bls.n	8009f56 <_free_r+0x4a>
 8009f60:	6819      	ldr	r1, [r3, #0]
 8009f62:	1858      	adds	r0, r3, r1
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d10b      	bne.n	8009f80 <_free_r+0x74>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	4401      	add	r1, r0
 8009f6c:	1858      	adds	r0, r3, r1
 8009f6e:	4282      	cmp	r2, r0
 8009f70:	6019      	str	r1, [r3, #0]
 8009f72:	d1dd      	bne.n	8009f30 <_free_r+0x24>
 8009f74:	6810      	ldr	r0, [r2, #0]
 8009f76:	6852      	ldr	r2, [r2, #4]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	4401      	add	r1, r0
 8009f7c:	6019      	str	r1, [r3, #0]
 8009f7e:	e7d7      	b.n	8009f30 <_free_r+0x24>
 8009f80:	d902      	bls.n	8009f88 <_free_r+0x7c>
 8009f82:	230c      	movs	r3, #12
 8009f84:	602b      	str	r3, [r5, #0]
 8009f86:	e7d3      	b.n	8009f30 <_free_r+0x24>
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	1821      	adds	r1, r4, r0
 8009f8c:	428a      	cmp	r2, r1
 8009f8e:	bf04      	itt	eq
 8009f90:	6811      	ldreq	r1, [r2, #0]
 8009f92:	6852      	ldreq	r2, [r2, #4]
 8009f94:	6062      	str	r2, [r4, #4]
 8009f96:	bf04      	itt	eq
 8009f98:	1809      	addeq	r1, r1, r0
 8009f9a:	6021      	streq	r1, [r4, #0]
 8009f9c:	605c      	str	r4, [r3, #4]
 8009f9e:	e7c7      	b.n	8009f30 <_free_r+0x24>
 8009fa0:	bd38      	pop	{r3, r4, r5, pc}
 8009fa2:	bf00      	nop
 8009fa4:	240049a0 	.word	0x240049a0

08009fa8 <_malloc_r>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	1ccd      	adds	r5, r1, #3
 8009fac:	f025 0503 	bic.w	r5, r5, #3
 8009fb0:	3508      	adds	r5, #8
 8009fb2:	2d0c      	cmp	r5, #12
 8009fb4:	bf38      	it	cc
 8009fb6:	250c      	movcc	r5, #12
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	4606      	mov	r6, r0
 8009fbc:	db01      	blt.n	8009fc2 <_malloc_r+0x1a>
 8009fbe:	42a9      	cmp	r1, r5
 8009fc0:	d903      	bls.n	8009fca <_malloc_r+0x22>
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	6033      	str	r3, [r6, #0]
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	bd70      	pop	{r4, r5, r6, pc}
 8009fca:	f000 f8f1 	bl	800a1b0 <__malloc_lock>
 8009fce:	4a21      	ldr	r2, [pc, #132]	; (800a054 <_malloc_r+0xac>)
 8009fd0:	6814      	ldr	r4, [r2, #0]
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	b991      	cbnz	r1, 8009ffc <_malloc_r+0x54>
 8009fd6:	4c20      	ldr	r4, [pc, #128]	; (800a058 <_malloc_r+0xb0>)
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	b91b      	cbnz	r3, 8009fe4 <_malloc_r+0x3c>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f000 f83d 	bl	800a05c <_sbrk_r>
 8009fe2:	6020      	str	r0, [r4, #0]
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f000 f838 	bl	800a05c <_sbrk_r>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d124      	bne.n	800a03a <_malloc_r+0x92>
 8009ff0:	230c      	movs	r3, #12
 8009ff2:	6033      	str	r3, [r6, #0]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f8dc 	bl	800a1b2 <__malloc_unlock>
 8009ffa:	e7e4      	b.n	8009fc6 <_malloc_r+0x1e>
 8009ffc:	680b      	ldr	r3, [r1, #0]
 8009ffe:	1b5b      	subs	r3, r3, r5
 800a000:	d418      	bmi.n	800a034 <_malloc_r+0x8c>
 800a002:	2b0b      	cmp	r3, #11
 800a004:	d90f      	bls.n	800a026 <_malloc_r+0x7e>
 800a006:	600b      	str	r3, [r1, #0]
 800a008:	50cd      	str	r5, [r1, r3]
 800a00a:	18cc      	adds	r4, r1, r3
 800a00c:	4630      	mov	r0, r6
 800a00e:	f000 f8d0 	bl	800a1b2 <__malloc_unlock>
 800a012:	f104 000b 	add.w	r0, r4, #11
 800a016:	1d23      	adds	r3, r4, #4
 800a018:	f020 0007 	bic.w	r0, r0, #7
 800a01c:	1ac3      	subs	r3, r0, r3
 800a01e:	d0d3      	beq.n	8009fc8 <_malloc_r+0x20>
 800a020:	425a      	negs	r2, r3
 800a022:	50e2      	str	r2, [r4, r3]
 800a024:	e7d0      	b.n	8009fc8 <_malloc_r+0x20>
 800a026:	428c      	cmp	r4, r1
 800a028:	684b      	ldr	r3, [r1, #4]
 800a02a:	bf16      	itet	ne
 800a02c:	6063      	strne	r3, [r4, #4]
 800a02e:	6013      	streq	r3, [r2, #0]
 800a030:	460c      	movne	r4, r1
 800a032:	e7eb      	b.n	800a00c <_malloc_r+0x64>
 800a034:	460c      	mov	r4, r1
 800a036:	6849      	ldr	r1, [r1, #4]
 800a038:	e7cc      	b.n	8009fd4 <_malloc_r+0x2c>
 800a03a:	1cc4      	adds	r4, r0, #3
 800a03c:	f024 0403 	bic.w	r4, r4, #3
 800a040:	42a0      	cmp	r0, r4
 800a042:	d005      	beq.n	800a050 <_malloc_r+0xa8>
 800a044:	1a21      	subs	r1, r4, r0
 800a046:	4630      	mov	r0, r6
 800a048:	f000 f808 	bl	800a05c <_sbrk_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d0cf      	beq.n	8009ff0 <_malloc_r+0x48>
 800a050:	6025      	str	r5, [r4, #0]
 800a052:	e7db      	b.n	800a00c <_malloc_r+0x64>
 800a054:	240049a0 	.word	0x240049a0
 800a058:	240049a4 	.word	0x240049a4

0800a05c <_sbrk_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4c06      	ldr	r4, [pc, #24]	; (800a078 <_sbrk_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4605      	mov	r5, r0
 800a064:	4608      	mov	r0, r1
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	f7f6 feda 	bl	8000e20 <_sbrk>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_sbrk_r+0x1a>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	b103      	cbz	r3, 800a076 <_sbrk_r+0x1a>
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	24004b00 	.word	0x24004b00

0800a07c <__sread>:
 800a07c:	b510      	push	{r4, lr}
 800a07e:	460c      	mov	r4, r1
 800a080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a084:	f000 f896 	bl	800a1b4 <_read_r>
 800a088:	2800      	cmp	r0, #0
 800a08a:	bfab      	itete	ge
 800a08c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a08e:	89a3      	ldrhlt	r3, [r4, #12]
 800a090:	181b      	addge	r3, r3, r0
 800a092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a096:	bfac      	ite	ge
 800a098:	6563      	strge	r3, [r4, #84]	; 0x54
 800a09a:	81a3      	strhlt	r3, [r4, #12]
 800a09c:	bd10      	pop	{r4, pc}

0800a09e <__swrite>:
 800a09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	898b      	ldrh	r3, [r1, #12]
 800a0a6:	05db      	lsls	r3, r3, #23
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4616      	mov	r6, r2
 800a0ae:	d505      	bpl.n	800a0bc <__swrite+0x1e>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b8:	f000 f868 	bl	800a18c <_lseek_r>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	463b      	mov	r3, r7
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d2:	f000 b817 	b.w	800a104 <_write_r>

0800a0d6 <__sseek>:
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	460c      	mov	r4, r1
 800a0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0de:	f000 f855 	bl	800a18c <_lseek_r>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	bf15      	itete	ne
 800a0e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0f2:	81a3      	strheq	r3, [r4, #12]
 800a0f4:	bf18      	it	ne
 800a0f6:	81a3      	strhne	r3, [r4, #12]
 800a0f8:	bd10      	pop	{r4, pc}

0800a0fa <__sclose>:
 800a0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fe:	f000 b813 	b.w	800a128 <_close_r>
	...

0800a104 <_write_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4c07      	ldr	r4, [pc, #28]	; (800a124 <_write_r+0x20>)
 800a108:	4605      	mov	r5, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	6022      	str	r2, [r4, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	f7f6 fe33 	bl	8000d7e <_write>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_write_r+0x1e>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_write_r+0x1e>
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	24004b00 	.word	0x24004b00

0800a128 <_close_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4c06      	ldr	r4, [pc, #24]	; (800a144 <_close_r+0x1c>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4605      	mov	r5, r0
 800a130:	4608      	mov	r0, r1
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	f7f6 fe3f 	bl	8000db6 <_close>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_close_r+0x1a>
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_close_r+0x1a>
 800a140:	602b      	str	r3, [r5, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	24004b00 	.word	0x24004b00

0800a148 <_fstat_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4c07      	ldr	r4, [pc, #28]	; (800a168 <_fstat_r+0x20>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4605      	mov	r5, r0
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	f7f6 fe3a 	bl	8000dce <_fstat>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d102      	bne.n	800a164 <_fstat_r+0x1c>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	b103      	cbz	r3, 800a164 <_fstat_r+0x1c>
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	24004b00 	.word	0x24004b00

0800a16c <_isatty_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4c06      	ldr	r4, [pc, #24]	; (800a188 <_isatty_r+0x1c>)
 800a170:	2300      	movs	r3, #0
 800a172:	4605      	mov	r5, r0
 800a174:	4608      	mov	r0, r1
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	f7f6 fe39 	bl	8000dee <_isatty>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_isatty_r+0x1a>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	b103      	cbz	r3, 800a186 <_isatty_r+0x1a>
 800a184:	602b      	str	r3, [r5, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	24004b00 	.word	0x24004b00

0800a18c <_lseek_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4c07      	ldr	r4, [pc, #28]	; (800a1ac <_lseek_r+0x20>)
 800a190:	4605      	mov	r5, r0
 800a192:	4608      	mov	r0, r1
 800a194:	4611      	mov	r1, r2
 800a196:	2200      	movs	r2, #0
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	f7f6 fe32 	bl	8000e04 <_lseek>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_lseek_r+0x1e>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_lseek_r+0x1e>
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	24004b00 	.word	0x24004b00

0800a1b0 <__malloc_lock>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__malloc_unlock>:
 800a1b2:	4770      	bx	lr

0800a1b4 <_read_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4c07      	ldr	r4, [pc, #28]	; (800a1d4 <_read_r+0x20>)
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	4608      	mov	r0, r1
 800a1bc:	4611      	mov	r1, r2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	6022      	str	r2, [r4, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f7f6 fdbe 	bl	8000d44 <_read>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_read_r+0x1e>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_read_r+0x1e>
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	24004b00 	.word	0x24004b00

0800a1d8 <_init>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr

0800a1e4 <_fini>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	bf00      	nop
 800a1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ea:	bc08      	pop	{r3}
 800a1ec:	469e      	mov	lr, r3
 800a1ee:	4770      	bx	lr
